from leo.core import leoGlobals as g
from typing import Any

abspath = g.os_path_abspath
basename = g.os_path_basename
expanduser = g.os_path_expanduser
isdir = g.os_path_isdir
isfile = g.os_path_isfile
join = g.os_path_join
normcase = g.os_path_normcase
split = g.os_path_split

class CommanderCacher:
    db: Any
    def __init__(self) -> None: ...
    def clear(self) -> None: ...
    def close(self) -> None: ...
    def commit(self) -> None: ...
    def dump(self) -> None: ...
    def get_wrapper(self, c, fn: Any | None = ...): ...
    def test(self): ...
    def save(self, c, fn) -> None: ...

class CommanderWrapper:
    c: Any
    db: Any
    key: Any
    user_keys: Any
    def __init__(self, c, fn: Any | None = ...) -> None: ...
    def get(self, key, default: Any | None = ...): ...
    def keys(self): ...
    def __contains__(self, key): ...
    def __delitem__(self, key) -> None: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...

class GlobalCacher:
    db: Any
    def __init__(self) -> None: ...
    def clear(self) -> None: ...
    def commit_and_close(self) -> None: ...
    def dump(self, tag: str = ...) -> None: ...

class PickleShareDB:
    root: Any
    cache: Any
    loader: Any
    dumper: Any
    def __init__(self, root): ...
    def __contains__(self, key): ...
    def __delitem__(self, key) -> None: ...
    def __getitem__(self, key): ...
    def __iter__(self): ...
    def __setitem__(self, key, value) -> None: ...
    def clear(self) -> None: ...
    def get(self, key, default: Any | None = ...): ...
    def has_key(self, key): ...
    def items(self): ...
    def keys(self, globpat: Any | None = ...): ...
    def uncache(self, *items) -> None: ...

class SqlitePickleShare:
    def init_dbtables(self, conn) -> None: ...
    root: Any
    conn: Any
    cache: Any
    loader: Any
    dumper: Any
    def __init__(self, root): ...
    def __contains__(self, key): ...
    def __delitem__(self, key) -> None: ...
    def __getitem__(self, key): ...
    def __iter__(self): ...
    def __setitem__(self, key, value) -> None: ...
    def clear(self) -> None: ...
    def get(self, key, default: Any | None = ...): ...
    def has_key(self, key): ...
    def items(self) -> None: ...
    def keys(self, globpat: Any | None = ...) -> None: ...
    def reset_protocol_in_values(self): ...
    def uncache(self, *items) -> None: ...

def dump_cache(db, tag) -> None: ...
def dump_list(heading, aList) -> None: ...
