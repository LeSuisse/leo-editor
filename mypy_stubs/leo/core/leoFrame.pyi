from leo.core import leoColorizer as leoColorizer, leoMenu as leoMenu, leoNodes as leoNodes
from typing import Any

def log_cmd(name): ...
def body_cmd(name): ...
def frame_cmd(name): ...

class StatusLineAPI:
    def __init__(self, c, parentFrame) -> None: ...
    def clear(self) -> None: ...
    def disable(self, background: Any | None = ...) -> None: ...
    def enable(self, background: str = ...) -> None: ...
    def get(self): ...
    def isEnabled(self): ...
    def put(self, s, bg: Any | None = ..., fg: Any | None = ...) -> None: ...
    def setFocus(self) -> None: ...
    def update(self) -> None: ...

class TreeAPI:
    def __init__(self, frame) -> None: ...
    def drawIcon(self, p) -> None: ...
    def editLabel(self, v, selectAll: bool = ..., selection: Any | None = ...) -> None: ...
    def edit_widget(self, p) -> None: ...
    def redraw(self, p: Any | None = ...) -> None: ...
    redraw_now: Any
    def scrollTo(self, p) -> None: ...
    def initAfterLoad(self) -> None: ...
    def onHeadChanged(self, p, undoType: str = ..., s: Any | None = ..., e: Any | None = ...) -> None: ...
    def redraw_after_contract(self, p) -> None: ...
    def redraw_after_expand(self, p) -> None: ...
    def redraw_after_head_changed(self) -> None: ...
    def redraw_after_icons_changed(self) -> None: ...
    def redraw_after_select(self, p: Any | None = ...) -> None: ...
    def OnIconCtrlClick(self, p) -> None: ...
    def endEditLabel(self) -> None: ...
    def getEditTextDict(self, v) -> None: ...
    def injectCallbacks(self) -> None: ...
    def onHeadlineKey(self, event) -> None: ...
    def select(self, p) -> None: ...
    def updateHead(self, event, w) -> None: ...

class WrapperAPI:
    def __init__(self, c) -> None: ...
    def appendText(self, s) -> None: ...
    def clipboard_append(self, s) -> None: ...
    def clipboard_clear(self) -> None: ...
    def delete(self, i, j: Any | None = ...) -> None: ...
    def deleteTextSelection(self) -> None: ...
    def disable(self) -> None: ...
    def enable(self, enabled: bool = ...) -> None: ...
    def flashCharacter(self, i, bg: str = ..., fg: str = ..., flashes: int = ..., delay: int = ...) -> None: ...
    def get(self, i, j): ...
    def getAllText(self): ...
    def getInsertPoint(self): ...
    def getSelectedText(self): ...
    def getSelectionRange(self): ...
    def getXScrollPosition(self): ...
    def getYScrollPosition(self): ...
    def hasSelection(self): ...
    def insert(self, i, s) -> None: ...
    def see(self, i) -> None: ...
    def seeInsertPoint(self) -> None: ...
    def selectAllText(self, insert: Any | None = ...) -> None: ...
    def setAllText(self, s) -> None: ...
    def setFocus(self) -> None: ...
    def setInsertPoint(self, pos, s: Any | None = ...) -> None: ...
    def setSelectionRange(self, i, j, insert: Any | None = ...) -> None: ...
    def setXScrollPosition(self, i) -> None: ...
    def setYScrollPosition(self, i) -> None: ...
    def tag_configure(self, colorName, **keys) -> None: ...
    def toPythonIndex(self, index): ...
    def toPythonIndexRowCol(self, index): ...

class IconBarAPI:
    def __init__(self, c, parentFrame) -> None: ...
    def add(self, *args, **keys) -> None: ...
    def addRow(self, height: Any | None = ...) -> None: ...
    def addRowIfNeeded(self) -> None: ...
    def addWidget(self, w) -> None: ...
    def clear(self) -> None: ...
    def createChaptersIcon(self) -> None: ...
    def deleteButton(self, w) -> None: ...
    def getNewFrame(self) -> None: ...
    def setCommandForButton(self, button, command, command_p, controller, gnx, script) -> None: ...

class LeoBody:
    c: Any
    editorWrappers: Any
    frame: Any
    parentFrame: Any
    totalNumberOfEditors: int
    widget: Any
    wrapper: Any
    numberOfEditors: int
    pb: Any
    colorizer: Any
    use_chapters: bool
    def __init__(self, frame, parentFrame) -> None: ...
    def forceFullRecolor(self) -> None: ...
    def getColorizer(self): ...
    def updateSyntaxColorer(self, p): ...
    def recolor(self, p, **kwargs) -> None: ...
    recolor_now: Any
    def oops(self) -> None: ...
    def createEditorFrame(self, w) -> None: ...
    def createTextWidget(self, parentFrame, p, name) -> None: ...
    def packEditorLabelWidget(self, w) -> None: ...
    def onFocusOut(self, obj) -> None: ...
    def addEditor(self, event: Any | None = ...) -> None: ...
    def assignPositionToEditor(self, p) -> None: ...
    def cycleEditorFocus(self, event: Any | None = ...) -> None: ...
    def deleteEditor(self, event: Any | None = ...) -> None: ...
    def findEditorForChapter(self, chapter, p): ...
    def unselectLabel(self, w) -> None: ...
    def selectLabel(self, w) -> None: ...
    selectEditorLockout: bool
    def selectEditor(self, w): ...
    def selectEditorHelper(self, wrapper) -> None: ...
    def updateEditors(self) -> None: ...
    def computeLabel(self, w): ...
    def createChapterIvar(self, w) -> None: ...
    def ensurePositionExists(self, w): ...
    def deactivateActiveEditor(self, w) -> None: ...
    def recolorWidget(self, p, w) -> None: ...
    def switchToChapter(self, w) -> None: ...
    def updateInjectedIvars(self, w, p) -> None: ...
    def getInsertLines(self): ...
    def getSelectionAreas(self): ...
    def getSelectionLines(self): ...
    def onBodyChanged(self, undoType, oldSel: Any | None = ...) -> None: ...

class LeoFrame:
    instances: int
    c: Any
    gui: Any
    iconBarClass: Any
    statusLineClass: Any
    title: Any
    body: Any
    colorPanel: Any
    comparePanel: Any
    findPanel: Any
    fontPanel: Any
    iconBar: Any
    isNullFrame: bool
    keys: Any
    log: Any
    menu: Any
    miniBufferWidget: Any
    outerFrame: Any
    prefsPanel: Any
    statusLine: Any
    tree: Any
    useMiniBufferWidget: bool
    cursorStay: bool
    componentsDict: Any
    es_newlines: int
    openDirectory: str
    saved: bool
    splitVerticalFlag: bool
    startupWindow: bool
    stylesheet: Any
    tab_width: int
    def __init__(self, c, gui) -> None: ...
    def createFirstTreeNode(self): ...
    def OnBodyClick(self, event: Any | None = ...) -> None: ...
    def OnBodyRClick(self, event: Any | None = ...) -> None: ...
    def getTitle(self): ...
    def setTitle(self, title) -> None: ...
    def initAfterLoad(self) -> None: ...
    def initCompleteHint(self) -> None: ...
    def setTabWidth(self, w) -> None: ...
    def initialRatios(self): ...
    def longFileName(self): ...
    def shortFileName(self): ...
    def oops(self) -> None: ...
    def promptForSave(self): ...
    def scanForTabWidth(self, p) -> None: ...
    def addIconButton(self, *args, **keys): ...
    def addIconRow(self): ...
    def addIconWidget(self, w): ...
    def clearIconBar(self): ...
    def createIconBar(self): ...
    def getIconBar(self): ...
    getIconBarObject: Any
    def getNewIconFrame(self): ...
    def hideIconBar(self) -> None: ...
    def showIconBar(self) -> None: ...
    def createStatusLine(self): ...
    def clearStatusLine(self) -> None: ...
    def disableStatusLine(self, background: Any | None = ...) -> None: ...
    def enableStatusLine(self, background: str = ...) -> None: ...
    def getStatusLine(self): ...
    getStatusObject: Any
    def putStatusLine(self, s, bg: Any | None = ..., fg: Any | None = ...) -> None: ...
    def setFocusStatusLine(self) -> None: ...
    def statusLineIsEnabled(self): ...
    def updateStatusLine(self) -> None: ...
    def copyText(self, event: Any | None = ...) -> None: ...
    OnCopyFromMenu: Any
    def cutText(self, event: Any | None = ...) -> None: ...
    OnCutFromMenu: Any
    def pasteText(self, event: Any | None = ..., middleButton: bool = ...) -> None: ...
    OnPasteFromMenu: Any
    def OnPaste(self, event: Any | None = ...): ...
    def endEditLabelCommand(self, event: Any | None = ..., p: Any | None = ...) -> None: ...
    def bringToFront(self) -> None: ...
    def cascade(self, event: Any | None = ...) -> None: ...
    def contractBodyPane(self, event: Any | None = ...) -> None: ...
    def contractLogPane(self, event: Any | None = ...) -> None: ...
    def contractOutlinePane(self, event: Any | None = ...) -> None: ...
    def contractPane(self, event: Any | None = ...) -> None: ...
    def deiconify(self) -> None: ...
    def equalSizedPanes(self, event: Any | None = ...) -> None: ...
    def expandBodyPane(self, event: Any | None = ...) -> None: ...
    def expandLogPane(self, event: Any | None = ...) -> None: ...
    def expandOutlinePane(self, event: Any | None = ...) -> None: ...
    def expandPane(self, event: Any | None = ...) -> None: ...
    def fullyExpandBodyPane(self, event: Any | None = ...) -> None: ...
    def fullyExpandLogPane(self, event: Any | None = ...) -> None: ...
    def fullyExpandOutlinePane(self, event: Any | None = ...) -> None: ...
    def fullyExpandPane(self, event: Any | None = ...) -> None: ...
    def get_window_info(self) -> None: ...
    def hideBodyPane(self, event: Any | None = ...) -> None: ...
    def hideLogPane(self, event: Any | None = ...) -> None: ...
    def hideLogWindow(self, event: Any | None = ...) -> None: ...
    def hideOutlinePane(self, event: Any | None = ...) -> None: ...
    def hidePane(self, event: Any | None = ...) -> None: ...
    def leoHelp(self, event: Any | None = ...) -> None: ...
    def lift(self) -> None: ...
    def minimizeAll(self, event: Any | None = ...) -> None: ...
    def resizePanesToRatio(self, ratio, secondary_ratio) -> None: ...
    def resizeToScreen(self, event: Any | None = ...) -> None: ...
    def setInitialWindowGeometry(self) -> None: ...
    def setTopGeometry(self, w, h, x, y) -> None: ...
    def toggleActivePane(self, event: Any | None = ...) -> None: ...
    def toggleSplitDirection(self, event: Any | None = ...) -> None: ...

class LeoLog:
    frame: Any
    c: Any
    enabled: bool
    newlines: int
    isNull: bool
    canvasCtrl: Any
    logCtrl: Any
    tabName: Any
    tabFrame: Any
    canvasDict: Any
    frameDict: Any
    logNumber: int
    newTabCount: int
    textDict: Any
    def __init__(self, frame, parentFrame) -> None: ...
    def clearTab(self, tabName, wrap: str = ...) -> None: ...
    def createTab(self, tabName, createText: bool = ..., widget: Any | None = ..., wrap: str = ...) -> None: ...
    def createTextWidget(self, parentFrame) -> None: ...
    def deleteTab(self, tabName, force: bool = ...) -> None: ...
    def disable(self) -> None: ...
    def enable(self, enabled: bool = ...) -> None: ...
    def getSelectedTab(self): ...
    def hideTab(self, tabName) -> None: ...
    def lowerTab(self, tabName) -> None: ...
    def raiseTab(self, tabName) -> None: ...
    def orderedTabNames(self, LeoLog: Any | None = ...): ...
    def numberOfVisibleTabs(self): ...
    def put(self, s, color: Any | None = ..., tabName: str = ..., from_redirect: bool = ..., nodeLink: Any | None = ...) -> None: ...
    def putnl(self, tabName: str = ...) -> None: ...
    def renameTab(self, oldName, newName) -> None: ...
    def selectTab(self, tabName, createText: bool = ..., widget: Any | None = ..., wrap: str = ...): ...

class LeoTree:
    frame: Any
    c: Any
    edit_text_dict: Any
    drag_p: Any
    generation: int
    redrawCount: int
    use_chapters: bool
    canvas: Any
    def __init__(self, frame) -> None: ...
    def initAfterLoad(self) -> None: ...
    def redraw_after_contract(self, p) -> None: ...
    def redraw_after_expand(self, p) -> None: ...
    def redraw_after_head_changed(self) -> None: ...
    def redraw_after_icons_changed(self) -> None: ...
    def redraw_after_select(self, p: Any | None = ...) -> None: ...
    def onHeadChanged(self, p, undoType: str = ...) -> None: ...
    def endEditLabel(self) -> None: ...
    def getEditTextDict(self, v): ...
    def onHeadlineKey(self, event) -> None: ...
    def OnIconCtrlClick(self, p) -> None: ...
    def OnIconDoubleClick(self, p) -> None: ...
    def updateHead(self, event, w) -> None: ...
    def drawIcon(self, p) -> None: ...
    def redraw(self, p: Any | None = ...) -> None: ...
    redraw_now: Any
    def scrollTo(self, p) -> None: ...
    def editLabel(self, p, selectAll: bool = ..., selection: Any | None = ...) -> None: ...
    def edit_widget(self, p) -> None: ...
    tree_select_lockout: bool
    prev_v: Any
    def select(self, p) -> None: ...
    def selectHelper(self, p) -> None: ...
    def unselect_helper(self, old_p, p) -> None: ...
    def select_new_node(self, old_p, p) -> None: ...
    def set_body_text_after_select(self, p, old_p, force: bool = ...) -> None: ...
    def change_current_position(self, old_p, p) -> None: ...
    def scroll_cursor(self, p) -> None: ...
    def set_status_line(self, p) -> None: ...
    def oops(self) -> None: ...

class LeoTreeTab:
    c: Any
    cc: Any
    nb: Any
    parentFrame: Any
    def __init__(self, c, chapterController, parentFrame) -> None: ...
    def createControl(self) -> None: ...
    def createTab(self, tabName, select: bool = ...) -> None: ...
    def destroyTab(self, tabName) -> None: ...
    def selectTab(self, tabName) -> None: ...
    def setTabLabel(self, tabName) -> None: ...
    def oops(self) -> None: ...

class NullBody(LeoBody):
    insertPoint: int
    selection: Any
    s: str
    widget: Any
    wrapper: Any
    colorizer: Any
    def __init__(self, frame: Any | None = ..., parentFrame: Any | None = ...) -> None: ...
    def createControl(self, parentFrame, p) -> None: ...
    def addEditor(self, event: Any | None = ...) -> None: ...
    def assignPositionToEditor(self, p) -> None: ...
    def createEditorFrame(self, w) -> None: ...
    def cycleEditorFocus(self, event: Any | None = ...) -> None: ...
    def deleteEditor(self, event: Any | None = ...) -> None: ...
    def selectEditor(self, w) -> None: ...
    def selectLabel(self, w) -> None: ...
    def setEditorColors(self, bg, fg) -> None: ...
    def unselectLabel(self, w) -> None: ...
    def updateEditors(self) -> None: ...
    def forceFullRecolor(self) -> None: ...
    def scheduleIdleTimeRoutine(self, function, *args, **keys) -> None: ...
    def setFocus(self) -> None: ...

class NullColorizer(leoColorizer.BaseColorizer):
    recolorCount: int
    def colorize(self, p) -> None: ...

class NullFrame(LeoFrame):
    wrapper: Any
    iconBar: Any
    initComplete: bool
    isNullFrame: bool
    outerFrame: Any
    ratio: float
    statusLineClass: Any
    title: Any
    top: Any
    body: Any
    log: Any
    menu: Any
    tree: Any
    w: int
    h: int
    x: int
    y: int
    def __init__(self, c, title, gui) -> None: ...
    def bringToFront(self) -> None: ...
    def cascade(self, event: Any | None = ...) -> None: ...
    def contractBodyPane(self, event: Any | None = ...) -> None: ...
    def contractLogPane(self, event: Any | None = ...) -> None: ...
    def contractOutlinePane(self, event: Any | None = ...) -> None: ...
    def contractPane(self, event: Any | None = ...) -> None: ...
    def deiconify(self) -> None: ...
    def destroySelf(self) -> None: ...
    def equalSizedPanes(self, event: Any | None = ...) -> None: ...
    def expandBodyPane(self, event: Any | None = ...) -> None: ...
    def expandLogPane(self, event: Any | None = ...) -> None: ...
    def expandOutlinePane(self, event: Any | None = ...) -> None: ...
    def expandPane(self, event: Any | None = ...) -> None: ...
    def fullyExpandBodyPane(self, event: Any | None = ...) -> None: ...
    def fullyExpandLogPane(self, event: Any | None = ...) -> None: ...
    def fullyExpandOutlinePane(self, event: Any | None = ...) -> None: ...
    def fullyExpandPane(self, event: Any | None = ...) -> None: ...
    def get_window_info(self): ...
    def hideBodyPane(self, event: Any | None = ...) -> None: ...
    def hideLogPane(self, event: Any | None = ...) -> None: ...
    def hideLogWindow(self, event: Any | None = ...) -> None: ...
    def hideOutlinePane(self, event: Any | None = ...) -> None: ...
    def hidePane(self, event: Any | None = ...) -> None: ...
    def leoHelp(self, event: Any | None = ...) -> None: ...
    def lift(self) -> None: ...
    def minimizeAll(self, event: Any | None = ...) -> None: ...
    def oops(self) -> None: ...
    def resizePanesToRatio(self, ratio, secondary_ratio) -> None: ...
    def resizeToScreen(self, event: Any | None = ...) -> None: ...
    def setInitialWindowGeometry(self) -> None: ...
    def setTopGeometry(self, w, h, x, y): ...
    def setWrap(self, flag, force: bool = ...) -> None: ...
    def toggleActivePane(self, event: Any | None = ...) -> None: ...
    def toggleSplitDirection(self, event: Any | None = ...) -> None: ...
    def update(self) -> None: ...
    def finishCreate(self) -> None: ...

class NullIconBarClass:
    c: Any
    iconFrame: Any
    parentFrame: Any
    w: Any
    def __init__(self, c, parentFrame) -> None: ...
    def addRow(self, height: Any | None = ...) -> None: ...
    def addRowIfNeeded(self) -> None: ...
    def addWidget(self, w) -> None: ...
    def createChaptersIcon(self) -> None: ...
    def deleteButton(self, w) -> None: ...
    def getNewFrame(self) -> None: ...
    def hide(self) -> None: ...
    def show(self) -> None: ...
    command: Any
    name: Any
    text: Any
    def add(self, *args, **keys): ...
    def clear(self) -> None: ...
    def setCommandForButton(self, button, command, command_p, controller, gnx, script) -> None: ...

class NullLog(LeoLog):
    isNull: bool
    logNumber: int
    widget: Any
    def __init__(self, frame: Any | None = ..., parentFrame: Any | None = ...) -> None: ...
    def finishCreate(self) -> None: ...
    def createControl(self, parentFrame): ...
    def createTextWidget(self, parentFrame): ...
    def hasSelection(self): ...
    def isLogWidget(self, w): ...
    def oops(self) -> None: ...
    def put(self, s, color: Any | None = ..., tabName: str = ..., from_redirect: bool = ..., nodeLink: Any | None = ...) -> None: ...
    def putnl(self, tabName: str = ...) -> None: ...
    def clearTab(self, tabName, wrap: str = ...) -> None: ...
    def createCanvas(self, tabName) -> None: ...
    def createTab(self, tabName, createText: bool = ..., widget: Any | None = ..., wrap: str = ...) -> None: ...
    def deleteTab(self, tabName, force: bool = ...) -> None: ...
    def getSelectedTab(self) -> None: ...
    def lowerTab(self, tabName) -> None: ...
    def raiseTab(self, tabName) -> None: ...
    def renameTab(self, oldName, newName) -> None: ...
    def selectTab(self, tabName, createText: bool = ..., widget: Any | None = ..., wrap: str = ...) -> None: ...

class NullStatusLineClass:
    c: Any
    enabled: bool
    parentFrame: Any
    textWidget: Any
    def __init__(self, c, parentFrame) -> None: ...
    def disable(self, background: Any | None = ...) -> None: ...
    def enable(self, background: str = ...) -> None: ...
    def clear(self) -> None: ...
    def get(self): ...
    def isEnabled(self): ...
    def put(self, s, bg: Any | None = ..., fg: Any | None = ...) -> None: ...
    def setFocus(self) -> None: ...
    def update(self) -> None: ...

class NullTree(LeoTree):
    c: Any
    editWidgetsDict: Any
    font: Any
    fontName: Any
    canvas: Any
    treeWidget: Any
    redrawCount: int
    updateCount: int
    def __init__(self, frame) -> None: ...
    def edit_widget(self, p): ...
    def editLabel(self, p, selectAll: bool = ..., selection: Any | None = ...): ...
    def printWidgets(self) -> None: ...
    def drawIcon(self, p) -> None: ...
    def redraw(self, p: Any | None = ...): ...
    redraw_now: Any
    def redraw_after_contract(self, p) -> None: ...
    def redraw_after_expand(self, p) -> None: ...
    def redraw_after_head_changed(self) -> None: ...
    def redraw_after_icons_changed(self) -> None: ...
    def redraw_after_select(self, p: Any | None = ...) -> None: ...
    def scrollTo(self, p) -> None: ...
    def updateAllIcons(self, p) -> None: ...
    def updateIcon(self, p) -> None: ...
    def setHeadline(self, p, s) -> None: ...

class StringTextWrapper:
    c: Any
    name: Any
    ins: int
    sel: Any
    s: str
    supportsHighLevelInterface: bool
    widget: Any
    def __init__(self, c, name) -> None: ...
    def getName(self): ...
    def clipboard_clear(self) -> None: ...
    def clipboard_append(self, s) -> None: ...
    def flashCharacter(self, i, bg: str = ..., fg: str = ..., flashes: int = ..., delay: int = ...) -> None: ...
    def getXScrollPosition(self): ...
    def getYScrollPosition(self): ...
    def see(self, i) -> None: ...
    def seeInsertPoint(self) -> None: ...
    def setFocus(self) -> None: ...
    def setStyleClass(self, name) -> None: ...
    def setXScrollPosition(self, i) -> None: ...
    def setYScrollPosition(self, i) -> None: ...
    def tag_configure(self, colorName, **keys) -> None: ...
    def appendText(self, s) -> None: ...
    def delete(self, i, j: Any | None = ...) -> None: ...
    def deleteTextSelection(self) -> None: ...
    def get(self, i, j: Any | None = ...): ...
    def getAllText(self): ...
    virtualInsertPoint: Any
    def getInsertPoint(self): ...
    def getSelectedText(self): ...
    def getSelectionRange(self, sort: bool = ...): ...
    def hasSelection(self): ...
    def insert(self, i, s) -> None: ...
    def selectAllText(self, insert: Any | None = ...) -> None: ...
    def setAllText(self, s) -> None: ...
    def setInsertPoint(self, pos, s: Any | None = ...) -> None: ...
    def setSelectionRange(self, i, j, insert: Any | None = ...) -> None: ...
    def toPythonIndex(self, index): ...
    def toPythonIndexRowCol(self, index): ...
