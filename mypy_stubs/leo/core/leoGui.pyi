from leo.core import leoFrame as leoFrame
from typing import Any

class LeoGui:
    active: Any
    consoleOnly: bool
    globalFindTabManager: Any
    globalFindTab: Any
    idleTimeClass: Any
    isNullGui: bool
    lastFrame: Any
    leoIcon: Any
    mGuiName: Any
    mainLoop: Any
    plainTextWidget: Any
    root: Any
    script: Any
    splashScreen: Any
    utils: Any
    ScriptingControllerClass: Any
    ignoreChars: Any
    FKeys: Any
    specialChars: Any
    def __init__(self, guiName) -> None: ...
    def create_key_event(self, c, binding: Any | None = ..., char: Any | None = ..., event: Any | None = ..., w: Any | None = ..., x: Any | None = ..., x_root: Any | None = ..., y: Any | None = ..., y_root: Any | None = ...): ...
    def guiName(self): ...
    scriptFileName: Any
    def setScript(self, script: Any | None = ..., scriptFileName: Any | None = ...) -> None: ...
    def event_generate(self, c, char, shortcut, w) -> None: ...
    def destroySelf(self) -> None: ...
    def runAboutLeoDialog(self, c, version, theCopyright, url, email) -> None: ...
    def runAskLeoIDDialog(self) -> None: ...
    def runAskOkDialog(self, c, title, message: Any | None = ..., text: str = ...) -> None: ...
    def runAskOkCancelNumberDialog(self, c, title, message, cancelButtonText: Any | None = ..., okButtonText: Any | None = ...) -> None: ...
    def runAskOkCancelStringDialog(self, c, title, message, cancelButtonText: Any | None = ..., okButtonText: Any | None = ..., default: str = ..., wide: bool = ...) -> None: ...
    def runAskYesNoDialog(self, c, title, message: Any | None = ..., yes_all: bool = ..., no_all: bool = ...) -> None: ...
    def runAskYesNoCancelDialog(self, c, title, message: Any | None = ..., yesMessage: str = ..., noMessage: str = ..., yesToAllMessage: Any | None = ..., defaultButton: str = ..., cancelMessage: Any | None = ...) -> None: ...
    def runPropertiesDialog(self, title: str = ..., data: Any | None = ..., callback: Any | None = ..., buttons: Any | None = ...) -> None: ...
    def runOpenFileDialog(self, c, title, filetypes, defaultextension, multiple: bool = ..., startpath: Any | None = ...) -> None: ...
    def runSaveFileDialog(self, c, initialfile, title, filetypes, defaultextension) -> None: ...
    def createColorPanel(self, c) -> None: ...
    def createComparePanel(self, c) -> None: ...
    def createFindTab(self, c, parentFrame) -> None: ...
    def createFontPanel(self, c) -> None: ...
    def createLeoFrame(self, c, title) -> None: ...
    def runMainLoop(self) -> None: ...
    def replaceClipboardWith(self, s) -> None: ...
    def getTextFromClipboard(self) -> None: ...
    def attachLeoIcon(self, window) -> None: ...
    def center_dialog(self, dialog) -> None: ...
    def create_labeled_frame(self, parent, caption: Any | None = ..., relief: str = ..., bd: int = ..., padx: int = ..., pady: int = ...) -> None: ...
    def get_window_info(self, window) -> None: ...
    def get_focus(self, *args, **kwargs) -> None: ...
    def set_focus(self, commander, widget) -> None: ...
    def getFontFromParams(self, family, size, slant, weight, defaultSize: int = ...) -> None: ...
    def getFullVersion(self, c: Any | None = ...): ...
    def makeScriptButton(self, c, args: Any | None = ..., p: Any | None = ..., script: Any | None = ..., buttonText: Any | None = ..., balloonText: str = ..., shortcut: Any | None = ..., bg: str = ..., define_g: bool = ..., define_name: str = ..., silent: bool = ...) -> None: ...
    def dismiss_splash_screen(self) -> None: ...
    def ensure_commander_visible(self, c) -> None: ...
    def finishCreate(self) -> None: ...
    def postPopupMenu(self, *args, **keys) -> None: ...
    def oops(self) -> None: ...
    def put_help(self, c, s, short_title) -> None: ...
    def widget_name(self, w): ...

class LeoKeyEvent:
    c: Any
    char: Any
    event: Any
    stroke: Any
    w: Any
    x: Any
    y: Any
    x_root: Any
    y_root: Any
    def __init__(self, c, char, event, binding, w, x: Any | None = ..., y: Any | None = ..., x_root: Any | None = ..., y_root: Any | None = ...) -> None: ...
    def get(self, attr): ...
    def __getitem__(self, attr): ...
    def type(self): ...

class NullGui(LeoGui):
    clipboardContents: str
    focusWidget: Any
    script: Any
    lastFrame: Any
    isNullGui: bool
    idleTimeClass: Any
    def __init__(self, guiName: str = ...) -> None: ...
    def runAboutLeoDialog(self, c, version, theCopyright, url, email): ...
    def runAskLeoIDDialog(self): ...
    def runAskOkDialog(self, c, title, message: Any | None = ..., text: str = ...): ...
    def runAskOkCancelNumberDialog(self, c, title, message, cancelButtonText: Any | None = ..., okButtonText: Any | None = ...): ...
    def runAskOkCancelStringDialog(self, c, title, message, cancelButtonText: Any | None = ..., okButtonText: Any | None = ..., default: str = ..., wide: bool = ...): ...
    def runCompareDialog(self, c): ...
    def runOpenFileDialog(self, c, title, filetypes, defaultextension, multiple: bool = ..., startpath: Any | None = ...): ...
    def runSaveFileDialog(self, c, initialfile, title, filetypes, defaultextension): ...
    def runAskYesNoDialog(self, c, title, message: Any | None = ..., yes_all: bool = ..., no_all: bool = ...): ...
    def runAskYesNoCancelDialog(self, c, title, message: Any | None = ..., yesMessage: str = ..., noMessage: str = ..., yesToAllMessage: Any | None = ..., defaultButton: str = ..., cancelMessage: Any | None = ...): ...
    def simulateDialog(self, key, defaultVal): ...
    def get_focus(self, *args, **kwargs): ...
    def getTextFromClipboard(self): ...
    def replaceClipboardWith(self, s) -> None: ...
    def set_focus(self, commander, widget) -> None: ...
    def alert(self, c, message) -> None: ...
    def attachLeoIcon(self, window) -> None: ...
    def destroySelf(self) -> None: ...
    def finishCreate(self) -> None: ...
    def getFontFromParams(self, family, size, slant, weight, defaultSize: int = ...): ...
    def getIconImage(self, name) -> None: ...
    def getImageImage(self, name) -> None: ...
    def getTreeImage(self, c, path) -> None: ...
    def get_window_info(self, window): ...
    def onActivateEvent(self, *args, **keys) -> None: ...
    def onDeactivateEvent(self, *args, **keys) -> None: ...
    def set_top_geometry(self, w, h, x, y) -> None: ...
    def isTextWidget(self, w): ...
    def isTextWrapper(self, w): ...
    def oops(self) -> None: ...
    def createComparePanel(self, c) -> None: ...
    def createFindTab(self, c, parentFrame) -> None: ...
    def createLeoFrame(self, c, title): ...
    def runMainLoop(self) -> None: ...

class NullScriptingControllerClass:
    c: Any
    iconBar: Any
    def __init__(self, c, iconBar: Any | None = ...) -> None: ...
    def createAllButtons(self) -> None: ...

class StringCheckBox:
    label: Any
    name: Any
    value: bool
    def __init__(self, name, label: Any | None = ...) -> None: ...
    def checkState(self): ...
    isChecked: Any
    def objectName(self): ...
    def setCheckState(self, value) -> None: ...
    def toggle(self) -> None: ...

class StringFindTabManager:
    c: Any
    entry_focus: Any
    find_findbox: Any
    find_replacebox: Any
    check_box_ignore_case: Any
    check_box_mark_changes: Any
    check_box_mark_finds: Any
    check_box_regexp: Any
    check_box_search_body: Any
    check_box_search_headline: Any
    check_box_whole_word: Any
    radio_button_entire_outline: Any
    radio_button_node_only: Any
    radio_button_suboutline_only: Any
    def __init__(self, c) -> None: ...
    def clear_focus(self) -> None: ...
    def init_focus(self) -> None: ...
    def set_entry_focus(self) -> None: ...
    def get_settings(self): ...
    def init_widgets(self) -> None: ...
    def set_body_and_headline_checkbox(self) -> None: ...
    def set_radio_button(self, name) -> None: ...
    def get_find_text(self): ...
    def get_change_text(self): ...
    def set_find_text(self, s) -> None: ...
    def set_change_text(self, s) -> None: ...
    def toggle_checkbox(self, checkbox_name) -> None: ...

class StringGui(LeoGui):
    def oops(self) -> None: ...
    def runMainLoop(self) -> None: ...

class StringLineEdit:
    disabled: Any
    name: Any
    pos: int
    s: str
    def __init__(self, name, disabled: bool = ...) -> None: ...
    def clear(self) -> None: ...
    def insert(self, s) -> None: ...
    def objectName(self): ...
    def text(self): ...

class StringRadioButton:
    label: Any
    name: Any
    value: bool
    def __init__(self, name, label: Any | None = ...) -> None: ...
    def isChecked(self): ...
    def objectName(self): ...
    def toggle(self) -> None: ...

class UnitTestGui(NullGui):
    oldGui: Any
    theDict: Any
    def __init__(self, theDict: Any | None = ...) -> None: ...
    def destroySelf(self) -> None: ...
    def createSpellTab(self, c, spellHandler, tabName) -> None: ...
    def runAtIdle(self, aFunc) -> None: ...
