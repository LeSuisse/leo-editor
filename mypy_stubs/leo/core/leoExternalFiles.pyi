import unittest
from leo.core import leoTest2 as leoTest2
from typing import Any

class ExternalFile:
    c: Any
    ext: Any
    p: Any
    path: Any
    time: Any
    def __init__(self, c, ext, p, path, time) -> None: ...
    def shortFileName(self): ...
    def exists(self): ...

class ExternalFilesController:
    checksum_d: Any
    enabled_d: Any
    files: Any
    has_changed_d: Any
    unchecked_commanders: Any
    unchecked_files: Any
    yesno_all_answer: Any
    def __init__(self, c: Any | None = ...) -> None: ...
    def check_overwrite(self, c, path): ...
    def destroy_frame(self, frame) -> None: ...
    def find_path_for_node(self, p): ...
    on_idle_count: int
    def on_idle(self) -> None: ...
    def idle_check_commander(self, c) -> None: ...
    def idle_check_leo_file(self, c) -> None: ...
    def idle_check_open_with_file(self, c, ef) -> None: ...
    def update_open_with_node(self, ef) -> None: ...
    def open_with(self, c, d) -> None: ...
    def compute_ext(self, c, p, ext): ...
    def compute_temp_file_path(self, c, p, ext): ...
    def clean_file_name(self, c, ext, p): ...
    def legacy_file_name(self, c, ext, p): ...
    def create_temp_file(self, c, ext, p): ...
    def open_file_in_external_editor(self, c, d, fn, testing: bool = ...): ...
    def remove_temp_file(self, p, path) -> None: ...
    def shut_down(self) -> None: ...
    def ask(self, c, path, p: Any | None = ...): ...
    def checksum(self, path): ...
    def destroy_temp_file(self, ef) -> None: ...
    def get_mtime(self, path): ...
    def get_time(self, path): ...
    def has_changed(self, path): ...
    def is_enabled(self, c): ...
    def join(self, s1, s2): ...
    def set_time(self, path, new_time: Any | None = ...) -> None: ...
    def warn(self, c, path, p) -> None: ...

class TestExternalFiles(unittest.TestCase):
    c: Any
    def setUp(self) -> None: ...
    def tearDown(self) -> None: ...
    def test_on_idle(self) -> None: ...
