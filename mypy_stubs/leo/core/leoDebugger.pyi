import pdb
import threading
from typing import Any

class Xdb(pdb.Pdb, threading.Thread):
    class QueueStdin:
        qc: Any
        def __init__(self, qc) -> None: ...
        def readline(self): ...
    class QueueStdout:
        qr: Any
        def __init__(self, qr) -> None: ...
        def flush(self) -> None: ...
        def write(self, s) -> None: ...
    qc: Any
    qr: Any
    timer: Any
    daemon: bool
    path: Any
    prompt: str
    saved_frame: Any
    saved_traceback: Any
    def __init__(self, path: Any | None = ...) -> None: ...
    def checkline(self, path, n): ...
    def cmdloop(self, intro: Any | None = ...) -> None: ...
    def do_clear(self, arg: Any | None = ...) -> None: ...
    do_cl: Any
    def do_quit(self, arg: Any | None = ...): ...
    do_q: Any
    do_exit: Any
    def interaction(self, frame, traceback) -> None: ...
    def set_continue(self) -> None: ...
    def has_breakpoint(self, filename, lineno): ...
    def has_breakpoints(self): ...
    def run(self) -> None: ...
    quitting: bool
    def run_path(self, path) -> None: ...
    def select_line(self, frame, traceback) -> None: ...
    def write(self, s) -> None: ...

def get_gnx_from_file(file_s, p, path): ...
def listener(timer) -> None: ...
def make_at_file_node(line, path): ...
def show_line(line, fn) -> None: ...
def xdb_again(event) -> None: ...
def xdb_breakpoint(event) -> None: ...
def xdb_c(event) -> None: ...
def xdb_h(event) -> None: ...
def xdb_l(event) -> None: ...
def xdb_n(event) -> None: ...
def xdb_q(event) -> None: ...
def xdb_r(event) -> None: ...
def xdb_s(event) -> None: ...
def xdb_w(event) -> None: ...
def xdb_input(event) -> None: ...
def xdb_status(event) -> None: ...
def db_command(event, command) -> None: ...
def xdb_command(event) -> None: ...
