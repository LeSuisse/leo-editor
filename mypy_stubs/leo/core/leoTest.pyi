import unittest
from leo.core import leoGui as leoGui
from typing import Any

lastObjectCount: int

def runGC() -> None: ...
def set_debugGc() -> None: ...
def printGc(): ...
def printGcRefs(verbose: bool = ...) -> None: ...

class EditBodyTestCase(unittest.TestCase):
    c: Any
    failFlag: bool
    parent: Any
    before: Any
    after: Any
    sel: Any
    ins: Any
    tempNode: Any
    def __init__(self, c, parent, before, after, sel, ins, tempNode) -> None: ...
    def fail(self, msg: Any | None = ...) -> None: ...
    def editBody(self) -> None: ...
    def runTest(self) -> None: ...
    def setUp(self) -> None: ...
    def shortDescription(self): ...
    def tearDown(self) -> None: ...

class GeneralTestCase(unittest.TestCase):
    c: Any
    p: Any
    setup_script: Any
    def __init__(self, c, p, setup_script: Any | None = ...) -> None: ...
    def fail(self, msg: Any | None = ...) -> None: ...
    def tearDown(self) -> None: ...
    def setUp(self) -> None: ...
    def runTest(self, define_g: bool = ...) -> None: ...
    def shortDescription(self): ...

class ImportExportTestCase(unittest.TestCase):
    def fail(self, msg: Any | None = ...) -> None: ...
    c: Any
    dialog: Any
    p: Any
    temp_p: Any
    gui: Any
    oldGui: Any
    wasChanged: Any
    fileName: str
    doImport: Any
    old_p: Any
    def __init__(self, c, p, dialog, temp_p, doImport) -> None: ...
    def importExport(self) -> None: ...
    def runTest(self) -> None: ...
    def setUp(self) -> None: ...
    def shortDescription(self): ...
    def tearDown(self) -> None: ...

class LinterTable:
    loadDir: Any
    def __init__(self) -> None: ...
    def commands(self): ...
    def core(self): ...
    def external(self): ...
    def gui_plugins(self): ...
    def modes(self): ...
    def ignores(self): ...
    def plugins(self): ...
    def get_files(self, pattern): ...
    def get_files_for_scope(self, scope, fn): ...

class RunTestExternallyHelperClass:
    c: Any
    all: Any
    copyRoot: Any
    fileName: str
    marked: Any
    root: Any
    tags: Any
    def __init__(self, c, all, marked) -> None: ...
    def runTests(self) -> None: ...
    def createFileFromOutline(self, c2) -> None: ...
    def createOutline(self, c2): ...
    def addNode(self, p, last): ...
    def runUnitTestLeoFile(self, gui: str = ..., path: str = ..., loadPlugins: bool = ..., readSettings: bool = ..., silent: bool = ..., tracePlugins: bool = ..., verbose: bool = ...) -> None: ...

class TestManager:
    c: Any
    def __init__(self, c) -> None: ...
    def generalTestCase(self, p): ...
    def doTests(self, all: Any | None = ..., marked: Any | None = ..., verbosity: int = ...) -> None: ...
    class LoggingStream:
        aList: Any
        logger: Any
        def __init__(self, logger) -> None: ...
        def write(self, s) -> None: ...
        def flush(self) -> None: ...
    def create_logging_stream(self): ...
    def do_tests_helper(self, all, marked, verbosity) -> None: ...
    def get_suite_script(self): ...
    def get_test_class_script(self): ...
    def instantiate_gui(self): ...
    def make_test_suite(self, all, marked): ...
    def makeTestCase(self, p, setup_script): ...
    def makeTestClass(self, p): ...
    def makeTestSuite(self, p, setup_script): ...
    def runTestsExternally(self, all, marked) -> None: ...
    def runProfileOnNode(self, p, outputPath: Any | None = ...) -> None: ...
    def runTimerOnNode(self, p, count) -> None: ...
    def createUnitTestsFromDoctests(self, modules, verbose: bool = ...): ...
    def makeEditBodySuite(self, p): ...
    def makeImportExportSuite(self, parentHeadline, doImport): ...
    def runAtFileTest(self, p) -> None: ...
    def runEditCommandTest(self, p) -> None: ...
    def runLeoTest(self, path) -> None: ...
    def runRootFileTangleTest(self, p) -> None: ...
    def runRootFileUntangleTest(self, p) -> None: ...
    def runVimTest(self, p) -> None: ...
    def checkFileSyntax(self, fileName, s, reraise: bool = ..., suppress: bool = ...): ...
    def checkFileTabs(self, fileName, s) -> None: ...
    def compareIgnoringNodeNames(self, s1, s2, delims, verbose: bool = ...): ...
    def compareOutlines(self, root1, root2, compareHeadlines: bool = ..., tag: str = ..., report: bool = ...): ...
    def fail(self) -> None: ...
    def findAllAtFileNodes(self): ...
    def findAllUnitTestNodes(self, all, marked): ...
    def findMarkForUnitTestNodes(self): ...
    def findChildrenOf(self, root): ...
    def findNodeAnywhere(self, headline, breakOnError: bool = ...): ...
    def findRootNode(self, p): ...
    def findNodeInTree(self, p, headline, startswith: bool = ...): ...
    def findSubnodesOf(self, root): ...
    def getAllPluginFilenames(self): ...
    def importAllModulesInPath(self, path, exclude: Any | None = ...): ...
    def importAllModulesInPathList(self, paths): ...
    def isSuiteNode(self, p): ...
    def isTestClassNode(self, p): ...
    def isTestNode(self, p): ...
    def isTestSetupNode(self, p): ...
    def numberOfClonesInOutline(self): ...
    def numberOfNodesInOutline(self): ...
    def safeImportModule(self, fileName): ...
    def showTwoBodies(self, t, b1, b2) -> None: ...
    def throwAssertionError(self) -> None: ...
