import unittest
from leo.core import leoTest2 as leoTest2
from typing import Any

def cmd(name): ...

class LeoFind:
    c: Any
    expert_mode: bool
    ftm: Any
    frame: Any
    k: Any
    re_obj: Any
    work_s: str
    work_sel: Any
    ignore_case: Any
    node_only: Any
    pattern_match: Any
    search_headline: Any
    search_body: Any
    suboutline_only: Any
    mark_changes: Any
    mark_finds: Any
    whole_word: Any
    stack: Any
    isearch_ignore_case: Any
    isearch_forward_flag: Any
    isearch_regexp: Any
    findTextList: Any
    changeTextList: Any
    find_text: str
    change_text: str
    escape_handler: Any
    handler: Any
    request_reverse: bool
    request_pattern_match: bool
    request_whole_word: bool
    changeAllFlag: bool
    findAllUniqueFlag: bool
    find_def_data: Any
    in_headline: bool
    match_obj: Any
    reverse: bool
    root: Any
    unique_matches: Any
    minibuffer_mode: Any
    def __init__(self, c) -> None: ...
    def default_settings(self): ...
    def finishCreate(self) -> None: ...
    def init_ivars_from_settings(self, settings) -> None: ...
    def init_settings(self, settings) -> None: ...
    def reload_settings(self) -> None: ...
    def batch_change(self, root, replacements, settings: Any | None = ...): ...
    def change_then_find(self, event: Any | None = ...) -> None: ...
    def do_change_then_find(self, settings): ...
    def cloneFindAllMarked(self, event: Any | None = ...) -> None: ...
    def cloneFindAllFlattenedMarked(self, event: Any | None = ...) -> None: ...
    def do_find_marked(self, flatten): ...
    def cloneFindParents(self, event: Any | None = ...): ...
    def find_def(self, event: Any | None = ..., strict: bool = ...) -> None: ...
    def find_def_strict(self, event: Any | None = ...) -> None: ...
    def do_find_def(self, settings, word, strict): ...
    def find_next(self, event: Any | None = ...) -> None: ...
    def find_prev(self, event: Any | None = ...) -> None: ...
    def do_find_prev(self, settings): ...
    def do_find_next(self, settings): ...
    def hide_find_tab(self, event: Any | None = ...) -> None: ...
    def open_find_tab(self, event: Any | None = ..., show: bool = ...) -> None: ...
    find_pattern: Any
    def find_var(self, event: Any | None = ...) -> None: ...
    def do_find_var(self, settings, word): ...
    def focus_to_find(self, event: Any | None = ...) -> None: ...
    def change(self, event: Any | None = ...) -> None: ...
    replace: Any
    def set_find_scope_every_where(self, event: Any | None = ...): ...
    def set_find_scope_node_only(self, event: Any | None = ...): ...
    def set_find_scope_suboutline_only(self, event: Any | None = ...): ...
    def set_find_scope(self, where) -> None: ...
    def show_find_options(self, event: Any | None = ...) -> None: ...
    def compute_find_options(self): ...
    def toggle_find_collapes_nodes(self, event) -> None: ...
    def toggle_ignore_case_option(self, event): ...
    def toggle_mark_changes_option(self, event): ...
    def toggle_mark_finds_option(self, event): ...
    def toggle_regex_option(self, event): ...
    def toggle_search_body_option(self, event): ...
    def toggle_search_headline_option(self, event): ...
    def toggle_whole_word_option(self, event): ...
    def toggle_option(self, checkbox_name) -> None: ...
    def interactive_change_all(self, event: Any | None = ...) -> None: ...
    def interactive_replace_all1(self, event) -> None: ...
    def interactive_replace_all2(self, event) -> None: ...
    def do_change_all(self, settings): ...
    def replace_all_helper(self, s): ...
    def batch_plain_replace(self, s): ...
    def batch_regex_replace(self, s): ...
    def batch_word_replace(self, s): ...
    def interactive_clone_find_all(self, event: Any | None = ..., preloaded: Any | None = ...) -> None: ...
    def interactive_clone_find_all1(self, event): ...
    def do_clone_find_all(self, settings): ...
    def interactive_cff(self, event: Any | None = ..., preloaded: Any | None = ...) -> None: ...
    def interactive_cff1(self, event): ...
    def do_clone_find_all_flattened(self, settings): ...
    def interactive_clone_find_tag(self, event: Any | None = ...) -> None: ...
    def interactive_clone_find_tag1(self, event) -> None: ...
    def do_clone_find_tag(self, tag): ...
    def interactive_find_all(self, event: Any | None = ...) -> None: ...
    def interactive_find_all1(self, event: Any | None = ...) -> None: ...
    def find_all_escape_handler(self, event) -> None: ...
    def find_all_escape_handler2(self, event) -> None: ...
    def do_find_all(self, settings): ...
    def interactive_find_all_unique_regex(self, event: Any | None = ...) -> None: ...
    def interactive_find_all_unique_regex1(self, event: Any | None = ...): ...
    def interactive_change_all_unique_regex1(self, event) -> None: ...
    def interactive_change_all_unique_regex2(self, event) -> None: ...
    def interactive_re_search_forward(self, event) -> None: ...
    def interactive_re_search_backward(self, event) -> None: ...
    def interactive_search_backward(self, event) -> None: ...
    def start_search(self, event) -> None: ...
    startSearch: Any
    def start_search1(self, event: Any | None = ...) -> None: ...
    def start_search_escape1(self, event: Any | None = ...) -> None: ...
    def interactive_tag_children(self, event: Any | None = ...) -> None: ...
    def interactive_tag_children1(self, event) -> None: ...
    def do_tag_children(self, p, tag) -> None: ...
    request_whole_world: bool
    def word_search_forward(self, event) -> None: ...
    whole_world: bool
    def word_search_backward(self, event) -> None: ...
    def change_selection(self, p): ...
    def check_args(self, tag): ...
    def compile_pattern(self): ...
    def find_next_match(self, p): ...
    def inner_search_helper(self, s, i, j, pattern): ...
    def make_regex_subs(self, change_text, groups): ...
    def precompile_pattern(self): ...
    def replace_back_slashes(self, s): ...
    def init_in_headline(self) -> None: ...
    def focus_in_tree(self): ...
    def restore(self, data) -> None: ...
    def save(self): ...
    def show_success(self, p, pos, newpos, showState: bool = ...): ...
    def isearch_forward(self, event) -> None: ...
    def isearch_backward(self, event) -> None: ...
    def isearch_forward_regexp(self, event) -> None: ...
    def isearch_backward_regexp(self, event) -> None: ...
    def isearch_with_present_options(self, event) -> None: ...
    def abort_search(self) -> None: ...
    def end_search(self) -> None: ...
    def iSearch_helper(self, again: bool = ...) -> None: ...
    def isearch_state_handler(self, event) -> None: ...
    def isearch_backspace(self) -> None: ...
    def get_strokes(self, commandName): ...
    def push(self, p, i, j, in_headline) -> None: ...
    def pop(self): ...
    def set_widget(self): ...
    event: Any
    p1: Any
    sel1: Any
    inverseBindingDict: Any
    iSearchStrokes: Any
    def start_incremental(self, event, commandName, forward, ignoreCase, regexp) -> None: ...
    def add_change_string_to_label(self) -> None: ...
    def add_find_string_to_label(self, protect: bool = ...) -> None: ...
    def compute_result_status(self, find_all_flag: bool = ...): ...
    def help_for_find_commands(self, event: Any | None = ...) -> None: ...
    def init_vim_search(self, pattern) -> None: ...
    def preload_find_pattern(self, w) -> None: ...
    def show_status(self, found) -> None: ...
    def show_find_options_in_status_area(self) -> None: ...
    def compute_find_options_in_status_area(self): ...
    def start_state_machine(self, event, prefix, handler, escape_handler: Any | None = ...) -> None: ...
    def state0(self, event) -> None: ...
    def update_change_list(self, s) -> None: ...
    def update_find_list(self, s) -> None: ...

class TestFind(unittest.TestCase):
    def dump_tree(self, tag: str = ...) -> None: ...
    def make_test_tree(self): ...
    c: Any
    settings: Any
    def setUp(self) -> None: ...
    def tearDown(self) -> None: ...
    def test_change_all(self) -> None: ...
    def test_change_all_with_at_file_node(self) -> None: ...
    def test_change_all_headline(self) -> None: ...
    def test_clone_find_all(self) -> None: ...
    def test_clone_find_all_flattened(self) -> None: ...
    def test_clone_find_marked(self) -> None: ...
    def test_clone_find_parents(self) -> None: ...
    clones: Any
    def test_clone_find_tag(self): ...
    def test_find_all(self) -> None: ...
    def test_find_def(self) -> None: ...
    def test_find_next(self) -> None: ...
    def test_find_next_suboutline_only(self) -> None: ...
    def test_find_prev(self) -> None: ...
    def test_find_var(self) -> None: ...
    def test_replace_then_find(self) -> None: ...
    def test_replace_then_find_regex(self) -> None: ...
    def test_replace_then_find_in_headline(self) -> None: ...
    def test_tag_children(self) -> None: ...
    def test_batch_change_regex(self) -> None: ...
    def test_batch_change_word(self) -> None: ...
    def test_tree(self) -> None: ...
    def test_cfa_find_next_match(self) -> None: ...
    def test_cfa_backwards_search(self) -> None: ...
    def test_cfa_match_word(self) -> None: ...
    def test_cfa_plain_search(self) -> None: ...
    def test_cfa_regex_search(self) -> None: ...
    def test_switch_style(self) -> None: ...
    def test_batch_plain_replace(self) -> None: ...
    def test_batch_regex_replace(self) -> None: ...
    def test_batch_word_replace(self) -> None: ...
    def test_check_args(self) -> None: ...
    def test_compute_result_status(self) -> None: ...
    def test_make_regex_subs(self) -> None: ...
    def test_fnm_next_after_fail(self) -> None: ...
    def test_replace_all_helper(self) -> None: ...
    def test_replace_back_slashes(self) -> None: ...
    def test_argument_errors(self) -> None: ...
