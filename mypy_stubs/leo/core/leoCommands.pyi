from leo.core import leoNodes as leoNodes
from typing import Any, List

def cmd(name): ...

class Commands:
    frame: Any
    parentFrame: Any
    gui: Any
    ipythonController: Any
    def __init__(self, fileName, gui: Any | None = ..., parentFrame: Any | None = ..., previousSettings: Any | None = ..., relativeFileName: Any | None = ...) -> None: ...
    def computeWindowTitle(self, fileName): ...
    commandsDict: Any
    disableCommandsMessage: str
    hookFunction: Any
    ignoreChangedPaths: bool
    inCommand: bool
    outlineToNowebDefaultFileName: str
    tangle_errors: int
    use_header_flag: bool
    output_doc_flag: bool
    hoistStack: Any
    navPrefix: str
    navTime: Any
    sqlite_connection: Any
    def initCommandIvars(self) -> None: ...
    command_count: int
    scanAtPathDirectivesCount: int
    trace_focus_count: int
    def initDebugIvars(self) -> None: ...
    expansionLevel: int
    expansionNode: Any
    nodeConflictList: Any
    nodeConflictFileName: Any
    user_dict: Any
    def initDocumentIvars(self) -> None: ...
    configInited: bool
    doubleClickFlag: bool
    exists: bool
    in_qt_dialog: bool
    loading: bool
    promptingForClose: bool
    suppressHeadChanged: bool
    enableRedrawFlag: bool
    requestCloseWindow: bool
    requestedFocusWidget: Any
    requestLaterRedraw: bool
    def initEventIvars(self) -> None: ...
    changed: bool
    ignored_at_file_nodes: Any
    import_error_nodes: Any
    last_dir: Any
    mFileName: Any
    mRelativeFileName: Any
    openDirectory: Any
    orphan_at_file_nodes: Any
    wrappedFileName: Any
    def initFileIvars(self, fileName, relativeFileName) -> None: ...
    fixed: bool
    fixedWindowPosition: Any
    forceExecuteEntireBody: bool
    focus_border_color: str
    focus_border_width: int
    outlineHasInitialFocus: bool
    page_width: int
    sparse_find: bool
    sparse_move: bool
    sparse_spell: bool
    stayInTreeAfterSelect: bool
    tab_width: int
    tangle_batch_flag: bool
    target_language: str
    untangle_batch_flag: bool
    vim_mode: bool
    def initOptionsIvars(self) -> None: ...
    abbrevCommands: Any
    editCommands: Any
    db: Any
    bufferCommands: Any
    chapterCommands: Any
    controlCommands: Any
    convertCommands: Any
    debugCommands: Any
    editFileCommands: Any
    evalController: Any
    gotoCommands: Any
    helpCommands: Any
    keyHandler: Any
    keyHandlerCommands: Any
    killBufferCommands: Any
    leoCommands: Any
    macroCommands: Any
    miniBufferWidget: Any
    printingController: Any
    queryReplaceCommands: Any
    rectangleCommands: Any
    searchCommands: Any
    spellCommands: Any
    leoTestManager: Any
    vimCommands: Any
    def initObjectIvars(self) -> None: ...
    gnxDict: Any
    hiddenRootNode: Any
    nodeHistory: Any
    chapterController: Any
    shadowController: Any
    fileCommands: Any
    findCommands: Any
    atFileCommands: Any
    importCommands: Any
    markupCommands: Any
    persistenceController: Any
    rstCommands: Any
    testManager: Any
    undoer: Any
    subCommanders: Any
    free_layout: Any
    styleSheetManager: Any
    def initObjects(self, gui) -> None: ...
    def initSettings(self, previousSettings) -> None: ...
    def finishCreate(self) -> None: ...
    def createCommandNames(self) -> None: ...
    def printCommandsDict(self) -> None: ...
    def hash(self): ...
    idle_focus_count: int
    def idle_focus_helper(self, tag, keys) -> None: ...
    def is_unusual_focus(self, w): ...
    last_unusual_focus: Any
    def trace_idle_focus(self, w) -> None: ...
    def initAfterLoad(self) -> None: ...
    def initConfigSettings(self) -> None: ...
    def setWindowPosition(self) -> None: ...
    def execute_general_script_command(self, event: Any | None = ...): ...
    def execute_pytest(self, event: Any | None = ...) -> None: ...
    def execute_single_pytest(self, p) -> None: ...
    def executeScript(self, event: Any | None = ..., args: Any | None = ..., p: Any | None = ..., script: Any | None = ..., useSelectedText: bool = ..., define_g: bool = ..., define_name: str = ..., silent: bool = ..., namespace: Any | None = ..., raiseFlag: bool = ..., runPyflakes: bool = ...) -> None: ...
    def executeScriptHelper(self, args, define_g, define_name, namespace, script) -> None: ...
    def redirectScriptOutput(self) -> None: ...
    def setCurrentDirectoryFromContext(self, p) -> None: ...
    def unredirectScriptOutput(self) -> None: ...
    def recolorCommand(self, event: Any | None = ...) -> None: ...
    def all_nodes(self) -> None: ...
    def all_unique_nodes(self) -> None: ...
    all_tnodes_iter: Any
    all_vnodes_iter: Any
    all_unique_tnodes_iter: Any
    all_unique_vnodes_iter: Any
    def all_positions(self, copy: bool = ...) -> None: ...
    all_positions_iter: Any
    allNodes_iter: Any
    def all_positions_for_v(self, v, stack: Any | None = ...): ...
    def all_roots(self, copy: bool = ..., predicate: Any | None = ...): ...
    def all_unique_positions(self, copy: bool = ...) -> None: ...
    all_positions_with_unique_tnodes_iter: Any
    all_positions_with_unique_vnodes_iter: Any
    def all_unique_roots(self, copy: bool = ..., predicate: Any | None = ...): ...
    def safe_all_positions(self, copy: bool = ...) -> None: ...
    def currentPosition(self): ...
    currentVnode: Any
    def dump_expanded(self, event) -> None: ...
    def edit_widget(self, p): ...
    def fileName(self): ...
    def relativeFileName(self): ...
    def shortFileName(self): ...
    shortFilename: Any
    def firstVisible(self): ...
    def getBodyLines(self): ...
    def getTabWidth(self, p): ...
    def currentPositionIsRootPosition(self): ...
    def currentPositionHasNext(self): ...
    def isCurrentPosition(self, p): ...
    def isRootPosition(self, p): ...
    def isChanged(self): ...
    def lastTopLevel(self): ...
    def lastVisible(self): ...
    def nullPosition(self) -> None: ...
    def positionExists(self, p, root: Any | None = ..., trace: bool = ...): ...
    def dumpPosition(self, p) -> None: ...
    def rootPosition(self): ...
    rootVnode: Any
    findRootPosition: Any
    def shouldBeExpanded(self, p): ...
    def visLimit(self): ...
    def vnode2allPositions(self, v): ...
    def vnode2position(self, v): ...
    p: Any
    def appendStringToBody(self, p, s) -> None: ...
    def clearAllMarked(self) -> None: ...
    def clearAllVisited(self) -> None: ...
    def clearChanged(self) -> None: ...
    def clearMarked(self, p) -> None: ...
    def setBodyString(self, p, s) -> None: ...
    def setChanged(self, redrawFlag: bool = ...) -> None: ...
    def setCurrentPosition(self, p) -> None: ...
    setCurrentVnode: Any
    def setHeadString(self, p, s) -> None: ...
    def setLog(self) -> None: ...
    def setMarked(self, p) -> None: ...
    def setRootPosition(self, unused_p: Any | None = ...) -> None: ...
    def setRootVnode(self, v) -> None: ...
    def topPosition(self): ...
    def setTopPosition(self, p) -> None: ...
    topVnode: Any
    setTopVnode: Any
    def checkGnxs(self): ...
    def checkLinks(self): ...
    def checkParentAndChildren(self, p): ...
    def checkSiblings(self, p): ...
    def checkThreadLinks(self, p): ...
    def checkMoveWithParentWithWarning(self, root, parent, warningFlag): ...
    def checkDrag(self, root, target): ...
    def checkOutline(self, event: Any | None = ..., check_links: bool = ...): ...
    def validateOutline(self, event: Any | None = ...): ...
    def checkAllPythonCode(self, event: Any | None = ..., unittestFlag: bool = ..., ignoreAtIgnore: bool = ...): ...
    def checkPythonCode(self, event: Any | None = ..., unittestFlag: bool = ..., ignoreAtIgnore: bool = ..., suppressErrors: bool = ..., checkOnSave: bool = ...): ...
    def checkPythonNode(self, p, unittestFlag: bool = ..., suppressErrors: bool = ...) -> None: ...
    def tabNannyNode(self, p, headline, body, unittestFlag: bool = ..., suppressErrors: bool = ...) -> None: ...
    def getTime(self, body: bool = ...): ...
    def goToLineNumber(self, n) -> None: ...
    def goToScriptLineNumber(self, n, p) -> None: ...
    def setFileTimeStamp(self, fn) -> None: ...
    def updateSyntaxColorer(self, v) -> None: ...
    def interactive(self, callback, event, prompts) -> None: ...
    def interactive1(self, callback, event, prompts) -> None: ...
    def interactive2(self, callback, event, prompts) -> None: ...
    def interactive3(self, callback, event, prompts) -> None: ...
    def getLanguageAtCursor(self, p, language): ...
    def getNodePath(self, p): ...
    def getNodeFileName(self, p): ...
    def hasAmbiguousLanguage(self, p): ...
    deprecated_messages: List[str]
    def os_path_finalize(self, path, **keys): ...
    def os_path_finalize_join(self, *args, **keys): ...
    def scanAllDirectives(self, p): ...
    def scanAtPathDirectives(self, aList): ...
    def check_event(self, event) -> None: ...
    command_function: Any
    command_name: Any
    def doCommand(self, command_func, command_name, event): ...
    def doCommandByName(self, command_name, event): ...
    def executeMinibufferCommand(self, commandName): ...
    def general_script_helper(self, command, ext, language, root, directory: Any | None = ..., regex: Any | None = ...): ...
    def insertCharFromEvent(self, event) -> None: ...
    def setComplexCommand(self, commandName) -> None: ...
    def universalCallback(self, source_c, function): ...
    universallCallback: Any
    def writeScriptFile(self, script): ...
    def expand_path_expression(self, s): ...
    replace_errors: List[str]
    def replace_path_expression(self, expr): ...
    def archivedPositionToPosition(self, s): ...
    def backup(self, fileName: Any | None = ..., prefix: Any | None = ..., silent: bool = ..., useTimeStamp: bool = ...): ...
    def backup_helper(self, base_dir: Any | None = ..., env_key: str = ..., sub_dir: Any | None = ..., use_git_prefix: bool = ...) -> None: ...
    def checkFileTimeStamp(self, fn): ...
    def createNodeFromExternalFile(self, fn) -> None: ...
    def looksLikeDerivedFile(self, fn): ...
    def markAllAtFileNodesDirty(self, event: Any | None = ...) -> None: ...
    def markAtFileNodesDirty(self, event: Any | None = ...) -> None: ...
    def openWith(self, event: Any | None = ..., d: Any | None = ...) -> None: ...
    def recreateGnxDict(self) -> None: ...
    def diff_file(self, fn, rev1: str = ..., rev2: str = ..., directory: Any | None = ...) -> None: ...
    def diff_two_revs(self, directory: Any | None = ..., rev1: str = ..., rev2: str = ...) -> None: ...
    def diff_two_branches(self, branch1, branch2, fn, directory: Any | None = ...) -> None: ...
    def git_diff(self, rev1: str = ..., rev2: str = ..., directory: Any | None = ...) -> None: ...
    def alert(self, message) -> None: ...
    def init_error_dialogs(self) -> None: ...
    def notValidInBatchMode(self, commandName) -> None: ...
    def putHelpFor(self, s, short_title: str = ...) -> None: ...
    def raise_error_dialogs(self, kind: str = ...) -> None: ...
    def syntaxErrorDialog(self) -> None: ...
    def dragToNthChildOf(self, p, parent, n) -> None: ...
    def dragAfter(self, p, after) -> None: ...
    def dragCloneToNthChildOf(self, p, parent, n) -> None: ...
    def dragCloneAfter(self, p, after) -> None: ...
    def beginUpdate(self) -> None: ...
    def endUpdate(self, flag: bool = ...) -> None: ...
    BeginUpdate: Any
    EndUpdate: Any
    def bringToFront(self, c2: Any | None = ..., set_focus: bool = ...) -> None: ...
    BringToFront: Any
    def expandAllAncestors(self, p): ...
    def outerUpdate(self) -> None: ...
    def recolor(self, **kwargs) -> None: ...
    recolor_now: Any
    def disable_redraw(self) -> None: ...
    def enable_redraw(self) -> None: ...
    def redraw_command(self, event) -> None: ...
    def redraw(self, p: Any | None = ...) -> None: ...
    force_redraw: Any
    redraw_now: Any
    def redraw_after_icons_changed(self) -> None: ...
    def redraw_after_contract(self, p: Any | None = ...) -> None: ...
    def redraw_after_expand(self, p) -> None: ...
    def redraw_after_head_changed(self) -> None: ...
    def redraw_after_select(self, p) -> None: ...
    def redraw_later(self) -> None: ...
    def widget_name(self, widget): ...
    def onCanvasKey(self, event) -> None: ...
    def navQuickKey(self): ...
    def navHelper(self, p, ch, extend): ...
    def contractAllHeadlines(self, event: Any | None = ..., redrawFlag: bool = ...) -> None: ...
    def contractSubtree(self, p) -> None: ...
    def expandSubtree(self, v, redraw: bool = ...) -> None: ...
    def expandToLevel(self, level) -> None: ...
    def get_focus(self): ...
    def get_requested_focus(self): ...
    def request_focus(self, w) -> None: ...
    def set_focus(self, w, force: bool = ...) -> None: ...
    def invalidateFocus(self) -> None: ...
    def traceFocus(self, w) -> None: ...
    def treeFocusHelper(self) -> None: ...
    def initialFocusHelper(self) -> None: ...
    def bodyWantsFocus(self) -> None: ...
    def logWantsFocus(self) -> None: ...
    def minibufferWantsFocus(self) -> None: ...
    def treeWantsFocus(self) -> None: ...
    def widgetWantsFocus(self, w) -> None: ...
    def widgetWantsFocusNow(self, w) -> None: ...
    def bodyWantsFocusNow(self) -> None: ...
    def logWantsFocusNow(self) -> None: ...
    def minibufferWantsFocusNow(self) -> None: ...
    def treeWantsFocusNow(self) -> None: ...
    def add_command(self, menu, **keys): ...
    def canClone(self): ...
    def canContractAllHeadlines(self): ...
    def canContractAllSubheads(self): ...
    def canContractParent(self): ...
    def canContractSubheads(self): ...
    def canDeleteHeadline(self): ...
    canCutOutline: Any
    def canDemote(self): ...
    def canExpandAllHeadlines(self): ...
    def canExpandAllSubheads(self): ...
    def canExpandSubheads(self): ...
    def canExtract(self): ...
    canExtractSectionNames: Any
    def canExtractSection(self): ...
    def canFindMatchingBracket(self): ...
    def canDehoist(self): ...
    def canHoist(self): ...
    def canMoveOutlineDown(self): ...
    def canMoveOutlineLeft(self): ...
    def canMoveOutlineRight(self): ...
    def canMoveOutlineUp(self): ...
    def canPasteOutline(self, s: Any | None = ...): ...
    def canPromote(self): ...
    def canSelectThreadBack(self): ...
    def canSelectThreadNext(self): ...
    def canSelectVisBack(self): ...
    def canSelectVisNext(self): ...
    def canShiftBodyLeft(self): ...
    canShiftBodyRight: Any
    def canSortChildren(self): ...
    def canSortSiblings(self): ...
    def canUndo(self): ...
    def canRedo(self): ...
    def canUnmarkAll(self): ...
    def canGoToNextDirtyHeadline(self): ...
    def canGoToNextMarkedHeadline(self): ...
    def canMarkChangedHeadlines(self): ...
    def canMarkChangedRoots(self): ...
    def endEditing(self) -> None: ...
    def getSelectedPositions(self): ...
    def redrawAndEdit(self, p, selectAll: bool = ..., selection: Any | None = ..., keepMinibuffer: bool = ...) -> None: ...
    def selectPosition(self, p, **kwargs) -> None: ...
    selectVnode: Any
    def setPositionAfterSort(self, sortChildren): ...
    def treeSelectHelper(self, p) -> None: ...
    def recursiveImport(self, dir_, kind, add_context: Any | None = ..., add_file_context: Any | None = ..., add_path: bool = ..., recursive: bool = ..., safe_at_file: bool = ..., theTypes: Any | None = ..., ignore_pattern: Any | None = ...) -> None: ...
    def cloneFindByPredicate(self, generator, predicate, failMsg: Any | None = ..., flatten: bool = ..., iconPath: Any | None = ..., redraw: bool = ..., undoType: Any | None = ...): ...
    def setCloneFindByPredicateIcon(self, iconPath, p) -> None: ...
    def createCloneFindPredicateRoot(self, flatten, undoType): ...
    def createNodeHierarchy(self, heads, parent: Any | None = ..., forcecreate: bool = ...): ...
    def deletePositionsInList(self, aList, redraw: bool = ...): ...
    def undoableDeletePositions(self, aList) -> None: ...
    def doBatchOperations(self, aList: Any | None = ...) -> None: ...
    def checkBatchOperationsList(self, aList): ...
    def find_h(self, regex, flags=...): ...
    def find_b(self, regex, flags=...): ...
    def findNodeOutsideAnyAtFileTree(self, target): ...
    def registerReloadSettings(self, obj) -> None: ...
    def reloadConfigurableSettings(self): ...
