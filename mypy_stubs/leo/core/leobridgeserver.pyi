import unittest
from leo.core.leoGui import StringFindTabManager as StringFindTabManager
from typing import Any

wsHost: str
wsPort: int
commonActions: Any
SERVER_STARTED_TOKEN: str
g_leoserver: Any
g_server: Any

class IdleTimeManager:
    g: Any
    callback_list: Any
    timer: Any
    on_idle_count: int
    def __init__(self, g) -> None: ...
    def add_callback(self, callback) -> None: ...
    def on_idle(self, timer) -> None: ...
    def start(self) -> None: ...

class ExternalFilesController:
    on_idle_count: int
    integController: Any
    checksum_d: Any
    enabled_d: Any
    has_changed_d: Any
    unchecked_commanders: Any
    unchecked_files: Any
    yesno_all_time: int
    yesno_all_answer: Any
    infoMessage: Any
    waitingForAnswer: bool
    lastPNode: Any
    lastCommander: Any
    def __init__(self, integController) -> None: ...
    def on_idle(self) -> None: ...
    def idle_check_commander(self, c) -> None: ...
    def idle_check_at_file_node(self, c, p) -> None: ...
    def integResult(self, p_result) -> None: ...
    def ask(self, c, path, p: Any | None = ...): ...
    def checksum(self, path): ...
    def get_mtime(self, path): ...
    def get_time(self, path): ...
    def has_changed(self, path): ...
    def is_enabled(self, c): ...
    def join(self, s1, s2): ...
    def set_time(self, path, new_time: Any | None = ...) -> None: ...
    def warn(self, c, path, p) -> None: ...
    def open_with(self, c, d) -> None: ...
    def check_overwrite(self, c, fn): ...
    def shut_down(self) -> None: ...
    def destroy_frame(self, f) -> None: ...

class IntegTextWrapper:
    c: Any
    name: Any
    g: Any
    ins: int
    sel: Any
    s: str
    yScroll: int
    supportsHighLevelInterface: bool
    widget: Any
    def __init__(self, c, name, g) -> None: ...
    def getName(self): ...
    def clipboard_clear(self) -> None: ...
    def clipboard_append(self, s) -> None: ...
    def flashCharacter(self, i, bg: str = ..., fg: str = ..., flashes: int = ..., delay: int = ...) -> None: ...
    def see(self, i) -> None: ...
    def seeInsertPoint(self) -> None: ...
    def setFocus(self) -> None: ...
    def setStyleClass(self, name) -> None: ...
    def tag_configure(self, colorName, **keys) -> None: ...
    def appendText(self, s) -> None: ...
    def delete(self, i, j: Any | None = ...) -> None: ...
    def deleteTextSelection(self) -> None: ...
    def get(self, i, j: Any | None = ...): ...
    def getAllText(self): ...
    virtualInsertPoint: Any
    def getInsertPoint(self): ...
    def getSelectedText(self): ...
    def getSelectionRange(self, sort: bool = ...): ...
    def getXScrollPosition(self): ...
    def getYScrollPosition(self): ...
    def hasSelection(self): ...
    def insert(self, i, s) -> None: ...
    def selectAllText(self, insert: Any | None = ...) -> None: ...
    def setAllText(self, s) -> None: ...
    def setInsertPoint(self, pos, s: Any | None = ...) -> None: ...
    def setXScrollPosition(self, i) -> None: ...
    def setYScrollPosition(self, i) -> None: ...
    def setSelectionRange(self, i, j, insert: Any | None = ...) -> None: ...
    def toPythonIndex(self, index): ...
    def toPythonIndexRowCol(self, index): ...

class LeoBridgeIntegController:
    gnx_to_vnode: Any
    bridge: Any
    g: Any
    currentActionId: int
    commander: Any
    leoIntegConfig: Any
    webSocket: Any
    loop: Any
    headlineWidget: Any
    def __init__(self) -> None: ...
    def sendAsyncOutput(self, p_package) -> None: ...
    def set_ask_result(self, p_result): ...
    def set_config(self, p_config): ...
    def logSignon(self) -> None: ...
    def setActionId(self, p_id) -> None: ...
    async def asyncOutput(self, p_json) -> None: ...
    def sendLeoBridgePackage(self, p_package: Any | None = ...): ...
    def es(self, *args, **keys) -> None: ...
    def initConnection(self, p_webSocket) -> None: ...
    def leoCommand(self, p_command, param): ...
    def get_all_open_commanders(self, param): ...
    def get_ui_states(self, param): ...
    def set_opened_file(self, param): ...
    def open_file(self, param): ...
    def open_files(self, param): ...
    def close_file(self, param): ...
    def save_file(self, param): ...
    def import_any_file(self, param): ...
    def get_search_settings(self, param): ...
    def set_search_settings(self, param): ...
    def find_all(self, param): ...
    def find_next(self, param): ...
    def find_previous(self, param): ...
    def replace(self, param): ...
    def replace_then_find(self, param): ...
    def replace_all(self, param): ...
    def clone_find_all(self, param): ...
    def clone_find_all_flattened(self, param): ...
    def find_var(self, param): ...
    def find_def(self, param): ...
    def goto_global_line(self, param): ...
    def get_buttons(self, param): ...
    def remove_button(self, param): ...
    def click_button(self, param): ...
    def get_all_leo_commands(self, param): ...
    def mark_node(self, param): ...
    def unmark_node(self, param): ...
    def clone_node(self, param): ...
    def cut_node(self, param): ...
    def delete_node(self, param): ...
    def insert_node(self, param): ...
    def insert_named_node(self, param): ...
    def undo(self, param): ...
    def redo(self, param): ...
    def test(self, param): ...
    def page_up(self, param): ...
    def page_down(self, param): ...
    def get_body_states(self, p_ap): ...
    def get_children(self, p_ap): ...
    def get_parent(self, p_ap): ...
    def get_all_gnx(self, param): ...
    def get_body(self, p_gnx): ...
    def get_body_length(self, p_gnx): ...
    def set_body(self, param): ...
    def get_focus(self, param): ...
    def set_selection(self, param): ...
    def set_headline(self, param): ...
    def set_current_position(self, p_ap): ...
    def expand_node(self, p_ap): ...
    def contract_node(self, p_ap): ...

class TestLeoServer(unittest.TestCase):
    request_number: int
    @classmethod
    def setUpClass(cls) -> None: ...
    @classmethod
    def tearDownClass(cls) -> None: ...
    server: Any
    def setUp(self) -> None: ...
    def tearDown(self) -> None: ...
    def test_leo_commands(self) -> None: ...
    def test_most_public_server_methods(self) -> None: ...
    def test_open_and_close(self) -> None: ...
    def test_find_commands(self) -> None: ...

def printAction(param) -> None: ...
def main() -> None: ...
