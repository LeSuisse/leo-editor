import unittest
from typing import Any

class ShadowController:
    c: Any
    dispatch_dict: Any
    encoding: Any
    shadow_subdir: Any
    shadow_prefix: Any
    shadow_in_home_dir: Any
    errors: int
    last_error: str
    trace: bool
    line_mapping: Any
    def __init__(self, c, trace: bool = ..., trace_writers: bool = ...) -> None: ...
    def reloadSettings(self) -> None: ...
    def baseDirName(self): ...
    def dirName(self, filename): ...
    def pathName(self, filename): ...
    def isSignificantPublicFile(self, fn): ...
    def makeShadowDirectory(self, fn): ...
    def replaceFileWithString(self, encoding, fileName, s): ...
    def shadowDirName(self, filename): ...
    def shadowPathName(self, filename): ...
    def check_output(self): ...
    def propagate_changed_lines(self, new_public_lines, old_private_lines, marker, p: Any | None = ...): ...
    def dump_args(self) -> None: ...
    def dump_lines(self, lines, title) -> None: ...
    def init_data(self): ...
    def init_ivars(self, new_public_lines, old_private_lines, marker) -> None: ...
    def op_bad(self, tag, ai, aj, bi, bj) -> None: ...
    def op_delete(self, tag, ai, aj, bi, bj) -> None: ...
    def op_equal(self, tag, ai, aj, bi, bj) -> None: ...
    def op_insert(self, tag, ai, aj, bi, bj) -> None: ...
    def op_replace(self, tag, ai, aj, bi, bj) -> None: ...
    def preprocess(self, lines): ...
    def put_plain_line(self, line) -> None: ...
    def put_sentinels(self, i) -> None: ...
    def propagate_changes(self, old_public_file, old_private_file): ...
    def updatePublicAndPrivateFiles(self, root, fn, shadow_fn) -> None: ...
    def error(self, s, silent: bool = ...) -> None: ...
    def message(self, s) -> None: ...
    def verbatim_error(self) -> None: ...
    def markerFromFileLines(self, lines, fn): ...
    def findLeoLine(self, lines): ...
    def markerFromFileName(self, filename): ...
    def separate_sentinels(self, lines, marker): ...
    def show_error(self, lines1, lines2, message, lines1_message, lines2_message) -> None: ...
    def show_error_lines(self, lines, fileName) -> None: ...
    class AtShadowTestCase(unittest.TestCase):
        c: Any
        p: Any
        shadowController: Any
        trace: Any
        marker: Any
        ok: bool
        def __init__(self, c, p, shadowController, delims: Any | None = ..., trace: bool = ...) -> None: ...
        def fail(self, msg: Any | None = ...) -> None: ...
        old_private_lines: Any
        new_private_lines: Any
        old_public_lines: Any
        new_public_lines: Any
        expected_private_lines: Any
        def setUp(self) -> None: ...
        def findNode(self, c, p, headline): ...
        def createSentinelNode(self, root, p): ...
        def makePrivateLines(self, p): ...
        def makePublicLines(self, lines): ...
        def mungePrivateLines(self, lines, find, replace): ...
        def tearDown(self) -> None: ...
        def runTest(self, define_g: bool = ...): ...
        def shortDescription(self): ...
    class Marker:
        delim1: Any
        delim2: Any
        delim3: Any
        def __init__(self, delims) -> None: ...
        def getDelims(self): ...
        def isSentinel(self, s, suffix: str = ...): ...
        def isVerbatimSentinel(self, s): ...
