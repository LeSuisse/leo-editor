import io
from leo.core import leoNodes as leoNodes
from typing import Any

StringIO = io.StringIO

class FreeMindImporter:
    c: Any
    count: int
    d: Any
    def __init__(self, c) -> None: ...
    def add_children(self, parent, element) -> None: ...
    def create_outline(self, path): ...
    def import_file(self, path) -> None: ...
    tab_width: Any
    def import_files(self, files) -> None: ...
    def prompt_for_files(self) -> None: ...

class JSON_Import_Helper:
    c: Any
    vnodes_dict: Any
    def __init__(self, c) -> None: ...
    def create_nodes(self, parent, parent_d) -> None: ...
    def create_outline(self, path): ...
    def scan(self, s, parent): ...

class LeoImportCommands:
    c: Any
    encoding: str
    errors: int
    fileName: Any
    fileType: Any
    methodName: Any
    output_newline: Any
    tab_width: Any
    treeType: str
    webType: str
    web_st: Any
    def __init__(self, c) -> None: ...
    def reload_settings(self) -> None: ...
    reloadSettings: Any
    def convertCodePartToWeb(self, s, i, p, result): ...
    def appendHeadRef(self, p, file_name, head_ref, result) -> None: ...
    def appendRefToFileName(self, file_name, result) -> None: ...
    def getHeadRef(self, p): ...
    def getFileName(self, p): ...
    def convertDocPartToWeb(self, s, i, result): ...
    def convertVnodeToWeb(self, v): ...
    def copyPart(self, s, i, result): ...
    def exportHeadlines(self, fileName) -> None: ...
    def flattenOutline(self, fileName) -> None: ...
    def outlineToWeb(self, fileName, webType) -> None: ...
    def removeSentinelsCommand(self, paths, toString: bool = ...): ...
    def removeSentinelLines(self, s, line_delim, start_delim, unused_end_delim): ...
    def weave(self, filename) -> None: ...
    def createOutline(self, parent, ext: Any | None = ..., s: Any | None = ...): ...
    def dispatch(self, ext, p): ...
    def import_binary_file(self, fileName, parent): ...
    def init_import(self, ext, fileName, s): ...
    def scanUnknownFileType(self, s, p, ext): ...
    def languageForExtension(self, ext): ...
    def readAtAutoNodes(self) -> None: ...
    def importDerivedFiles(self, parent: Any | None = ..., paths: Any | None = ..., command: str = ...): ...
    def importFilesCommand(self, files: Any | None = ..., parent: Any | None = ..., redrawFlag: bool = ..., shortFn: bool = ..., treeType: Any | None = ...) -> None: ...
    def importFreeMind(self, files) -> None: ...
    def importMindMap(self, files) -> None: ...
    def importWebCommand(self, files, webType) -> None: ...
    def createOutlineFromWeb(self, path, parent): ...
    def findFunctionDef(self, s, i): ...
    def scanBodyForHeadline(self, s): ...
    def scanWebFile(self, fileName, parent) -> None: ...
    def cstCanonicalize(self, s, lower: bool = ...): ...
    def cstDump(self): ...
    def cstEnter(self, s) -> None: ...
    def cstLookup(self, target): ...
    def parse_body(self, p) -> None: ...
    def body_parser_for_ext(self, ext): ...
    def cUnitTest(self, p, fileName: Any | None = ..., s: Any | None = ..., showTree: bool = ...): ...
    def cSharpUnitTest(self, p, fileName: Any | None = ..., s: Any | None = ..., showTree: bool = ...): ...
    def cythonUnitTest(self, p, fileName: Any | None = ..., s: Any | None = ..., showTree: bool = ...): ...
    def coffeeScriptUnitTest(self, p, fileName: Any | None = ..., s: Any | None = ..., showTree: bool = ...): ...
    def ctextUnitTest(self, p, fileName: Any | None = ..., s: Any | None = ..., showTree: bool = ...): ...
    def dartUnitTest(self, p, fileName: Any | None = ..., s: Any | None = ..., showTree: bool = ...): ...
    def elispUnitTest(self, p, fileName: Any | None = ..., s: Any | None = ..., showTree: bool = ...): ...
    def htmlUnitTest(self, p, fileName: Any | None = ..., s: Any | None = ..., showTree: bool = ...): ...
    def iniUnitTest(self, p, fileName: Any | None = ..., s: Any | None = ..., showTree: bool = ...): ...
    def javaUnitTest(self, p, fileName: Any | None = ..., s: Any | None = ..., showTree: bool = ...): ...
    def javaScriptUnitTest(self, p, fileName: Any | None = ..., s: Any | None = ..., showTree: bool = ...): ...
    def markdownUnitTest(self, p, fileName: Any | None = ..., s: Any | None = ..., showTree: bool = ...): ...
    def orgUnitTest(self, p, fileName: Any | None = ..., s: Any | None = ..., showTree: bool = ...): ...
    def otlUnitTest(self, p, fileName: Any | None = ..., s: Any | None = ..., showTree: bool = ...): ...
    def pascalUnitTest(self, p, fileName: Any | None = ..., s: Any | None = ..., showTree: bool = ...): ...
    def perlUnitTest(self, p, fileName: Any | None = ..., s: Any | None = ..., showTree: bool = ...): ...
    def phpUnitTest(self, p, fileName: Any | None = ..., s: Any | None = ..., showTree: bool = ...): ...
    def pythonUnitTest(self, p, fileName: Any | None = ..., s: Any | None = ..., showTree: bool = ...): ...
    def rstUnitTest(self, p, fileName: Any | None = ..., s: Any | None = ..., showTree: bool = ...): ...
    def textUnitTest(self, p, fileName: Any | None = ..., s: Any | None = ..., showTree: bool = ...): ...
    def typeScriptUnitTest(self, p, fileName: Any | None = ..., s: Any | None = ..., showTree: bool = ...): ...
    def xmlUnitTest(self, p, fileName: Any | None = ..., s: Any | None = ..., showTree: bool = ...): ...
    def defaultImporterUnitTest(self, p, fileName: Any | None = ..., s: Any | None = ..., showTree: bool = ...): ...
    def scannerUnitTest(self, p, ext: Any | None = ..., fileName: Any | None = ..., s: Any | None = ..., showTree: bool = ...): ...
    def compute_unit_test_kind(self, ext, fn): ...
    def appendStringToBody(self, p, s) -> None: ...
    def setBodyString(self, p, s) -> None: ...
    def createHeadline(self, parent, body, headline): ...
    def error(self, s) -> None: ...
    def isDocStart(self, s, i): ...
    def isModuleStart(self, s, i): ...
    def massageWebBody(self, s): ...
    def setEncoding(self, p: Any | None = ..., default: Any | None = ...) -> None: ...

class MindMapImporter:
    c: Any
    def __init__(self, c) -> None: ...
    def create_outline(self, path): ...
    tab_width: Any
    def import_files(self, files) -> None: ...
    def prompt_for_files(self) -> None: ...
    def scan(self, path, target) -> None: ...
    def csv_level(self, row): ...
    def csv_string(self, row): ...

class MORE_Importer:
    c: Any
    def __init__(self, c) -> None: ...
    def prompt_for_files(self) -> None: ...
    tab_width: Any
    def import_files(self, files) -> None: ...
    def import_file(self, fileName): ...
    def import_lines(self, strings, first_p): ...
    def headlineLevel(self, s): ...
    def check(self, s): ...
    def check_lines(self, strings): ...

class RecursiveImportController:
    c: Any
    add_path: Any
    file_pattern: Any
    kind: Any
    recursive: Any
    root: Any
    safe_at_file: Any
    theTypes: Any
    ignore_pattern: Any
    def __init__(self, c, kind, add_context: Any | None = ..., add_file_context: Any | None = ..., add_path: bool = ..., recursive: bool = ..., safe_at_file: bool = ..., theTypes: Any | None = ..., ignore_pattern: Any | None = ...) -> None: ...
    n_files: int
    def run(self, dir_) -> None: ...
    def import_dir(self, dir_, parent) -> None: ...
    def import_one_file(self, path, parent) -> None: ...
    def post_process(self, p, prefix) -> None: ...
    def add_class_names(self, p) -> None: ...
    def clear_dirty_bits(self, p) -> None: ...
    def dump_headlines(self, p) -> None: ...
    def fix_back_slashes(self, p) -> None: ...
    def minimize_headlines(self, p, prefix) -> None: ...
    def strip_prefix(self, path, prefix): ...
    def remove_empty_nodes(self, p) -> None: ...

class TabImporter:
    c: Any
    stack: Any
    root: Any
    separate: Any
    def __init__(self, c, separate: bool = ...) -> None: ...
    def check(self, lines, warn: bool = ...): ...
    def dump_stack(self) -> None: ...
    def import_files(self, files) -> None: ...
    def lws(self, s): ...
    def prompt_for_files(self) -> None: ...
    def scan(self, s1, fn: Any | None = ..., root: Any | None = ...): ...
    def scan_helper(self, s): ...
    def undent(self, level, s): ...

class ToDoImporter:
    c: Any
    def __init__(self, c) -> None: ...
    def get_tasks_from_file(self, path): ...
    def import_files(self, files): ...
    mark_s: str
    priority_s: str
    date_s: str
    task_s: str
    line_s: Any
    line_pat: Any
    def parse_file_contents(self, s): ...
    def prompt_for_files(self): ...

class ToDoTask:
    completed: Any
    priority: Any
    start_date: Any
    complete_date: Any
    task_s: Any
    projects: Any
    contexts: Any
    key_vals: Any
    def __init__(self, completed, priority, start_date, complete_date, task_s) -> None: ...
    project_pat: Any
    context_pat: Any
    key_val_pat: Any
    def parse_task(self) -> None: ...

class ZimImportController:
    c: Any
    pathToZim: Any
    rstLevel: Any
    rstType: Any
    zimNodeName: Any
    def __init__(self, c) -> None: ...
    def parseZimIndex(self): ...
    def rstToLastChild(self, p, name, rst): ...
    def clean(self, zimNode, rstType) -> None: ...
    def run(self) -> None: ...

class LegacyExternalFileImporter:
    ignore: Any
    c: Any
    def __init__(self, c) -> None: ...
    class Node:
        h: Any
        level: Any
        lines: Any
        def __init__(self, h, level) -> None: ...
    def add(self, line, stack) -> None: ...
    def compute_delim1(self, path): ...
    def import_file(self, path) -> None: ...
    def import_files(self, paths) -> None: ...
    def prompt_for_files(self) -> None: ...

def import_free_mind_files(event) -> None: ...
def import_legacy_external_files(event) -> None: ...
def import_mind_jet_files(event) -> None: ...
def import_MORE_files_command(event) -> None: ...
def import_tabbed_files_command(event) -> None: ...
def import_todo_text_files(event) -> None: ...
def import_zim_command(event) -> None: ...
def parse_body_command(event) -> None: ...
