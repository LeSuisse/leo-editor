from leo.core import leoNodes as leoNodes
from typing import Any

PRIVAREA: str

def cmd(name): ...
def dump_clone_parents(event) -> None: ...
def dump_gnx_dict(event) -> None: ...

class BadLeoFile(Exception):
    message: Any
    def __init__(self, message) -> None: ...

class FastRead:
    nativeVnodeAttributes: Any
    c: Any
    gnx2vnode: Any
    def __init__(self, c, gnx2vnode) -> None: ...
    def readFile(self, theFile, path): ...
    def readFileFromClipboard(self, s): ...
    translate_table: Any
    def readWithElementTree(self, path, s): ...
    def handleBits(self) -> None: ...
    def resolveUa(self, attr, val, kind: Any | None = ...): ...
    def bytesToUnicode(self, ob): ...
    def scanGlobals(self, g_element) -> None: ...
    def getGlobalData(self): ...
    def scanTnodes(self, t_elements): ...
    def scanVnodes(self, gnx2body, gnx2vnode, gnx2ua, v_elements): ...

class FileCommands:
    c: Any
    frame: Any
    nativeTnodeAttributes: Any
    nativeVnodeAttributes: Any
    def __init__(self, c) -> None: ...
    mFileName: str
    fileDate: int
    leo_file_encoding: Any
    checking: bool
    descendentExpandedList: Any
    descendentMarksList: Any
    forbiddenTnodes: Any
    descendentTnodeUaDictList: Any
    descendentVnodeUaDictList: Any
    ratio: float
    currentVnode: Any
    read_only: bool
    rootPosition: Any
    outputFile: Any
    openDirectory: Any
    usingClipboard: bool
    currentPosition: Any
    copiedTree: Any
    gnxDict: Any
    vnodesDict: Any
    def initIvars(self) -> None: ...
    def writeAtFileNodes(self, event: Any | None = ...) -> None: ...
    def writeOutlineOnly(self, event: Any | None = ...) -> None: ...
    def writeDirtyAtFileNodes(self, event: Any | None = ...) -> None: ...
    def writeMissingAtFileNodes(self, event: Any | None = ...) -> None: ...
    def createBackupFile(self, fileName): ...
    def deleteBackupFile(self, fileName) -> None: ...
    def handleWriteLeoFileException(self, fileName, backupName, f) -> None: ...
    def isReadOnly(self, fileName): ...
    def openOutlineForWriting(self, fileName): ...
    def setDefaultDirectoryForNewFiles(self, fileName) -> None: ...
    def warnOnReadOnlyFiles(self, fileName) -> None: ...
    def checkPaste(self, parent, p): ...
    def getLeoOutlineFromClipboard(self, s): ...
    getLeoOutline: Any
    def getLeoOutlineFromClipboardRetainingClones(self, s): ...
    def linkChildrenToParents(self, p) -> None: ...
    def reassignAllIndices(self, p) -> None: ...
    def getLeoFile(self, theFile, fileName, readAtFileNodesFlag: bool = ..., silent: bool = ..., checkOpenFiles: bool = ...): ...
    def openLeoFile(self, theFile, fileName, readAtFileNodesFlag: bool = ..., silent: bool = ...): ...
    def readAtFileNodes(self) -> None: ...
    def readExternalFiles(self, fileName): ...
    def handleNodeConflicts(self): ...
    def readOutlineOnly(self, theFile, fileName): ...
    def retrieveVnodesFromDb(self, conn): ...
    def initNewDb(self, conn): ...
    def getWindowGeometryFromDb(self, conn): ...
    def setReferenceFile(self, fileName) -> None: ...
    def updateFromRefFile(self): ...
    def read_leojs(self, theFile, fileName): ...
    def archivedPositionToPosition(self, s): ...
    def canonicalTnodeIndex(self, index): ...
    def getDescendentAttributes(self, s, tag: str = ...): ...
    def getDescendentUnknownAttributes(self, s, v: Any | None = ...): ...
    def getPosFromClipboard(self, s): ...
    def getVnodeFromClipboard(self, s): ...
    def initReadIvars(self) -> None: ...
    def propegateDirtyNodes(self) -> None: ...
    def resolveArchivedPosition(self, archivedPosition, root_v): ...
    def resolveTnodeLists(self) -> None: ...
    def restoreDescendentAttributes(self) -> None: ...
    def setPositionsFromVnodes(self) -> None: ...
    def save(self, fileName, silent: bool = ...): ...
    def save_ref(self): ...
    def saveAs(self, fileName) -> None: ...
    def saveTo(self, fileName, silent: bool = ...) -> None: ...
    def exportToSqlite(self, fileName): ...
    def decodePosition(self, s): ...
    def encodePosition(self, p): ...
    def prepareDbTables(self, conn) -> None: ...
    def exportVnodesToSqlite(self, conn, rows) -> None: ...
    def exportGeomToSqlite(self, conn) -> None: ...
    def exportDbVersion(self, conn) -> None: ...
    def exportHashesToSqlite(self, conn): ...
    def outline_to_clipboard_string(self, p: Any | None = ...): ...
    def outline_to_xml_string(self): ...
    def write_Leo_file(self, fileName): ...
    write_LEO_file: Any
    def write_leojs(self, fileName): ...
    def leojs_file(self): ...
    def leojs_globals(self): ...
    def leojs_vnode(self, v): ...
    def write_xml_file(self, fileName): ...
    def writeAllAtFileNodes(self): ...
    def writeOutline(self, fileName): ...
    def writeZipFile(self, s) -> None: ...
    def pickle(self, torv, val, tag): ...
    def put(self, s) -> None: ...
    def putDescendentVnodeUas(self, p): ...
    def createUaList(self, aList): ...
    def putFindSettings(self) -> None: ...
    def putGlobals(self) -> None: ...
    def putHeader(self) -> None: ...
    def putPostlog(self) -> None: ...
    def putPrefs(self) -> None: ...
    def putProlog(self) -> None: ...
    def putSavedMessage(self, fileName) -> None: ...
    def putStyleSheetLine(self) -> None: ...
    def putTnode(self, v) -> None: ...
    def putTnodes(self) -> None: ...
    def putReferencedTnodes(self) -> None: ...
    def putUaHelper(self, torv, key, val): ...
    def putUnknownAttributes(self, torv): ...
    def putVnode(self, p, isIgnore: bool = ...) -> None: ...
    def compute_attribute_bits(self, forceWrite, p): ...
    new: bool
    def putVnodes(self, p: Any | None = ...) -> None: ...
    def setCachedBits(self) -> None: ...
    def putXMLLine(self) -> None: ...
