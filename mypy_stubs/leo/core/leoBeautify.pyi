from leo.core import leoAst as leoAst
from typing import Any

def beautifyCCode(event) -> None: ...
def orange_diff_files(event) -> None: ...
def orange_files(event) -> None: ...
def blacken_files(event) -> None: ...
def blacken_files_diff(event) -> None: ...
def fstringify_files(event) -> None: ...
def fstringify_diff_files(event) -> None: ...
def fstringify_files_silent(event) -> None: ...
def orange_settings(c): ...
def show(obj, tag, dump) -> None: ...
def should_beautify(p): ...
def should_kill_beautify(p): ...

class CPrettyPrinter:
    c: Any
    brackets: int
    p: Any
    parens: int
    result: Any
    tab_width: int
    def __init__(self, c) -> None: ...
    def pretty_print_tree(self, p) -> None: ...
    bracketLevel: int
    def indent(self, p, toList: bool = ..., giveWarnings: bool = ...): ...
    def add_statement_braces(self, s, giveWarnings: bool = ...): ...
    def skip_ws(self, s, i): ...
    def skip_ws_and_comments(self, s, i): ...
    def skip_parens(self, s, i): ...
    def skip_statement(self, s, i): ...
    def put_token(self, s) -> None: ...
    def prev_token(self, s): ...
    def reformat_block_comment(self, s): ...
    def remove_indent(self) -> None: ...
    def match(self, s, i, pat): ...
    def tokenize(self, s): ...
    def skip_block_comment(self, s, i): ...
