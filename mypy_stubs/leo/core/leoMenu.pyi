from typing import Any

class LeoMenu:
    c: Any
    enable_dict: Any
    frame: Any
    isNull: bool
    menus: Any
    menuShortcuts: Any
    def __init__(self, frame) -> None: ...
    def finishCreate(self) -> None: ...
    def define_enable_dict(self): ...
    def oops(self) -> None: ...
    def error(self, s) -> None: ...
    def capitalizeMinibufferMenuName(self, s, removeHyphens): ...
    def createMenusFromTables(self) -> None: ...
    def createMenusFromConfigList(self, aList) -> None: ...
    def createMenuFromConfigList(self, parentName, aList, level: int = ...) -> None: ...
    def handleSpecialMenus(self, name, parentName, alt_name: Any | None = ..., table: Any | None = ...): ...
    def hasSelection(self): ...
    def canonicalizeMenuName(self, name): ...
    def canonicalizeTranslatedMenuName(self, name): ...
    def createMenuEntries(self, menu, table) -> None: ...
    def createMasterMenuCallback(self, command, commandName): ...
    def getMenuEntryBindings(self, command, label): ...
    def getMenuEntryInfo(self, data, menu): ...
    def traceMenuTable(self, table) -> None: ...
    def createMenuItemsFromTable(self, menuName, table) -> None: ...
    def createNewMenu(self, menuName, parentName: str = ..., before: Any | None = ...): ...
    def createOpenWithMenuFromTable(self, table) -> None: ...
    def createOpenWithMenuItemsFromTable(self, menu, table) -> None: ...
    def defineOpenWithMenuCallback(self, d): ...
    def deleteRecentFilesMenuItems(self, menu) -> None: ...
    def deleteMenu(self, menuName) -> None: ...
    def deleteMenuItem(self, itemName, menuName: str = ...) -> None: ...
    def getRealMenuName(self, menuName): ...
    def setRealMenuName(self, untrans, trans) -> None: ...
    def setRealMenuNamesFromTable(self, table) -> None: ...
    def getMenu(self, menuName): ...
    def setMenu(self, menuName, menu) -> None: ...
    def destroyMenu(self, menuName) -> None: ...
    def add_cascade(self, parent, label, menu, underline) -> None: ...
    def add_command(self, menu, **keys) -> None: ...
    def add_separator(self, menu) -> None: ...
    def delete(self, menu, realItemName) -> None: ...
    def delete_range(self, menu, n1, n2) -> None: ...
    def destroy(self, menu) -> None: ...
    def insert(self, menuName, position, label, command, underline: Any | None = ...) -> None: ...
    def insert_cascade(self, parent, index, label, menu, underline) -> None: ...
    def new_menu(self, parent, tearoff: int = ..., label: str = ...) -> None: ...
    def activateMenu(self, menuName) -> None: ...
    def clearAccel(self, menu, name) -> None: ...
    def createMenuBar(self, frame) -> None: ...
    def createOpenWithMenu(self, parent, label, index, amp_index) -> None: ...
    def disableMenu(self, menu, name) -> None: ...
    def enableMenu(self, menu, name, val) -> None: ...
    def getMacHelpMenu(self, table) -> None: ...
    def getMenuLabel(self, menu, name) -> None: ...
    def setMenuLabel(self, menu, name, label, underline: int = ...) -> None: ...

class NullMenu(LeoMenu):
    isNull: bool
    def __init__(self, frame) -> None: ...
    def oops(self) -> None: ...
