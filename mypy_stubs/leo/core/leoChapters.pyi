from typing import Any

def cmd(name): ...

class ChapterController:
    c: Any
    chaptersDict: Any
    initing: bool
    re_chapter: Any
    selectedChapter: Any
    selectChapterLockout: bool
    tt: Any
    def __init__(self, c) -> None: ...
    use_tabs: Any
    def reloadSettings(self) -> None: ...
    def createIcon(self) -> None: ...
    def finishCreate(self) -> None: ...
    def makeCommand(self, chapterName, binding: Any | None = ...) -> None: ...
    def selectChapter(self, event: Any | None = ...) -> None: ...
    def selectChapter1(self, event) -> None: ...
    def backChapter(self, event: Any | None = ...) -> None: ...
    def nextChapter(self, event: Any | None = ...) -> None: ...
    def selectChapterByName(self, name, collapse: bool = ...) -> None: ...
    def selectChapterByNameHelper(self, chapter, collapse: bool = ...) -> None: ...
    def error(self, s) -> None: ...
    def note(self, s, killUnitTest: bool = ...) -> None: ...
    def warning(self, s) -> None: ...
    def findAnyChapterNode(self): ...
    def findChapterNameForPosition(self, p): ...
    def findChapterNode(self, name): ...
    def getChapter(self, name): ...
    def getSelectedChapter(self): ...
    def inChapter(self): ...
    def parseHeadline(self, p): ...
    def sanitize(self, s): ...
    def selectChapterForPosition(self, p, chapter: Any | None = ...) -> None: ...
    def setAllChapterNames(self): ...

class Chapter:
    c: Any
    cc: Any
    name: Any
    selectLockout: bool
    p: Any
    root: Any
    def __init__(self, c, chapterController, name) -> None: ...
    def findRootNode(self): ...
    def select(self, w: Any | None = ..., selectEditor: bool = ...) -> None: ...
    def chapterSelectHelper(self, w: Any | None = ..., selectEditor: bool = ...) -> None: ...
    def findPositionInChapter(self, p1, strict: bool = ...): ...
    def findEditorInChapter(self, p): ...
    def positionIsInChapter(self, p): ...
    def unselect(self) -> None: ...
