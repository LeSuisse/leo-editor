from typing import Any

class BaseLeoCompare:
    c: Any
    appendOutput: Any
    ignoreBlankLines: Any
    ignoreFirstLine1: Any
    ignoreFirstLine2: Any
    ignoreInteriorWhitespace: Any
    ignoreLeadingWhitespace: Any
    ignoreSentinelLines: Any
    limitCount: Any
    limitToExtension: Any
    makeWhitespaceVisible: Any
    printBothMatches: Any
    printMatches: Any
    printMismatches: Any
    printTrailingMismatches: Any
    outputFileName: Any
    fileName1: Any
    fileName2: Any
    outputFile: Any
    def __init__(self, commands: Any | None = ..., appendOutput: bool = ..., ignoreBlankLines: bool = ..., ignoreFirstLine1: bool = ..., ignoreFirstLine2: bool = ..., ignoreInteriorWhitespace: bool = ..., ignoreLeadingWhitespace: bool = ..., ignoreSentinelLines: bool = ..., limitCount: int = ..., limitToExtension: str = ..., makeWhitespaceVisible: bool = ..., printBothMatches: bool = ..., printMatches: bool = ..., printMismatches: bool = ..., printTrailingMismatches: bool = ..., outputFileName: Any | None = ...) -> None: ...
    def compare_directories(self, path1, path2): ...
    def compare_files(self, name1, name2) -> None: ...
    def compare_list_of_files(self, aList1) -> None: ...
    def compare_two_files(self, name1, name2) -> None: ...
    def compare_lines(self, s1, s2): ...
    def compare_open_files(self, f1, f2, name1, name2) -> None: ...
    def filecmp(self, f1, f2): ...
    def doOpen(self, name): ...
    def dump(self, tag, s) -> None: ...
    def dumpToEndOfFile(self, tag, f, s, line, printTrailing): ...
    def isLeoHeader(self, s): ...
    def isSentinel(self, s, sentinelComment): ...
    def openOutputFile(self) -> None: ...
    def show(self, s) -> None: ...
    def showIvars(self) -> None: ...

class LeoCompare(BaseLeoCompare): ...

class CompareLeoOutlines:
    c: Any
    file_node: Any
    root: Any
    path1: Any
    path2: Any
    def __init__(self, c) -> None: ...
    visible: Any
    def diff_list_of_files(self, aList, visible: bool = ...) -> None: ...
    def diff_two_files(self, fn1, fn2) -> None: ...
    def compute_dicts(self, c1, c2): ...
    def create_compare_node(self, c1, c2, d, kind) -> None: ...
    def create_file_node(self, diff_list, fn1, fn2): ...
    def create_root(self, aList): ...
    def finish(self) -> None: ...
    def get_file(self, path): ...
    def make_diff_outlines(self, c1, c2) -> None: ...
    def open_outline(self, fn): ...

def diff_and_open_leo_files(event) -> None: ...
def diff_leo_files(event) -> None: ...
def diffMarkedNodes(event) -> None: ...
def diff_leo_files_helper(event, title, visible) -> None: ...
def go() -> None: ...
