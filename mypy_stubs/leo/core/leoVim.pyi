from leo.core.leoGui import LeoKeyEvent as LeoKeyEvent
from typing import Any

def show_stroke(stroke): ...
def cmd(name): ...

class VimEvent:
    c: Any
    char: Any
    stroke: Any
    w: Any
    widget: Any
    def __init__(self, c, char, stroke, w) -> None: ...

class VimCommands:
    c: Any
    k: Any
    trace_flag: Any
    def __init__(self, c) -> None: ...
    normal_mode_dispatch_d: Any
    motion_dispatch_d: Any
    vis_dispatch_d: Any
    arrow_d: Any
    def create_dispatch_dicts(self) -> None: ...
    def create_motion_dispatch_d(self): ...
    def create_normal_dispatch_d(self): ...
    def create_vis_dispatch_d(self): ...
    def create_arrow_d(self): ...
    w: Any
    def finishCreate(self) -> None: ...
    in_dot: bool
    dot_list: Any
    old_dot_list: Any
    def init_dot_ivars(self) -> None: ...
    chars: Any
    register_names: Any
    def init_constant_ivars(self) -> None: ...
    ch: Any
    command_i: Any
    command_list: Any
    command_n: Any
    command_w: Any
    event: Any
    extend: bool
    handler: Any
    in_command: bool
    in_motion: bool
    motion_func: Any
    motion_i: Any
    n1: int
    n: int
    n1_seen: bool
    next_func: Any
    old_sel: Any
    repeat_list: Any
    return_value: bool
    state: str
    stroke: Any
    visual_line_flag: bool
    vis_mode_i: Any
    vis_mode_w: Any
    def init_state_ivars(self) -> None: ...
    colon_w: Any
    cross_lines: Any
    register_d: Any
    search_stroke: Any
    trainer: bool
    j_changed: bool
    def init_persistent_ivars(self) -> None: ...
    def accept(self, add_to_dot: bool = ..., handler: Any | None = ...) -> None: ...
    def delegate(self) -> None: ...
    def done(self, add_to_dot: bool = ..., return_value: bool = ..., set_dot: bool = ..., stroke: Any | None = ...) -> None: ...
    def ignore(self) -> None: ...
    def not_ready(self) -> None: ...
    def on_activate(self) -> None: ...
    def quit(self) -> None: ...
    def reset(self, setFocus) -> None: ...
    def begin_insert_mode(self, i: Any | None = ..., w: Any | None = ...) -> None: ...
    def begin_motion(self, motion_func) -> None: ...
    def end_insert_mode(self) -> None: ...
    def vim_digits(self) -> None: ...
    def vim_digits_2(self) -> None: ...
    def vim_arrow(self) -> None: ...
    def vim_return(self) -> None: ...
    change_pattern: Any
    def update_dot_before_search(self, find_pattern, change_pattern) -> None: ...
    def update_selection_after_search(self) -> None: ...
    def vim_0(self) -> None: ...
    def vim_a(self) -> None: ...
    def vim_A(self) -> None: ...
    def vim_b(self) -> None: ...
    def vim_c(self) -> None: ...
    def vim_c2(self) -> None: ...
    def vim_caret(self) -> None: ...
    def vim_colon(self) -> None: ...
    def vim_comma(self) -> None: ...
    def vim_comma2(self) -> None: ...
    def vim_ctrl_r(self) -> None: ...
    def vim_d(self) -> None: ...
    d_stroke: Any
    def vim_d2(self) -> None: ...
    def vim_d3(self) -> None: ...
    def vim_di(self) -> None: ...
    def vim_dollar(self) -> None: ...
    def vim_dot(self) -> None: ...
    def vim_e(self) -> None: ...
    def vim_esc(self) -> None: ...
    def vim_F(self) -> None: ...
    def vim_F2(self) -> None: ...
    def vim_f(self) -> None: ...
    def vim_f2(self) -> None: ...
    def vim_G(self) -> None: ...
    def vim_g(self) -> None: ...
    def vim_g2(self) -> None: ...
    def vim_h(self) -> None: ...
    def vim_i(self) -> None: ...
    def vim_j(self) -> None: ...
    def vim_k(self) -> None: ...
    def vim_l(self) -> None: ...
    def vim_m(self) -> None: ...
    def vim_m2(self) -> None: ...
    def vim_n(self) -> None: ...
    def vim_N(self) -> None: ...
    def vim_O(self) -> None: ...
    def vim_o(self) -> None: ...
    def vim_p(self) -> None: ...
    def vim_P(self) -> None: ...
    def vim_pound(self) -> None: ...
    def vim_q(self) -> None: ...
    def vim_q2(self) -> None: ...
    def vim_question(self) -> None: ...
    def vim_r(self) -> None: ...
    def vim_r2(self) -> None: ...
    def vim_redo(self) -> None: ...
    def vim_s(self) -> None: ...
    def vim_s2(self) -> None: ...
    def vim_slash(self) -> None: ...
    def vim_star(self) -> None: ...
    def vim_t(self) -> None: ...
    def vim_t2(self) -> None: ...
    def vim_T(self) -> None: ...
    def vim_T2(self) -> None: ...
    def vim_u(self) -> None: ...
    def vim_v(self) -> None: ...
    def vim_V(self) -> None: ...
    def vim_w(self) -> None: ...
    def vim_x(self) -> None: ...
    def vim_y(self) -> None: ...
    y_stroke: Any
    def vim_y2(self) -> None: ...
    def vim_y3(self) -> None: ...
    def vim_Y(self) -> None: ...
    def vim_z(self) -> None: ...
    def vim_z2(self) -> None: ...
    def vis_escape(self) -> None: ...
    def vis_J(self) -> None: ...
    def vis_c(self) -> None: ...
    def vis_d(self) -> None: ...
    def vis_u(self) -> None: ...
    def vis_v(self) -> None: ...
    def vis_y(self) -> None: ...
    def do_key(self, event): ...
    def handle_specials(self): ...
    def init_scanner_vars(self, event) -> None: ...
    class LoadFileAtCursor:
        vc: Any
        def __init__(self, vc) -> None: ...
        __name__: str
        def __call__(self, event: Any | None = ...) -> None: ...
        def load_file_at_cursor(self, fn) -> None: ...
        def tab_callback(self) -> None: ...
    class Substitution:
        all_lines: Any
        vc: Any
        def __init__(self, vc, all_lines) -> None: ...
        __name__: str
        def __call__(self, event: Any | None = ...) -> None: ...
        def tab_callback(self) -> None: ...
    class Tabnew:
        vc: Any
        def __init__(self, vc) -> None: ...
        __name__: str
        def __call__(self, event: Any | None = ...) -> None: ...
        def open_file_by_name(self, fn) -> None: ...
        def tab_callback(self) -> None: ...
    def e_command(self, event: Any | None = ...) -> None: ...
    def tabnew_command(self, event: Any | None = ...) -> None: ...
    def print_dot(self, event: Any | None = ...) -> None: ...
    def q_command(self, event: Any | None = ...) -> None: ...
    def qa_command(self, event: Any | None = ...) -> None: ...
    def quit_now(self, event: Any | None = ...) -> None: ...
    def r_command(self, event: Any | None = ...) -> None: ...
    def revert(self, event: Any | None = ...) -> None: ...
    def percent_s_command(self, event: Any | None = ...) -> None: ...
    def s_command(self, event: Any | None = ...) -> None: ...
    def shell_command(self, event: Any | None = ...) -> None: ...
    def toggle_vim_mode(self, event: Any | None = ...) -> None: ...
    def toggle_vim_trace(self, event: Any | None = ...) -> None: ...
    def toggle_vim_trainer_mode(self, event: Any | None = ...) -> None: ...
    def w_command(self, event: Any | None = ...) -> None: ...
    def xa_command(self, event: Any | None = ...) -> None: ...
    def wq_command(self, event: Any | None = ...) -> None: ...
    def do_inner_motion(self, restart: bool = ...) -> None: ...
    def do_insert_mode(self) -> None: ...
    def test_for_insert_escape(self, w): ...
    def do_normal_mode(self) -> None: ...
    def do_state(self, d, mode_name) -> None: ...
    def do_visual_mode(self) -> None: ...
    def add_to_dot(self, stroke: Any | None = ...) -> None: ...
    def compute_dot(self, stroke) -> None: ...
    def do(self, o, event: Any | None = ...) -> None: ...
    def do_trace(self, blank_line: bool = ...) -> None: ...
    def in_headline(self, w): ...
    def in_tree(self, w): ...
    def is_body(self, w): ...
    def is_head(self, w): ...
    def is_plain_key(self, stroke): ...
    def is_text_wrapper(self, w: Any | None = ...): ...
    def on_idle(self, tag, keys) -> None: ...
    def on_same_line(self, s, i1, i2): ...
    def oops(self, message) -> None: ...
    def save_body(self) -> None: ...
    def set_border(self, kind: Any | None = ..., w: Any | None = ..., activeFlag: Any | None = ...) -> None: ...
    def set_property(self, w, focus_flag) -> None: ...
    def show_command(self): ...
    def show_dot(self): ...
    def show_status(self) -> None: ...
    def to_bol(self, s, i): ...
    def to_eol(self, s, i): ...
    def visual_line_helper(self) -> None: ...
    def widget_name(self, w): ...
