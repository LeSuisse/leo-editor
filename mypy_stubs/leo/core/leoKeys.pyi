from leo.commands import gotoCommands as gotoCommands
from leo.external import codewise as codewise
from typing import Any

def ac_cmd(name): ...
def cmd(name): ...

class AutoCompleterClass:
    c: Any
    k: Any
    force: Any
    language: Any
    namespaces: Any
    qw: Any
    tabName: Any
    verbose: bool
    w: Any
    warnings: Any
    codewiseSelfList: Any
    completionsDict: Any
    def __init__(self, k) -> None: ...
    auto_tab: Any
    forbid_invalid: Any
    use_jedi: Any
    use_qcompleter: Any
    def reloadSettings(self) -> None: ...
    def autoComplete(self, event: Any | None = ..., force: bool = ...) -> None: ...
    def autoCompleteForce(self, event: Any | None = ...): ...
    def disableAutocompleter(self, event: Any | None = ...) -> None: ...
    def disableCalltips(self, event: Any | None = ...) -> None: ...
    def enableAutocompleter(self, event: Any | None = ...) -> None: ...
    def enableCalltips(self, event: Any | None = ...) -> None: ...
    def toggleAutocompleter(self, event: Any | None = ...) -> None: ...
    def toggleCalltips(self, event: Any | None = ...) -> None: ...
    def showCalltips(self, event: Any | None = ..., force: bool = ...) -> None: ...
    def showCalltipsForce(self, event: Any | None = ...): ...
    def showAutocompleterStatus(self) -> None: ...
    def showCalltipsStatus(self) -> None: ...
    def exit(self) -> None: ...
    finish: Any
    abort: Any
    def appendTabName(self, word) -> None: ...
    def beginTabName(self, word) -> None: ...
    def clearTabName(self) -> None: ...
    def popTabName(self) -> None: ...
    def setTabName(self, s) -> None: ...
    def attr_matches(self, s, namespace): ...
    def auto_completer_state_handler(self, event): ...
    def calltip(self) -> None: ...
    def calltip_fail(self, prefix) -> None: ...
    def calltip_success(self, prefix, obj) -> None: ...
    def compute_completion_list(self): ...
    def get_cached_options(self, prefix): ...
    def do_backspace(self) -> None: ...
    def do_qcompleter_tab(self, prefix, options): ...
    def get_autocompleter_prefix(self): ...
    jedi_warning: bool
    def get_completions(self, prefix): ...
    def get_codewise_completions(self, prefix): ...
    def clean(self, hits): ...
    def clean_for_display(self, hits): ...
    def guess_class(self, c, varname): ...
    def lookup_functions(self, prefix): ...
    def lookup_methods(self, aList, prefix): ...
    def lookup_modules(self, aList, prefix): ...
    def get_jedi_completions(self, prefix): ...
    def add_prefix(self, prefix, s): ...
    def get_leo_completions(self, prefix): ...
    def get_leo_namespace(self, prefix): ...
    def get_object(self): ...
    def info(self): ...
    qcompleter: Any
    def init_qcompleter(self, event: Any | None = ...) -> None: ...
    def init_tabcompleter(self, event: Any | None = ...) -> None: ...
    def insert_general_char(self, ch) -> None: ...
    def insert_string(self, s, select: bool = ...) -> None: ...
    def is_leo_source_file(self): ...
    def put(self, *args, **keys) -> None: ...
    def show_completion_list(self, common_prefix, prefix, tabList) -> None: ...
    def clean_completion_list(self, header, tabList): ...
    def get_summary_list(self, header, tabList): ...
    def start(self, event) -> None: ...
    def strip_brackets(self, s): ...

class ContextSniffer:
    vars: Any
    def __init__(self) -> None: ...
    def get_classes(self, s, varname): ...
    def push_declarations(self, s) -> None: ...
    def declare(self, var, klass) -> None: ...

class FileNameChooser:
    c: Any
    k: Any
    log: Any
    callback: Any
    filterExt: Any
    prompt: Any
    tabName: Any
    def __init__(self, c) -> None: ...
    def compute_tab_list(self): ...
    def do_back_space(self) -> None: ...
    def do_char(self, char) -> None: ...
    def do_tab(self) -> None: ...
    def get_file_name(self, event, callback, filterExt, prompt, tabName) -> None: ...
    def extend_label(self, s) -> None: ...
    def get_label(self): ...
    def set_label(self, s) -> None: ...
    def show_tab_list(self, tabList) -> None: ...

class GetArg:
    c: Any
    k: Any
    log: Any
    tabName: Any
    after_get_arg_state: Any
    arg_completion: bool
    handler: Any
    tabList: Any
    cycling_prefix: Any
    cycling_index: int
    cycling_tabList: Any
    def __init__(self, c, prompt: str = ..., tabName: str = ...) -> None: ...
    def compute_tab_list(self, tabList): ...
    def do_back_space(self, tabList, completion: bool = ...) -> None: ...
    def do_tab(self, tabList, completion: bool = ...) -> None: ...
    def do_tab_callback(self): ...
    def do_tab_cycling(self, common_prefix, tabList) -> None: ...
    def reset_tab_cycling(self) -> None: ...
    def extend_label(self, s) -> None: ...
    def get_label(self): ...
    def set_label(self, s) -> None: ...
    def get_arg(self, event, returnKind: Any | None = ..., returnState: Any | None = ..., handler: Any | None = ..., tabList: Any | None = ..., completion: bool = ..., oneCharacter: bool = ..., stroke: Any | None = ..., useMinibuffer: bool = ...) -> None: ...
    def cancel_after_state(self) -> None: ...
    def do_char(self, event, char) -> None: ...
    def do_end(self, event, char, stroke) -> None: ...
    def do_state_zero(self, completion, event, handler, oneCharacter, returnKind, returnState, tabList, useMinibuffer) -> None: ...
    def should_end(self, char, stroke): ...
    def trace_state(self, char, completion, handler, state, stroke) -> None: ...
    def get_command(self, s): ...
    def get_minibuffer_command_name(self): ...
    def is_command(self, s): ...
    def show_tab_list(self, tabList) -> None: ...
    def command_source(self, commandName): ...

class KeyHandlerClass:
    c: Any
    dispatchEvent: Any
    fnc: Any
    getArgInstance: Any
    inited: bool
    killedBindings: Any
    replace_meta_with_alt: bool
    w: Any
    x_hasNumeric: Any
    altX_prompt: str
    KeyStroke: Any
    autoCompleter: Any
    qcompleter: Any
    def __init__(self, c) -> None: ...
    abbrevOn: bool
    arg: str
    getArgEscapeFlag: bool
    getArgEscapes: Any
    inputModeName: str
    modePrompt: str
    state: Any
    givenArgs: Any
    functionTail: Any
    def defineExternallyVisibleIvars(self) -> None: ...
    abbreviationsDict: Any
    bindingsDict: Any
    bindtagsDict: Any
    commandHistory: Any
    commandIndex: int
    masterBindingsDict: Any
    masterGuiBindingsDict: Any
    mb_copyKey: Any
    mb_pasteKey: Any
    mb_cutKey: Any
    abortAllModesKey: Any
    autoCompleteForceKey: Any
    demoNextKey: Any
    demoPrevKey: Any
    fullCommandKey: Any
    universalArgKey: Any
    stroke: Any
    mb_event: Any
    mb_history: Any
    mb_help: bool
    mb_helpHandler: Any
    idleCount: int
    modeBindingsDict: Any
    modeWidget: Any
    silentMode: bool
    def defineInternalIvars(self) -> None: ...
    def defineMultiLineCommands(self) -> None: ...
    def defineSingleLineCommands(self) -> None: ...
    def finishCreate(self) -> None: ...
    def oops(self) -> None: ...
    enable_autocompleter: Any
    enable_calltips: Any
    ignore_unbound_non_ascii_keys: Any
    minibuffer_background_color: Any
    minibuffer_foreground_color: Any
    minibuffer_warning_color: Any
    minibuffer_error_color: Any
    warn_about_redefined_shortcuts: Any
    enable_alt_ctrl_bindings: Any
    command_mode_bg_color: Any
    command_mode_fg_color: Any
    insert_mode_bg_color: Any
    insert_mode_fg_color: Any
    overwrite_mode_bg_color: Any
    overwrite_mode_fg_color: Any
    unselected_body_bg_color: Any
    unselected_body_fg_color: Any
    def reloadSettings(self) -> None: ...
    defaultEditingAction: Any
    def setDefaultEditingAction(self) -> None: ...
    unboundKeyAction: str
    defaultUnboundKeyAction: Any
    def setDefaultUnboundKeyAction(self, allowCommandState: bool = ...) -> None: ...
    def bindKey(self, pane, shortcut, callback, commandName, modeFlag: bool = ..., tag: Any | None = ...): ...
    bindShortcut: Any
    def check_bind_key(self, commandName, pane, stroke): ...
    def kill_one_shortcut(self, stroke) -> None: ...
    def remove_conflicting_definitions(self, aList, commandName, pane, shortcut): ...
    def bindKeyToDict(self, pane, stroke, bi) -> None: ...
    def bindOpenWith(self, d): ...
    def checkBindings(self) -> None: ...
    def completeAllBindings(self, w: Any | None = ...) -> None: ...
    def completeAllBindingsForWidget(self, w) -> None: ...
    def dumpMasterBindingsDict(self) -> None: ...
    def initAbbrev(self) -> None: ...
    def initOneAbbrev(self, commandName, key) -> None: ...
    def initSpecialIvars(self) -> None: ...
    def makeAllBindings(self) -> None: ...
    def makeBindingsFromCommandsDict(self) -> None: ...
    def makeMasterGuiBinding(self, stroke, w: Any | None = ...) -> None: ...
    def addToCommandHistory(self, commandName) -> None: ...
    def commandHistoryFwd(self) -> None: ...
    def commandHistoryBackwd(self) -> None: ...
    def initCommandHistory(self) -> None: ...
    def resetCommandHistory(self) -> None: ...
    def sortCommandHistory(self) -> None: ...
    def fullCommand(self, event, specialStroke: Any | None = ..., specialFunc: Any | None = ..., help: bool = ..., helpHandler: Any | None = ...) -> None: ...
    def callAltXFunction(self, event): ...
    def menuCommandKey(self, event: Any | None = ...) -> None: ...
    def printBindings(self, event: Any | None = ...): ...
    def printBindingsHelper(self, result, data, prefix): ...
    def printButtons(self, event: Any | None = ...) -> None: ...
    def printCommands(self, event: Any | None = ...) -> None: ...
    def repeatComplexCommand(self, event) -> None: ...
    def repeatComplexCommandHelper(self, event) -> None: ...
    def setCommandState(self, event) -> None: ...
    def setInsertState(self, event) -> None: ...
    def setOverwriteState(self, event) -> None: ...
    def toggleInputState(self, event: Any | None = ...) -> None: ...
    def getNextArg(self, handler) -> None: ...
    def get1Arg(self, event, handler, prefix: Any | None = ..., tabList: Any | None = ..., completion: bool = ..., oneCharacter: bool = ..., stroke: Any | None = ..., useMinibuffer: bool = ...) -> None: ...
    def getArg(self, event, returnKind: Any | None = ..., returnState: Any | None = ..., handler: Any | None = ..., prefix: Any | None = ..., tabList: Any | None = ..., completion: bool = ..., oneCharacter: bool = ..., stroke: Any | None = ..., useMinibuffer: bool = ...) -> None: ...
    def doBackSpace(self, tabList, completion: bool = ...) -> None: ...
    def doTabCompletion(self, tabList) -> None: ...
    def getMinibufferCommandName(self): ...
    def keyboardQuit(self, event: Any | None = ..., setFocus: bool = ...) -> None: ...
    def manufactureKeyPressForCommandName(self, w, commandName) -> None: ...
    def overrideCommand(self, commandName, func) -> None: ...
    def registerCommand(self, commandName, func, allowBinding: bool = ..., pane: str = ..., shortcut: Any | None = ..., **kwargs) -> None: ...
    def registerCommandShortcut(self, commandName, func, pane, shortcut) -> None: ...
    def simulateCommand(self, commandName, event: Any | None = ...) -> None: ...
    def getFileName(self, event, callback: Any | None = ..., filterExt: Any | None = ..., prompt: str = ..., tabName: str = ...) -> None: ...
    def masterKeyHandler(self, event) -> None: ...
    def checkKeyEvent(self, event) -> None: ...
    def setEventWidget(self, event) -> None: ...
    def traceVars(self, event) -> None: ...
    def isSpecialKey(self, event): ...
    def doKeyboardQuit(self, event): ...
    def doDemo(self, event): ...
    def doMode(self, event): ...
    def callStateFunction(self, event): ...
    def handleMiniBindings(self, event, state, stroke): ...
    def handleMinibufferHelper(self, event, pane, state, stroke): ...
    def handleInputShortcut(self, event, stroke) -> None: ...
    def isInShortcutBodyLine(self): ...
    def isEditShortcutSensible(self): ...
    def editShortcut_do_bind_helper(self, stroke, cmdname) -> None: ...
    def doVim(self, event): ...
    def doBinding(self, event): ...
    def getPaneBinding(self, event): ...
    def getBindingHelper(self, key, name, stroke, w): ...
    def searchTree(self, char): ...
    def extendLabel(self, s, select: bool = ..., protect: bool = ...) -> None: ...
    def getEditableTextRange(self): ...
    def getLabel(self, ignorePrompt: bool = ...): ...
    def killLine(self, protect: bool = ...) -> None: ...
    def protectLabel(self) -> None: ...
    def resetLabel(self) -> None: ...
    def selectAll(self) -> None: ...
    def setLabel(self, s, protect: bool = ...) -> None: ...
    def setLabelBlue(self, label, protect: bool = ...) -> None: ...
    def setLabelGrey(self, label: Any | None = ...) -> None: ...
    setLabelGray: Any
    def setLabelRed(self, label: Any | None = ..., protect: bool = ...) -> None: ...
    def setStatusLabel(self, s) -> None: ...
    def updateLabel(self, event) -> None: ...
    def addModeCommands(self) -> None: ...
    def badMode(self, modeName) -> None: ...
    def createModeBindings(self, modeName, d, w) -> None: ...
    def endMode(self) -> None: ...
    def enterNamedMode(self, event, commandName) -> None: ...
    def exitNamedMode(self, event: Any | None = ...) -> None: ...
    def modeHelp(self, event) -> None: ...
    def modeHelpHelper(self, d) -> None: ...
    def reinitMode(self, modeName) -> None: ...
    def generalModeHandler(self, event, commandName: Any | None = ..., func: Any | None = ..., modeName: Any | None = ..., nextMode: Any | None = ..., prompt: Any | None = ...) -> None: ...
    def initMode(self, event, modeName) -> None: ...
    def computeInverseBindingDict(self): ...
    def getStrokeForCommandName(self, commandName): ...
    def isFKey(self, stroke): ...
    def isPlainKey(self, stroke): ...
    def prettyPrintKey(self, stroke, brief: bool = ...): ...
    def stroke2char(self, stroke): ...
    def clearState(self) -> None: ...
    def getState(self, kind): ...
    def getStateHandler(self): ...
    def getStateKind(self): ...
    def inState(self, kind: Any | None = ...): ...
    def setDefaultInputState(self) -> None: ...
    def setEditingState(self) -> None: ...
    def setInputState(self, state, set_border: bool = ...) -> None: ...
    def setState(self, kind, n, handler: Any | None = ...) -> None: ...
    def showStateAndMode(self, w: Any | None = ..., prompt: Any | None = ..., setFocus: bool = ...) -> None: ...
    def showStateCursor(self, state, w) -> None: ...

class ModeInfo:
    c: Any
    d: Any
    entryCommands: Any
    k: Any
    name: Any
    prompt: Any
    def __init__(self, c, name, aList) -> None: ...
    def computeModeName(self, name): ...
    def computeModePrompt(self, name): ...
    def createModeBindings(self, w) -> None: ...
    def createModeCommand(self) -> None: ...
    def enterMode(self) -> None: ...
    def init(self, name, dataList) -> None: ...
    def initMode(self) -> None: ...
