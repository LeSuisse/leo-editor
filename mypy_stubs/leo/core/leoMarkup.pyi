import io
from typing import Any

StringIO = io.StringIO
asciidoctor_exec: Any
asciidoc3_exec: Any
pandoc_exec: Any
sphinx_build: Any

def adoc_command(event: Any | None = ..., verbose: bool = ...): ...
def adoc_with_preview_command(event: Any | None = ..., verbose: bool = ...): ...
def pandoc_command(event, verbose: bool = ...): ...
def pandoc_with_preview_command(event: Any | None = ..., verbose: bool = ...): ...
def sphinx_command(event, verbose: bool = ...): ...
def sphinx_with_preview_command(event: Any | None = ..., verbose: bool = ...): ...

class MarkupCommands:
    c: Any
    kind: Any
    level_offset: int
    root_level: int
    def __init__(self, c) -> None: ...
    sphinx_command_dir: Any
    sphinx_default_command: Any
    sphinx_input_dir: Any
    sphinx_output_dir: Any
    def reload_settings(self) -> None: ...
    def command_helper(self, event, kind, preview, verbose): ...
    adoc_pattern: Any
    def filename(self, p): ...
    def compute_opath(self, i_path): ...
    def run_asciidoctor(self, i_path, o_path) -> None: ...
    def run_pandoc(self, i_path, o_path) -> None: ...
    def run_sphinx(self, i_path, o_path) -> None: ...
    def write_root(self, root) -> None: ...
    adoc_title_pat: Any
    pandoc_title_pat: Any
    def compute_level_offset(self, root): ...
    def write_body(self, p) -> None: ...
    def write_headline(self, p) -> None: ...
    def remove_directives(self, s): ...
    def adoc_command(self, event: Any | None = ..., preview: bool = ..., verbose: bool = ...): ...
    def pandoc_command(self, event: Any | None = ..., preview: bool = ..., verbose: bool = ...): ...
    def sphinx_command(self, event: Any | None = ..., preview: bool = ..., verbose: bool = ...): ...
