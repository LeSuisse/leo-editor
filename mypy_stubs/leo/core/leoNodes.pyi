from leo.core import signal_manager as signal_manager
from leo.core.leoCommands import Commands as Cmdr
from typing import Any, Callable, List, Optional, Sequence, Tuple, Union

class NodeIndices:
    defaultId: Any
    lastIndex: int
    stack: Any
    timeString: str
    userId: Any
    def __init__(self, id_: str) -> None: ...
    def check_gnx(self, c: Cmdr, gnx: str, v: VNode): ...
    def compute_last_index(self, c: Cmdr): ...
    def computeNewIndex(self): ...
    def getDefaultId(self): ...
    def setDefaultId(self, theId: str): ...
    def getNewIndex(self, v: VNode, cached: bool = ...): ...
    def new_vnode_helper(self, c: Cmdr, gnx: Union[str, None], v: VNode): ...
    def scanGnx(self, s: str, i: int = ...): ...
    def setTimestamp(self) -> None: ...
    setTimeStamp: Any
    def tupleToString(self, aTuple: Tuple[str, str, Any]): ...
    def update(self): ...
    def updateLastIndex(self, gnx) -> None: ...

class Position:
    def __eq__(self, p2: object): ...
    def __ne__(self, p2): ...
    v: Any
    stack: Any
    def __init__(self, v: VNode, childIndex: int = ..., stack: List[Tuple[VNode, int]] = ...) -> None: ...
    def __ge__(self, other): ...
    def __le__(self, other): ...
    def __lt__(self, other): ...
    def __gt__(self, other: Position): ...
    def __bool__(self): ...
    def archivedPosition(self, root_p: Position = ...): ...
    def dumpLink(self, link): ...
    def dump(self, label: str = ...) -> None: ...
    def key(self): ...
    def sort_key(self, p: Position): ...
    def convertTreeToString(self): ...
    def moreHead(self, firstLevel: int, useVerticalBar: bool = ...): ...
    def moreBody(self): ...
    def children(self, copy: bool = ...): ...
    children_iter: Any
    def following_siblings(self, copy: bool = ...): ...
    following_siblings_iter: Any
    def nearest_roots(self, copy: bool = ..., predicate: Optional[Callable] = ...): ...
    def nearest_unique_roots(self, copy: bool = ..., predicate: Optional[Callable] = ...): ...
    nearest: Any
    def nodes(self) -> None: ...
    tnodes_iter: Any
    vnodes_iter: Any
    def parents(self, copy: bool = ...): ...
    parents_iter: Any
    def self_and_parents(self, copy: bool = ...): ...
    self_and_parents_iter: Any
    def self_and_siblings(self, copy: bool = ...): ...
    self_and_siblings_iter: Any
    def self_and_subtree(self, copy: bool = ...): ...
    self_and_subtree_iter: Any
    def subtree(self, copy: bool = ...): ...
    subtree_iter: Any
    def unique_nodes(self) -> None: ...
    unique_tnodes_iter: Any
    unique_vnodes_iter: Any
    def unique_subtree(self, copy: bool = ...): ...
    subtree_with_unique_tnodes_iter: Any
    subtree_with_unique_vnodes_iter: Any
    def anyAtFileNodeName(self): ...
    def atAutoNodeName(self): ...
    def atCleanNodeName(self): ...
    def atEditNodeName(self): ...
    def atFileNodeName(self): ...
    def atNoSentinelsFileNodeName(self): ...
    def atShadowFileNodeName(self): ...
    def atSilentFileNodeName(self): ...
    def atThinFileNodeName(self): ...
    atNoSentFileNodeName: Any
    atAsisFileNodeName: Any
    def isAnyAtFileNode(self): ...
    def isAtAllNode(self): ...
    def isAtAutoNode(self): ...
    def isAtAutoRstNode(self): ...
    def isAtCleanNode(self): ...
    def isAtEditNode(self): ...
    def isAtFileNode(self): ...
    def isAtIgnoreNode(self): ...
    def isAtNoSentinelsFileNode(self): ...
    def isAtOthersNode(self): ...
    def isAtRstFileNode(self): ...
    def isAtSilentFileNode(self): ...
    def isAtShadowFileNode(self): ...
    def isAtThinFileNode(self): ...
    isAtNoSentFileNode: Any
    isAtAsisFileNode: Any
    def matchHeadline(self, pattern): ...
    def bodyString(self): ...
    def headString(self): ...
    def isDirty(self): ...
    def isMarked(self): ...
    def isOrphan(self): ...
    def isSelected(self): ...
    def isTopBitSet(self): ...
    def isVisited(self): ...
    def status(self): ...
    def childIndex(self): ...
    def directParents(self): ...
    def hasChildren(self): ...
    hasFirstChild: Any
    def numberOfChildren(self): ...
    def getBack(self): ...
    def getFirstChild(self): ...
    def getLastChild(self): ...
    def getLastNode(self): ...
    def getNext(self): ...
    def getNodeAfterTree(self): ...
    def getNthChild(self, n): ...
    def getParent(self): ...
    def getThreadBack(self): ...
    def getThreadNext(self): ...
    def getVisBack(self, c: Cmdr): ...
    def getVisNext(self, c: Cmdr): ...
    back: Any
    firstChild: Any
    lastChild: Any
    lastNode: Any
    next: Any
    nodeAfterTree: Any
    nthChild: Any
    parent: Any
    threadBack: Any
    threadNext: Any
    visBack: Any
    visNext: Any
    hasVisBack: Any
    hasVisNext: Any
    def get_UNL(self, with_file: bool = ..., with_proto: bool = ..., with_index: bool = ..., with_count: bool = ...): ...
    def hasBack(self): ...
    def hasNext(self): ...
    def hasParent(self): ...
    def hasThreadBack(self): ...
    def hasThreadNext(self): ...
    def findRootPosition(self): ...
    def isAncestorOf(self, p2: Position): ...
    def isCloned(self): ...
    def isRoot(self): ...
    def isVisible(self, c: Cmdr): ...
    def level(self): ...
    simpleLevel: Any
    def positionAfterDeletedTree(self): ...
    def textOffset(self): ...
    def isOutsideAnyAtFileTree(self): ...
    def badUnlink(self, parent_v, n, child) -> None: ...
    def moveToBack(self): ...
    def moveToFirstChild(self): ...
    def moveToLastChild(self): ...
    def moveToLastNode(self): ...
    def moveToNext(self): ...
    def moveToNodeAfterTree(self): ...
    def moveToNthChild(self, n: int): ...
    def moveToParent(self): ...
    def moveToThreadBack(self): ...
    def moveToThreadNext(self): ...
    def moveToVisBack(self, c: Cmdr): ...
    def checkVisBackLimit(self, limit, limitIsVisible, p: Position): ...
    def moveToVisNext(self, c: Cmdr): ...
    def checkVisNextLimit(self, limit, p): ...
    def safeMoveToThreadNext(self): ...
    def clone(self) -> Position: ...
    def copy(self): ...
    def copyTreeAfter(self, copyGnxs: bool = ...) -> Position: ...
    def copyTreeFromSelfTo(self, p2: Position, copyGnxs: bool = ...): ...
    def copyWithNewVnodes(self, copyMarked: bool = ...): ...
    def createNodeHierarchy(self, heads: List[str], forcecreate: bool = ...): ...
    def deleteAllChildren(self) -> None: ...
    def doDelete(self, newNode: Position = ...): ...
    def insertAfter(self) -> Position: ...
    def insertAsLastChild(self): ...
    def insertAsNthChild(self, n: int) -> Position: ...
    def insertBefore(self): ...
    def invalidOutline(self, message: str): ...
    def moveAfter(self, a: Position): ...
    def moveToFirstChildOf(self, parent: Position): ...
    def moveToLastChildOf(self, parent): ...
    def moveToNthChildOf(self, parent: Position, n: int): ...
    def moveToRoot(self): ...
    def promote(self) -> None: ...
    def validateOutlineWithParent(self, pv: Position): ...
    b: Any
    h: Any
    gnx: Any
    script: Any
    nosentinels: Any
    u: Any
    def contract(self) -> None: ...
    def expand(self) -> None: ...
    def isExpanded(self) -> bool: ...
    def clearMarked(self): ...
    def clearOrphan(self): ...
    def clearVisited(self): ...
    def initExpandedBit(self): ...
    def initMarkedBit(self): ...
    def initStatus(self, status): ...
    def setMarked(self): ...
    def setOrphan(self): ...
    def setSelected(self): ...
    def setVisited(self): ...
    def computeIcon(self): ...
    def setIcon(self) -> None: ...
    def setSelection(self, start: int, length: int): ...
    def restoreCursorAndScroll(self) -> None: ...
    def saveCursorAndScroll(self) -> None: ...
    def setBodyString(self, s: str): ...
    initBodyString: Any
    setTnodeText: Any
    scriptSetBodyString: Any
    def initHeadString(self, s: str): ...
    def setHeadString(self, s: str): ...
    def clearVisitedInTree(self) -> None: ...
    def clearAllVisitedInTree(self) -> None: ...
    def clearDirty(self) -> None: ...
    def inAtIgnoreRange(self): ...
    def setAllAncestorAtFileNodesDirty(self) -> None: ...
    def setDirty(self) -> None: ...
    def is_at_all(self): ...
    def in_at_all_tree(self): ...
    def is_at_ignore(self): ...
    def in_at_ignore_tree(self): ...
### position = Position
P = Position

class PosList(list):
    def children(self): ...
    def filter_h(self, regex, flags=...): ...
    def filter_b(self, regex, flags=...): ...
Poslist = PosList

class VNode:
    clonedBit: int
    expandedBit: int
    markedBit: int
    selectedBit: int
    topBit: int
    richTextBit: int
    visitedBit: int
    dirtyBit: int
    writeBit: int
    orphanBit: int
    children: Any
    parents: Any
    fileIndex: Any
    iconVal: int
    statusBits: int
    context: Any
    expandedPositions: Any
    insertSpot: Any
    scrollBarSpot: Any
    selectionLength: int
    selectionStart: int
    def __init__(self, context: Cmdr, gnx: Optional[str] = ...) -> None: ...
    def dumpLink(self, link): ...
    def dump(self, label: str = ...) -> None: ...
    def findAtFileName(self, names: Sequence[str], h: str = ...) -> str: ...
    def anyAtFileNodeName(self) -> str: ...
    def atAutoNodeName(self, h: Any | None = ...) -> str: ...
    def atAutoRstNodeName(self, h: Any | None = ...) -> str: ...
    def atCleanNodeName(self) -> str: ...
    def atEditNodeName(self) -> str: ...
    def atFileNodeName(self) -> str: ...
    def atNoSentinelsFileNodeName(self) -> str: ...
    def atRstFileNodeName(self) -> str: ...
    def atShadowFileNodeName(self) -> str: ...
    def atSilentFileNodeName(self) -> str: ...
    def atThinFileNodeName(self) -> str: ...
    atNoSentFileNodeName: Any
    atAsisFileNodeName: Any
    def isAtAllNode(self) -> bool: ...
    def isAnyAtFileNode(self) -> str: ...
    def isAtAutoNode(self) -> str: ...
    def isAtAutoRstNode(self) -> str: ...
    def isAtCleanNode(self) -> str: ...
    def isAtEditNode(self) -> str: ...
    def isAtFileNode(self) -> str: ...
    def isAtRstFileNode(self) -> str: ...
    def isAtNoSentinelsFileNode(self) -> str: ...
    def isAtSilentFileNode(self) -> str: ...
    def isAtShadowFileNode(self) -> str: ...
    def isAtThinFileNode(self) -> str: ...
    isAtNoSentFileNode: Any
    isAtAsisFileNode: Any
    def isAtIgnoreNode(self) -> bool: ...
    def isAtOthersNode(self) -> bool: ...
    def matchHeadline(self, pattern: str) -> bool: ...
    def copyTree(self, copyMarked: bool = ...): ...
    body_unicode_warning: bool
    def bodyString(self) -> str: ...
    getBody: Any
    def firstChild(self) -> Optional[VNode]: ...
    def hasChildren(self) -> bool: ...
    hasFirstChild: Any
    def lastChild(self) -> Optional[VNode]: ...
    def nthChild(self, n: int) -> Optional[VNode]: ...
    def numberOfChildren(self) -> int: ...
    def directParents(self) -> List[VNode]: ...
    def hasBody(self) -> bool: ...
    head_unicode_warning: bool
    def headString(self) -> str: ...
    def isNthChildOf(self, n: int, parent_v: VNode) -> bool: ...
    def isCloned(self) -> bool: ...
    def isDirty(self) -> bool: ...
    def isMarked(self) -> bool: ...
    def isOrphan(self) -> bool: ...
    def isSelected(self) -> bool: ...
    def isTopBitSet(self) -> bool: ...
    def isVisited(self) -> bool: ...
    def isWriteBit(self) -> bool: ...
    def status(self) -> int: ...
    def clearClonedBit(self) -> None: ...
    def clearDirty(self) -> None: ...
    def clearMarked(self) -> None: ...
    def clearOrphan(self) -> None: ...
    def clearVisited(self) -> None: ...
    def clearWriteBit(self) -> None: ...
    def contract(self) -> None: ...
    def expand(self) -> None: ...
    def initExpandedBit(self) -> None: ...
    def isExpanded(self): ...
    def initStatus(self, status: int): ...
    def setClonedBit(self) -> None: ...
    def initClonedBit(self, val: bool): ...
    def setDirty(self) -> None: ...
    def setMarked(self) -> None: ...
    def initMarkedBit(self) -> None: ...
    def setOrphan(self) -> None: ...
    def setSelected(self) -> None: ...
    def setVisited(self) -> None: ...
    def setWriteBit(self) -> None: ...
    def childrenModified(self) -> None: ...
    def computeIcon(self) -> int: ...
    def setIcon(self) -> None: ...
    def contentModified(self) -> None: ...
    def restoreCursorAndScroll(self) -> None: ...
    def saveCursorAndScroll(self) -> None: ...
    def setAllAncestorAtFileNodesDirty(self) -> None: ...
    unicode_warning_given: bool
    def setBodyString(self, s: Any): ...
    def setHeadString(self, s: Any): ...
    initBodyString: Any
    initHeadString: Any
    setHeadText: Any
    setTnodeText: Any
    def setSelection(self, start: int, length: int): ...
    def cloneAsNthChild(self, parent_v: VNode, n: int): ...
    def insertAsFirstChild(self): ...
    def insertAsLastChild(self): ...
    def insertAsNthChild(self, n: int): ...
    b: Any
    h: Any
    u: Any
    gnx: Any
vnode = VNode
