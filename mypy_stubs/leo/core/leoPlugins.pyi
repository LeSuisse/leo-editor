from typing import Any

optional_modules: Any

def init() -> None: ...
def registerHandler(tags, fn): ...

class TryNext(Exception):
    args: Any
    kwargs: Any
    def __init__(self, *args, **kwargs) -> None: ...

class CommandChainDispatcher:
    chain: Any
    def __init__(self, commands: Any | None = ...) -> None: ...
    def __call__(self, *args, **kw): ...
    def add(self, func, priority: int = ...): ...
    def __iter__(self): ...

class BaseLeoPlugin:
    c: Any
    commandNames: Any
    def __init__(self, tag, keywords) -> None: ...
    commandName: Any
    shortcut: Any
    handler: Any
    def setCommand(self, commandName, handler, shortcut: str = ..., pane: str = ..., verbose: bool = ...) -> None: ...
    def setMenuItem(self, menu, commandName: Any | None = ..., handler: Any | None = ...) -> None: ...
    def setButton(self, buttonText: Any | None = ..., commandName: Any | None = ..., color: Any | None = ...) -> None: ...

class LeoPluginsController:
    handlers: Any
    loadedModulesFilesDict: Any
    loadedModules: Any
    loadingModuleNameStack: Any
    signonModule: Any
    warn_on_failure: bool
    def __init__(self) -> None: ...
    def finishCreate(self) -> None: ...
    def reloadSettings(self) -> None: ...
    def on_idle(self) -> None: ...
    def doHandlersForTag(self, tag, keywords): ...
    def callTagHandler(self, bunch, tag, keywords): ...
    def doPlugins(self, tag, keywords): ...
    def getHandlersForTag(self, tags): ...
    def getHandlersForOneTag(self, tag): ...
    def getLoadedPlugins(self): ...
    def getPluginModule(self, moduleName): ...
    def isLoaded(self, fn): ...
    def printHandlers(self, c, moduleName: Any | None = ...) -> None: ...
    def printPlugins(self, c) -> None: ...
    def printPluginsInfo(self, c) -> None: ...
    def regularizeName(self, moduleOrFileName): ...
    def loadHandlers(self, tag, keys) -> None: ...
    def loadOnePlugin(self, moduleOrFileName, tag: str = ..., verbose: bool = ...): ...
    def plugin_signon(self, module_name, verbose: bool = ...) -> None: ...
    def unloadOnePlugin(self, moduleOrFileName, verbose: bool = ...) -> None: ...
    def registerExclusiveHandler(self, tags, fn) -> None: ...
    def registerOneExclusiveHandler(self, tag, fn) -> None: ...
    def registerHandler(self, tags, fn) -> None: ...
    def registerOneHandler(self, tag, fn) -> None: ...
    def unregisterHandler(self, tags, fn) -> None: ...
    def unregisterOneHandler(self, tag, fn) -> None: ...
