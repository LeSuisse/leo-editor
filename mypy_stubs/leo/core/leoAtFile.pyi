import unittest
from leo.core import leoNodes as leoNodes
from typing import Any

def cmd(name): ...

class AtFile:
    noDirective: int
    allDirective: int
    docDirective: int
    atDirective: int
    codeDirective: int
    cDirective: int
    othersDirective: int
    miscDirective: int
    rawDirective: int
    endRawDirective: int
    startVerbatim: int
    c: Any
    encoding: str
    fileCommands: Any
    errors: int
    unchangedFiles: int
    canCancelFlag: bool
    cancelFlag: bool
    yesToAll: bool
    checkPythonCodeOnWrite: bool
    runPyFlakesOnWrite: bool
    underindentEscapeString: str
    def __init__(self, c) -> None: ...
    def reloadSettings(self) -> None: ...
    def initCommonIvars(self) -> None: ...
    def initReadIvars(self, root, fileName) -> None: ...
    def initWriteIvars(self, root): ...
    def checkExternalFile(self, event: Any | None = ...) -> None: ...
    def openFileForReading(self, fromString: bool = ...): ...
    def openAtShadowFileForReading(self, fn): ...
    def read(self, root, fromString: Any | None = ...): ...
    def deleteTnodeList(self, p) -> None: ...
    def deleteUnvisitedNodes(self, root, redraw: bool = ...) -> None: ...
    def createResurrectedNodesNode(self): ...
    def defineResurrectedNodeCallback(self, r, root): ...
    def isFileLike(self, s): ...
    def readAll(self, root, force: bool = ...) -> None: ...
    def findFilesToRead(self, force, root): ...
    def readFileAtPosition(self, force, p) -> None: ...
    def readAtShadowNodes(self, p) -> None: ...
    def readOneAtAutoNode(self, p): ...
    def readOneAtEditNode(self, fn, p) -> None: ...
    def readOneAtAsisNode(self, fn, p) -> None: ...
    def readOneAtCleanNode(self, root): ...
    def dump(self, lines, tag) -> None: ...
    def read_at_clean_lines(self, fn): ...
    def write_at_clean_sentinels(self, root): ...
    def readOneAtShadowNode(self, fn, p) -> None: ...
    def importAtShadowNode(self, p): ...
    def fast_read_into_root(self, c, contents, gnx2vnode, path, root): ...
    def createImportedNode(self, root, headline): ...
    def initReadLine(self, s) -> None: ...
    def parseLeoSentinel(self, s): ...
    def readFileToUnicode(self, fileName): ...
    def openFileHelper(self, fileName): ...
    def getEncodingFromHeader(self, fileName, s): ...
    def readLine(self): ...
    def scanHeader(self, fileName, giveErrors: bool = ...): ...
    def scanFirstLines(self, firstLines): ...
    def scanHeaderForThin(self, fileName): ...
    def writeAtAutoNodes(self, event: Any | None = ...) -> None: ...
    def writeDirtyAtAutoNodes(self, event: Any | None = ...) -> None: ...
    def writeAtAutoNodesHelper(self, writeDirtyOnly: bool = ...) -> None: ...
    def writeAtShadowNodes(self, event: Any | None = ...): ...
    def writeDirtyAtShadowNodes(self, event: Any | None = ...): ...
    def writeAtShadowNodesHelper(self, writeDirtyOnly: bool = ...): ...
    def putFile(self, root, fromString: str = ..., sentinels: bool = ...) -> None: ...
    def writeAll(self, all: bool = ..., dirty: bool = ...) -> None: ...
    def findFilesToWrite(self, force): ...
    def internalWriteError(self, p) -> None: ...
    def reportEndOfWrite(self, files, all, dirty) -> None: ...
    def saveOutlineIfPossible(self) -> None: ...
    def writeAllHelper(self, p, root) -> None: ...
    def writePathChanged(self, p) -> None: ...
    def writeAtAutoContents(self, fileName, root): ...
    def asisWrite(self, root) -> None: ...
    silentWrite: Any
    def writeAsisNode(self, p) -> None: ...
    def writeMissing(self, p) -> None: ...
    def writeMissingNode(self, p) -> None: ...
    def writeOneAtAutoNode(self, p): ...
    def dispatch(self, ext, p): ...
    def writer_for_at_auto(self, root): ...
    def writer_for_ext(self, ext): ...
    def writeOneAtCleanNode(self, root) -> None: ...
    def writeOneAtEditNode(self, p): ...
    def writeOneAtFileNode(self, root) -> None: ...
    def writeOneAtNosentNode(self, root) -> None: ...
    def writeOneAtShadowNode(self, p, testing: bool = ...): ...
    def adjustTargetLanguage(self, fn) -> None: ...
    def atAsisToString(self, root): ...
    def atAutoToString(self, root): ...
    def atEditToString(self, root): ...
    def atFileToString(self, root, sentinels: bool = ...): ...
    def stringToString(self, root, s, forcePythonSentinels: bool = ..., sentinels: bool = ...): ...
    def putBody(self, p, fromString: str = ...): ...
    def putLine(self, i, kind, p, s, status) -> None: ...
    def putAtAllLine(self, s, i, p) -> None: ...
    def putAtAllBody(self, p) -> None: ...
    def putAtAllChild(self, p) -> None: ...
    def putAtOthersLine(self, s, i, p) -> None: ...
    def putAtOthersChild(self, p) -> None: ...
    def validInAtOthers(self, p): ...
    def putCodeLine(self, s, i) -> None: ...
    def putRefLine(self, s, i, n1, n2, name, p) -> None: ...
    def findReference(self, name, p): ...
    def findSectionName(self, s, i): ...
    def putAfterLastRef(self, s, start, delta) -> None: ...
    def putAfterMiddleRef(self, s, delta) -> None: ...
    def putRefAt(self, name, ref, delta) -> None: ...
    def putBlankDocLine(self) -> None: ...
    def putDocLine(self, s, i) -> None: ...
    def putEndDocLine(self) -> None: ...
    def putStartDocLine(self, s, i, kind) -> None: ...
    def nodeSentinelText(self, p): ...
    def removeCommentDelims(self, p): ...
    def putLeadInSentinel(self, s, i, j, delta) -> None: ...
    def putCloseNodeSentinel(self, p) -> None: ...
    def putOpenLeoSentinel(self, s) -> None: ...
    def putOpenNodeSentinel(self, p, inAtAll: bool = ...) -> None: ...
    def putSentinel(self, s) -> None: ...
    def addToOrphanList(self, root) -> None: ...
    def isWritable(self, path): ...
    def checkPythonCode(self, contents, fileName, root, pyflakes_errors_only: bool = ...) -> None: ...
    def checkPythonSyntax(self, p, body, supress: bool = ...): ...
    def syntaxError(self, p, body) -> None: ...
    def runPyflakes(self, root, pyflakes_errors_only): ...
    def tabNannyNode(self, p, body, suppress: bool = ...) -> None: ...
    at_directive_kind_pattern: Any
    def directiveKind4(self, s, i): ...
    def isSectionName(self, s, i): ...
    def oblank(self) -> None: ...
    def oblanks(self, n) -> None: ...
    def otabs(self, n) -> None: ...
    def onl(self) -> None: ...
    def onl_sent(self) -> None: ...
    def os(self, s) -> None: ...
    def outputStringWithLineEndings(self, s) -> None: ...
    def precheck(self, fileName, root): ...
    def putAtFirstLines(self, s) -> None: ...
    def putAtLastLines(self, s) -> None: ...
    def putDirective(self, s, i, p): ...
    def putDelims(self, directive, s, k) -> None: ...
    def putIndent(self, n, s: str = ...) -> None: ...
    def putInitialComment(self) -> None: ...
    def replaceFile(self, contents, encoding, fileName, root, ignoreBlankLines: bool = ...): ...
    def compareIgnoringBlankLines(self, s1, s2): ...
    def compareIgnoringLineEndings(self, s1, s2): ...
    def warnAboutOrphandAndIgnoredNodes(self) -> None: ...
    def writeError(self, message) -> None: ...
    def writeException(self, fileName, root) -> None: ...
    def error(self, *args) -> None: ...
    def printError(self, *args) -> None: ...
    def exception(self, message) -> None: ...
    def chmod(self, fileName, mode) -> None: ...
    def remove(self, fileName): ...
    def stat(self, fileName): ...
    def getPathUa(self, p): ...
    def setPathUa(self, p, path) -> None: ...
    def parseUnderindentTag(self, s): ...
    def promptForDangerousWrite(self, fileName, message: Any | None = ...): ...
    def rememberReadPath(self, fn, p) -> None: ...
    def scanAllDirectives(self, p): ...
    def shouldPromptForDangerousWrite(self, fn, p): ...
    def warnOnReadOnlyFile(self, fn) -> None: ...
atFile = AtFile

class FastAtRead:
    c: Any
    gnx2vnode: Any
    path: Any
    root: Any
    VNode: Any
    test: Any
    def __init__(self, c, gnx2vnode, test: bool = ..., TestVNode: Any | None = ...) -> None: ...
    def get_patterns(self, delims): ...
    def post_pass(self, gnx2body, gnx2vnode, root_v) -> None: ...
    header_pattern: Any
    def scan_header(self, lines): ...
    def scan_lines(self, delims, first_lines, lines, path, start): ...
    def read_into_root(self, contents, path, root): ...

class TestAtFile(unittest.TestCase):
    def bridge(self): ...
    def temp_dir(self): ...
    def temp_file(self): ...
    def test_save_after_external_file_rename(self) -> None: ...
    def test_bug_1889(self) -> None: ...
