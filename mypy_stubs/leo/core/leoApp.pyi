import io
from leo.core import leoExternalFiles as leoExternalFiles
from typing import Any

StringIO = io.StringIO

def cmd(name): ...

class IdleTimeManager:
    callback_list: Any
    timer: Any
    def __init__(self) -> None: ...
    def add_callback(self, callback) -> None: ...
    on_idle_count: int
    def on_idle(self, timer) -> None: ...
    def start(self) -> None: ...

class LeoApp:
    batchMode: bool
    debug: Any
    diff: bool
    enablePlugins: bool
    failFast: bool
    gui: Any
    guiArgName: Any
    ipython_inited: bool
    isTheme: bool
    listen_to_log_flag: bool
    qt_use_tabs: bool
    loaded_session: bool
    silentMode: bool
    start_fullscreen: bool
    start_maximized: bool
    start_minimized: bool
    trace_binding: Any
    trace_setting: Any
    translateToUpperCase: bool
    useIpython: bool
    use_psyco: bool
    use_splash_screen: bool
    count: int
    debug_dict: Any
    disable_redraw: bool
    disableSave: bool
    idle_timers: Any
    log_listener: Any
    positions: int
    scanErrors: int
    structure_errors: int
    statsDict: Any
    statsLockout: bool
    validate_outline: bool
    menuWarningsGiven: bool
    unicodeErrorGiven: bool
    extensionsDir: Any
    globalConfigDir: Any
    globalOpenDir: Any
    homeDir: Any
    homeLeoDir: Any
    leoEditorDir: Any
    loadDir: Any
    machineDir: Any
    atAutoNames: Any
    atFileNames: Any
    globalKillBuffer: Any
    globalRegisters: Any
    leoID: Any
    loadedThemes: Any
    lossage: Any
    paste_c: Any
    spellDict: Any
    numberOfUntitledWindows: int
    windowList: Any
    realMenuNameDict: Any
    backgroundProcessManager: Any
    commander_cacher: Any
    commander_db: Any
    config: Any
    db: Any
    externalFilesController: Any
    global_cacher: Any
    idleTimeManager: Any
    ipk: Any
    loadManager: Any
    nodeIndices: Any
    pluginsController: Any
    sessionManager: Any
    commandName: Any
    commandInterruptFlag: bool
    atAutoWritersDict: Any
    writersDispatchDict: Any
    atAutoDict: Any
    classDispatchDict: Any
    already_open_files: Any
    dragging: bool
    inBridge: bool
    inScript: bool
    initing: bool
    initComplete: bool
    initStyleFlag: bool
    killed: bool
    openingSettingsFile: bool
    preReadFlag: bool
    quitting: bool
    restarting: bool
    reverting: bool
    syntax_error_files: Any
    log: Any
    logInited: bool
    logIsLocked: bool
    logWaiting: Any
    printWaiting: Any
    signon: str
    signon1: str
    signon2: str
    theme_directory: Any
    nullGui: Any
    nullLog: Any
    hookError: bool
    hookFunction: Any
    idle_time_hooks_enabled: bool
    searchDict: Any
    scriptDict: Any
    scriptResult: Any
    permanentScriptDict: Any
    isExternalUnitTest: bool
    runningAllUnitTests: bool
    suppressImportChecks: bool
    unitTestDict: Any
    unitTestGui: Any
    unitTesting: bool
    unitTestMenusDict: Any
    def __init__(self) -> None: ...
    delegate_language_dict: Any
    def define_delegate_language_dict(self) -> None: ...
    extension_dict: Any
    extra_extension_dict: Any
    def define_extension_dict(self) -> None: ...
    prolog_prefix_string: str
    prolog_postfix_string: str
    prolog_namespace_string: str
    def define_global_constants(self) -> None: ...
    language_delims_dict: Any
    def define_language_delims_dict(self) -> None: ...
    language_extension_dict: Any
    def define_language_extension_dict(self) -> None: ...
    def init_at_auto_names(self) -> None: ...
    def init_at_file_names(self) -> None: ...
    def computeSignon(self) -> None: ...
    def printSignon(self, verbose: bool = ...) -> None: ...
    def createCursesGui(self, fileName: str = ..., verbose: bool = ...) -> None: ...
    def createBrowserGui(self, fileName: str = ..., verbose: bool = ...) -> None: ...
    def createDefaultGui(self, fileName: str = ..., verbose: bool = ...) -> None: ...
    def createNullGuiWithScript(self, script: Any | None = ...) -> None: ...
    def createQtGui(self, fileName: str = ..., verbose: bool = ...) -> None: ...
    def createTextGui(self, fileName: str = ..., verbose: bool = ...) -> None: ...
    def createWxGui(self, fileName: str = ..., verbose: bool = ...) -> None: ...
    def setGlobalDb(self) -> None: ...
    def setLeoID(self, useDialog: bool = ..., verbose: bool = ...): ...
    def cleanLeoID(self, id_, tag): ...
    def setIDFromSys(self, verbose) -> None: ...
    def setIDFromFile(self, verbose) -> None: ...
    def setIDFromEnv(self, verbose) -> None: ...
    def setIdFromDialog(self) -> None: ...
    def setIDFile(self) -> None: ...
    def setLog(self, log) -> None: ...
    def lockLog(self) -> None: ...
    def unlockLog(self) -> None: ...
    def writeWaitingLog(self, c) -> None: ...
    @property
    def c(self): ...
    def closeLeoWindow(self, frame, new_c: Any | None = ..., finish_quit: bool = ...): ...
    def destroyAllOpenWithFiles(self) -> None: ...
    def destroyWindow(self, frame) -> None: ...
    def finishQuit(self) -> None: ...
    def forceShutdown(self) -> None: ...
    def onQuit(self, event: Any | None = ...) -> None: ...
    def commanders(self): ...
    def checkForOpenFile(self, c, fn) -> None: ...
    def forgetOpenFile(self, fn, force: bool = ...) -> None: ...
    def rememberOpenFile(self, fn) -> None: ...
    def runAlreadyOpenDialog(self, c) -> None: ...
    def scanner_for_at_auto(self, c, p, **kwargs): ...
    def scanner_for_ext(self, c, ext, **kwargs): ...
    def listenToLog(self, event: Any | None = ...) -> None: ...
    def makeAllBindings(self) -> None: ...
    def newCommander(self, fileName, gui: Any | None = ..., parentFrame: Any | None = ..., previousSettings: Any | None = ..., relativeFileName: Any | None = ...): ...
    def selectLeoWindow(self, c) -> None: ...

class LoadManager:
    globalSettingsDict: Any
    globalBindingsDict: Any
    files: Any
    options: Any
    old_argv: Any
    more_cmdline_files: bool
    theme_c: Any
    def __init__(self) -> None: ...
    def completeFileName(self, fileName): ...
    def computeLeoSettingsPath(self): ...
    def computeMyLeoSettingsPath(self): ...
    def computeStandardDirectories(self) -> None: ...
    def computeGlobalConfigDir(self): ...
    def computeHomeDir(self): ...
    def computeHomeLeoDir(self): ...
    def computeLeoDir(self): ...
    def computeLoadDir(self): ...
    def computeMachineName(self): ...
    def computeThemeDirectories(self): ...
    def computeThemeFilePath(self): ...
    def resolve_theme_path(self, fn, tag): ...
    def computeWorkbookFileName(self): ...
    def reportDirectories(self) -> None: ...
    def computeBindingLetter(self, c, path): ...
    def computeLocalSettings(self, c, settings_d, bindings_d, localFlag): ...
    def createDefaultSettingsDicts(self): ...
    def createSettingsDicts(self, c, localFlag): ...
    def getPreviousSettings(self, fn): ...
    def mergeShortcutsDicts(self, c, old_d, new_d, localFlag): ...
    def checkForDuplicateShortcuts(self, c, d) -> None: ...
    def invert(self, d): ...
    def uninvert(self, d): ...
    def openSettingsFile(self, fn): ...
    def readGlobalSettingsFiles(self) -> None: ...
    def traceSettingsDict(self, d, verbose: bool = ...) -> None: ...
    def traceShortcutsDict(self, d, verbose: bool = ...) -> None: ...
    def load(self, fileName: Any | None = ..., pymacs: Any | None = ...) -> None: ...
    def doDiff(self) -> None: ...
    def doPostPluginsInit(self): ...
    def make_screen_shot(self, fn) -> None: ...
    def openEmptyWorkBook(self): ...
    def doPrePluginsInit(self, fileName, pymacs) -> None: ...
    def createAllImporterData(self) -> None: ...
    def createImporterData(self) -> None: ...
    def parse_importer_dict(self, sfn, m) -> None: ...
    def createWritersData(self) -> None: ...
    def parse_writer_dict(self, sfn, m) -> None: ...
    def createGui(self, pymacs) -> None: ...
    def createSpecialGui(self, gui, pymacs, script, windowFlag) -> None: ...
    def adjustSysPath(self) -> None: ...
    def getDefaultFile(self): ...
    def initApp(self, verbose) -> None: ...
    def scanOptions(self, fileName, pymacs): ...
    def addOptionsToParser(self, parser, trace_m) -> None: ...
    def computeFilesList(self, options, fileName): ...
    def doGuiOption(self, options): ...
    def doLoadTypeOption(self, options): ...
    def doScreenShotOption(self, options): ...
    def doScriptOption(self, options, parser): ...
    def doSimpleOptions(self, options, trace_m) -> None: ...
    def doWindowSpotOption(self, options): ...
    def doWindowSizeOption(self, options): ...
    kind: Any
    def setStdStreams(self) -> None: ...
    def isValidPython(self): ...
    def loadLocalFile(self, fn, gui, old_c): ...
    def openFileByName(self, fn, gui, old_c, previousSettings): ...
    def createMenu(self, c, fn: Any | None = ...) -> None: ...
    def findOpenFile(self, fn): ...
    def finishOpen(self, c) -> None: ...
    def initWrapperLeoFile(self, c, fn): ...
    def isLeoFile(self, fn): ...
    def isZippedFile(self, fn): ...
    def openAnyLeoFile(self, fn): ...
    def openLeoFile(self, fn): ...
    def openZipFile(self, fn): ...
    def readOpenedLeoFile(self, c, fn, readAtFileNodesFlag, theFile): ...
    def revertCommander(self, c) -> None: ...

class PreviousSettings:
    settingsDict: Any
    shortcutsDict: Any
    def __init__(self, settingsDict, shortcutsDict) -> None: ...

class RecentFilesManager:
    edit_headline: str
    groupedMenus: Any
    recentFiles: Any
    recentFilesMenuName: str
    recentFileMessageWritten: bool
    write_recent_files_as_needed: bool
    def __init__(self) -> None: ...
    def appendToRecentFiles(self, files): ...
    def cleanRecentFiles(self, c) -> None: ...
    def demangleRecentFiles(self, c, data) -> None: ...
    def clearRecentFiles(self, c) -> None: ...
    def createRecentFilesMenuItems(self, c) -> None: ...
    def editRecentFiles(self, c) -> None: ...
    def getRecentFiles(self): ...
    def getRecentFilesTable(self): ...
    def readRecentFiles(self, localConfigFile) -> None: ...
    def createRecentFiles(self) -> None: ...
    def readRecentFilesFile(self, path): ...
    def sanitize(self, name): ...
    def setRecentFiles(self, files) -> None: ...
    def sortRecentFiles(self, c): ...
    def updateRecentFiles(self, fileName): ...
    def writeEditedRecentFiles(self, c) -> None: ...
    def writeRecentFilesFile(self, c, force: bool = ...) -> None: ...
    def writeRecentFilesFileHelper(self, fileName): ...

def ctrlClickAtCursor(event) -> None: ...
def demangle_recent_files_command(event) -> None: ...
def disable_idle_time_events(event) -> None: ...
def enable_idle_time_events(event) -> None: ...
def toggle_idle_time_events(event) -> None: ...
def join_leo_irc(event: Any | None = ...) -> None: ...
def openUrl(event: Any | None = ...) -> None: ...
def openUrlUnderCursor(event: Any | None = ...): ...
