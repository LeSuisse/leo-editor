from leo.core import leoGlobals as g
from leo.core.leoCommands import Commands as Cmdr
from leo.plugins.mod_scripting import build_rclick_tree as build_rclick_tree
from typing import Any, Dict, Tuple, Union

class ParserBaseClass:
    basic_types: Any
    control_types: Any
    settingsDict: Dict[str, Tuple[str, Union[g.TypedDict, g.GeneralSetting]]]
    c: Any
    clipBoard: Any
    localFlag: Any
    shortcutsDict: Any
    openWithList: Any
    dispatchDict: Any
    debug_count: int
    def __init__(self, c, localFlag) -> None: ...
    def computeModeName(self, name): ...
    def createModeCommand(self, modeName, name, modeDict) -> None: ...
    def error(self, s) -> None: ...
    def doBool(self, p, kind, name, val) -> None: ...
    def doButtons(self, p, kind, name, val) -> None: ...
    def doColor(self, p, kind, name, val) -> None: ...
    def doCommands(self, p, kind, name, val) -> None: ...
    def doData(self, p, kind, name, val) -> None: ...
    def doOutlineData(self, p, kind, name, val): ...
    def getOutlineDataHelper(self, p): ...
    def doDirectory(self, p, kind, name, val) -> None: ...
    doPath: Any
    def doEnabledPlugins(self, p, kind, name, val) -> None: ...
    def doFloat(self, p, kind, name, val) -> None: ...
    def doFont(self, p, kind, name, val) -> None: ...
    def doIfEnv(self, p, kind, name, val): ...
    def doIfHostname(self, p, kind, name, val): ...
    def doIfPlatform(self, p, kind, name, val): ...
    def doIgnore(self, p, kind, name, val): ...
    def doInt(self, p, kind, name, val) -> None: ...
    def doInts(self, p, kind, name, val) -> None: ...
    def doMenuat(self, p, kind, name, val) -> None: ...
    def getName(self, val, val2: Any | None = ...): ...
    def dumpMenuTree(self, aList, level: int = ..., path: str = ...) -> None: ...
    def patchMenuTree(self, orig, targetPath, path: str = ...): ...
    def doMenus(self, p, kind, name, val) -> None: ...
    def doItems(self, p, aList) -> None: ...
    def doMode(self, p, kind, name, val) -> None: ...
    def doOpenWith(self, p, kind, name, val) -> None: ...
    def doPopup(self, p, kind, name, val) -> None: ...
    def doPopupItems(self, p, aList) -> None: ...
    def doRatio(self, p, kind, name, val) -> None: ...
    def doShortcuts(self, p, kind, junk_name, junk_val, s: Any | None = ...) -> None: ...
    def doOneShortcut(self, bi, commandName, p) -> None: ...
    def doString(self, p, kind, name, val) -> None: ...
    def doStrings(self, p, kind, name, val) -> None: ...
    def munge(self, s): ...
    def oops(self) -> None: ...
    def parseFont(self, p): ...
    def parseFontLine(self, line, d) -> None: ...
    def parseHeadline(self, s): ...
    def parseOpenWith(self, p): ...
    def parseOpenWithLine(self, line, d) -> None: ...
    def parseShortcutLine(self, kind, s): ...
    def set(self, p, kind, name, val) -> None: ...
    def traverse(self): ...
    def valueError(self, p, kind, name, val) -> None: ...
    def visitNode(self, p) -> None: ...

class ActiveSettingsOutline:
    c: Any
    def __init__(self, c) -> None: ...
    commander: Any
    def start(self) -> None: ...
    commanders: Any
    def create_commanders_list(self) -> None: ...
    local_c: Any
    def load_hidden_commanders(self) -> None: ...
    def new_commander(self): ...
    def create_outline(self) -> None: ...
    def legend(self): ...
    def create_inner_outline(self, c, kind, root) -> None: ...
    parents: Any
    level: Any
    def create_unified_settings(self, kind, root, settings_root) -> None: ...
    def add(self, p, h: Any | None = ...) -> None: ...
    def clean(self, root) -> None: ...
    def clean_node(self, p) -> None: ...
    def filter_settings(self, target_kind): ...

class GlobalConfigManager:
    defaultBodyFontSize: int
    defaultLogFontSize: int
    defaultMenuFontSize: int
    defaultTreeFontSize: int
    defaultsDict: Any
    defaultsData: Any
    encodingIvarsDict: Any
    encodingIvarsData: Any
    ivarsDict: Any
    ivarsData: Any
    at_root_bodies_start_in_doc_mode: bool
    default_derived_file_encoding: str
    output_newline: str
    redirect_execute_script_output_to_log_pane: bool
    relative_path_base_directory: str
    use_plugins: bool
    create_nonexistent_directories: bool
    atCommonButtonsList: Any
    atCommonCommandsList: Any
    atLocalButtonsList: Any
    atLocalCommandsList: Any
    buttonsFileName: str
    configsExist: bool
    unitTestDict: Any
    defaultFont: Any
    defaultFontFamily: Any
    enabledPluginsFileName: Any
    enabledPluginsString: str
    inited: bool
    menusList: Any
    menusFileName: str
    modeCommandsDict: Any
    panes: Any
    sc: Any
    tree: Any
    def __init__(self) -> None: ...
    dictList: Any
    def initDicts(self) -> None: ...
    def initIvarsFromSettings(self) -> None: ...
    def initEncoding(self, key) -> None: ...
    def initIvar(self, key) -> None: ...
    recentFiles: Any
    def initRecentFiles(self) -> None: ...
    def setIvarsFromSettings(self, c) -> None: ...
    def canonicalizeSettingName(self, name): ...
    munge: Any
    def exists(self, setting, kind): ...
    def get(self, setting, kind): ...
    def getValFromDict(self, d, setting, requestedType, warn: bool = ...): ...
    def typesMatch(self, type1, type2): ...
    def getAbbrevDict(self): ...
    def getBool(self, setting, default: Any | None = ...): ...
    def getButtons(self): ...
    def getColor(self, setting): ...
    def getCommonAtCommands(self): ...
    def getData(self, setting, strip_comments: bool = ..., strip_data: bool = ...): ...
    def getOutlineData(self, setting): ...
    def getDirectory(self, setting): ...
    def getEnabledPlugins(self): ...
    def getFloat(self, setting): ...
    def getFontFromParams(self, family, size, slant, weight, defaultSize: int = ...): ...
    def getInt(self, setting): ...
    def getLanguage(self, setting): ...
    def getMenusList(self): ...
    def getOpenWith(self): ...
    def getRatio(self, setting): ...
    def getRecentFiles(self): ...
    def getString(self, setting): ...
    def config_iter(self, c) -> None: ...
    def valueInMyLeoSettings(self, settingName): ...

class LocalConfigManager:
    c: Any
    settingsDict: Any
    shortcutsDict: Any
    default_derived_file_encoding: Any
    redirect_execute_script_output_to_log_pane: Any
    defaultBodyFontSize: Any
    defaultLogFontSize: Any
    defaultMenuFontSize: Any
    defaultTreeFontSize: Any
    def __init__(self, c, previousSettings: Any | None = ...) -> None: ...
    def initEncoding(self, key) -> None: ...
    def initIvar(self, key) -> None: ...
    def createActivesSettingsOutline(self) -> None: ...
    def getSource(self, setting): ...
    def findSettingsPosition(self, setting): ...
    def settingsRoot(self): ...
    def get(self, setting, kind): ...
    def getValFromDict(self, d, setting, requestedType, warn: bool = ...): ...
    def typesMatch(self, type1, type2): ...
    def getAbbrevDict(self): ...
    def getBool(self, setting, default: Any | None = ...): ...
    def getColor(self, setting): ...
    def getData(self, setting, strip_comments: bool = ..., strip_data: bool = ...): ...
    def getOutlineData(self, setting): ...
    def getDirectory(self, setting): ...
    def getFloat(self, setting): ...
    def getFontFromParams(self, family, size, slant, weight, defaultSize: int = ...): ...
    def getInt(self, setting): ...
    def getLanguage(self, setting): ...
    def getMenusList(self): ...
    def getOpenWith(self): ...
    def getRatio(self, setting): ...
    def getSettingSource(self, setting): ...
    no_menu_dict: Dict[str, Cmdr]
    def getShortcut(self, commandName): ...
    def getString(self, setting): ...
    def getButtons(self): ...
    def getCommands(self): ...
    def getEnabledPlugins(self): ...
    def getRecentFiles(self): ...
    def isLocalSetting(self, setting, kind): ...
    def isLocalSettingsFile(self): ...
    def exists(self, c, setting, kind): ...
    def printSettings(self) -> None: ...
    def set(self, p, kind, name, val, warn: bool = ...) -> None: ...
    def settingIsActiveInPath(self, gs, target_path): ...
    def setUserSetting(self, setting, value) -> None: ...

class SettingsTreeParser(ParserBaseClass):
    def visitNode(self, p): ...

def parseFont(b): ...
