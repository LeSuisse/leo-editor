# -*- coding: utf-8 -*-
#@+leo-ver=5-thin
#@+node:ekr.20210909161504.1: * @file ../unittests/core/test_plugins.py
#@@first
"""Tests Leo's plugins, not leoPlugins.py"""
import glob
import unittest
from leo.core import leoGlobals as g
from leo.core.leoTest2 import LeoUnitTest
assert g

#@+others
#@+node:ekr.20210909161504.2: ** class TestPlugin (LeoUnitTest)
class TestPlugin(LeoUnitTest):
    #@+others
    #@+node:ekr.20210909161328.7: *3* TestPlugin.__init__ & shortDescription
    def __init__ (self, c, path):
        super().__init__()
        self.c = c
        self.path = path

    def shortDescription (self):
        return f"TestPlugins: {g.shortFileName(self.path)}"
    #@+node:ekr.20210909161328.9: *3* TestPlugin.runTest
    def runTest(self):
        path = self.path
        path,base = g.os_path_split(path)
        fn = base[:-3]
        ignore = (
            # Read error.
            'chinese_menu',
            # Unfinished/obsolute gui's.
            'gtkDialogs','gtkGui','ironPython','ironPythonGui',
            'swing_gui','tkGui','wxGui','temacs',
            # Tk-only.
            'ipython',
            # Imports path & win32clipboard.
            'at_view',
            # Experimental.
            'stickynotes_plus',
            # Generated by unit tests.
            'pluginsTest',
            # Imports non-standard modules.
            'interact',         # import pexpect
            'jinjarender',      # import jinga2
            'leofeeds',         # import feedparser
        )
        if fn in ignore:
            return
        if 1:
            # Just check the syntax.  Doesn't pollute other unit tests.
            self.check_syntax(self.path)
            # with open(self.path,'r') as f:
                # s = f.read()
            # assert c.testManager.checkFileSyntax(fn,s,reraise=False,suppress=False)
        else: # Good for initial tests, but pollutes all other unit tests.
            exec(f"import leo.plugins.{fn}")
        
    #@+node:ekr.20210909162147.1: *3* TestPlugin.check_syntax
    def check_syntax(self, filename):
        with open(self.path, 'r') as f:
            s = f.read()
        try:
            s = s.replace('\r', '')
            tree = compile(s + '\n', filename, 'exec')
            # #1454: To suppress -Wd ResourceWarning.
            del tree
            return
        except SyntaxError:
            g.print_exception(full=True, color="black")
            self.fail(f"syntax error in: {filename}")
        except Exception:
            self.fail(f"unexpected error in: {filename}")
    #@+node:ekr.20210909161328.4: *3* TestPlugin.test_suite_import_or_test_syntax_of_all_plugins
    def test_suite_test_all_plugins(self):
        # Imports all plugins or just tests their syntax, depending on a switch in PluginTestCase.runTest.
        c = self.c
        g.trace('********')
        # Compute the list of plugin files.
        paths = (
            g.os_path_join(g.app.loadDir, '..', 'plugins', '*.py'),
            # g.os_path_join(g.app.loadDir,'..', 'plugins', 'examples', '*.py'),
        )
        all_files = []
        for path in paths:
            plugins = g.os_path_abspath(g.os_path_join(path))
            files = glob.glob(plugins)
            files = [g.os_path_abspath(f) for f in files]
            all_files.extend(files)
        # Create the suite.
        suite = unittest.TestSuite()
        # Add tests.
        for fn in sorted(all_files):
            test = TestPlugin(c, fn)
            suite.addTest(test)
        # Run the suite!
        result = unittest.TestResult()
        suite.run(result)
    #@-others
#@-others
#@-leo
