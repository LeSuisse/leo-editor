#@+leo-ver=5-thin
#@+node:bob.20170311143430.3: * @file doc/doc.txt
#@@language plain
#@+others
#@+node:bob.20170311143456.1: ** To Do
#@+node:bob.20240105084132.1: *3* Script file name?
s1 = set([1, 2, 3])
g.es(type(s1), s1)
#@+node:bob.20240107140405.1: *4* Get a string configuration parameter
#@@language python

path = c.config.getString('script-file-path')
g.es(path)
#@+node:bob.20240107140431.1: *5* Output
/pri/tmp/xxx.bash
#@+node:bob.20240107140540.1: *4* List Settings Dictionary Keys
#@@language python

keys = sorted(c.config.settingsDict.keys())
for keyX in keys:
    g.es(f'{keyX} : {c.config.settingsDict[keyX]}')
#@+node:bob.20240107140622.1: *5* Output - 661 keys
abbreviations : GS: path: leoSettings.leo source: @data abbreviations kind: data val: ["# Comments lines (lines starting with '#') are ignored.\n", '# Non-comment lines should have the form::\n', '#\n', '#    name=definition\n', '\n', '# Definitions in @data abbreviation nodes override definitions in @data\n', '# global-abbreviation nodes.\n', '\n', '# Typically you would define @data global-abbreviation nodes\n', '# in myLeoSettings.leo and @data abbreviation nodes in local files.\n', '\n', '# Abbreviations of Greek letters:\n', '\n', '#  alph;;=α\n', '#  beta;;=β\n', '#  delt;;=δ\n', '#  gam;;=γ\n', '#  mu;;=μ\n', '#  pi;;=π\n', '#  sig;;=σ\n', '#  Delt;;=Δ\n', '#  Sig;;=Σ\n', '#  pm;;=±\n', '\n', '#  Abbreviations for currency symbols.\n', '\n', '#  cent;;=¢\n', '#  euro;;=€\n', '#  pound;;=£\n', '#  yen;;=¥\n', '\n', '# Abbreviations for other symbols.\n', '\n', '#  .;;=…\n', '#  3fourths;;=¾\n', '#  because;;=∵\n', '#  bullet;;=•\n', '#  cross;;=✖\n', '#  degree;;=°\n', '#  divide;;=÷\n', '#  ergo;;=∴\n', '#  exists;;=∃\n', '#  half;;=½\n', '#  infinity;;=∞\n', '#  quarter;;=¼\n', '#  tick;;=✔\n']
abbreviationsnextplaceholder : GS: path: leoSettings.leo source: @string abbreviations-next-placeholder = ,, kind: string val: ,,
abbreviationsplaceend : GS: path: leoSettings.leo source: @string abbreviations-place-end = |> kind: string val: |>
abbreviationsplacestart : GS: path: leoSettings.leo source: @string abbreviations-place-start = <| kind: string val: <|
abbreviationssubstend : GS: path: leoSettings.leo source: @string abbreviations-subst-end = }|} kind: string val: }|}
abbreviationssubstenv : GS: path: leoSettings.leo source: @data abbreviations-subst-env kind: data val: ['# EKR 2013/09/25: revised docstring and improved get_user().\n', '# EKR 2015/04/28: added insert() and do(). Split this node into pieces.\n', '\n', '@language python\n', '\n', '"""\n', '\n', '**Important**: scripting abbreviations are in effect only if the following\n', 'setting is in effect::\n', '    \n', '    @bool enable-abbreviations = True\n', '    \n', 'and one (or both) of the following are in effect::\n', '    \n', '    @bool scripting-at-script-nodes = True\n', '    @bool scripting-abbreviations = True\n', '\n', 'This node defines the environment in which substitution scripts are\n', 'evaluated. For example, if this node contains `import time`, then an\n', 'abbreviation like::\n', '\n', '    date;;={|{import time;x=time.asctime()}|}\n', '\n', 'can be written more simply as::\n', '\n', '    date;;={|{x=time.asctime()}|}\n', '\n', 'The environment will contain the following pre-defined values:\n', '\n', '- `c` and `g`, as usual.\n', '- `values`: a dict. see ask() and get() below.\n', '- `_abr`, the abbreviation being expanded.\n', '\n', '"""\n', '\n', '# helpful imports\n', 'import os\n', 'import sys\n', 'import time\n', 'import datetime\n', '\n', '# globals\n', 'try:\n', '    import pwd  # for full name of user in templates\n', 'except:\n', '    pwd = None\n', 'try:\n', "    _user_name = os.environ['LOGNAME']\n", '    if pwd and _user_name:\n', "        _user_name = pwd.getpwnam(_user_name).pw_gecos.rstrip(',')\n", 'except KeyError:\n', '    _user_name = None\n', 'def ask(s, default="", prompt=None):\n', '    """Ask, always, for a value for template field \'s\'"""\n', '    x = g.app.gui.runAskOkCancelStringDialog(\n', '        c,\n', '        title = s,\n', '        message = prompt or s,\n', '        default = default,\n', '    )\n', '    _values[s] = x\n', "    return x or ''\n", 'def close_xml():\n', '    """simple, but usually right, code to close open XML tags"""\n', '    tCurPosition = c.frame.body.widget.textCursor().position()    \n', '    i = tCurPosition - len(_abr)\n', '    b = c.p.b\n', '    skips = 1\n', '    while i and skips:\n', '        s = []\n', "        while i and b[i] != '>':\n", '            i -= 1\n', '        i -= 1\n', "        while i and (b[i] != '<' or (s and b[i] == '<' and s[0] == '/')):\n", '            s[0:0] = b[i]\n', '            i -= 1\n', "            if s and s[0] == '<' and len(s) > 1 and s[1] == '/':\n", '                skips += 1  # a closed tag indicates search one more tag\n', '        skips -= 1\n', "    s = ''.join([i if i.isalpha() else ' ' for i in s])\n", '    if s.strip():\n', '        return "</%s>" % (s.split(None, 1)[0])\n', '    else:\n', '        return "</"\n', 'def django_tag():\n', '    """expand {block content} to \n', '       {% block content %}\\n{% end_block content %} with proper\n', '       indentation (for Django web templates)"""\n', '    from leo.core.leoQt import QtCore\n', '    widget = c.frame.body.widget\n', '    scrollPosition = widget.getYScrollPosition()\n', '    textCursor = widget.textCursor()\n', '    tCurPosition = textCursor.position()  \n', '    i = tCurPosition - len(_abr)\n', '    b = c.p.b\n', '    s = []\n', "    while i and b[i] != '{':\n", '        s[0:0] = b[i]\n', '        i -= 1\n', '    start = i\n', "    s = ''.join(s)\n", '    s_close = s.split()[0]\n', '    indent = 0\n', "    while i and b[i] != '\\n':\n", '        indent += 1\n', '        i -= 1\n', '    if indent:\n', '        indent -= 1\n', '    def later(c=c, indent=indent, b=b, s=s, _abr=_abr):\n', '        offset = len("%s{%% %s %%}\\n    %s" % (b[:start], s, \' \'*indent))\n', '        c.p.b = "%s{%% %s %%}\\n    %s\\n%s{%% end%s %%}%s" % (\n', "            b[:start], s, ' '*indent, ' '*indent, s_close, b[start+len(s)+len(_abr):]\n", '        )\n', '        widget.setYScrollPosition(scrollPosition)\n', '        textCursor.setPosition(offset)\n', '        widget.setTextCursor(textCursor)\n', '        c.bodyWantsFocusNow()\n', '        \n', '    QtCore.QTimer.singleShot(0, later)\n', '\n', 'def do(commandName):\n', "    '''Execute a command by name.'''\n", '    c.k.simulateCommand(commandName,event=None)\n', 'def file_name():\n', '    """dafault name of this file if implied by headline"""\n', '    if c.p.h.endswith(".py"):\n', '        return g.os_path_split(c.p.h)[-1]\n', '    return ".py"\n', "def get(s, default='', prompt=''):\n", '    """Ask for template field \'s\' only if not already known"""\n', '    if s in _values:\n', '        return _values[s]\n', '    else:\n', "        return ask(s, default=default, prompt=prompt) or ''\n", 'def get_language():\n', "    '''Get a language name, and set name and cap_name in the namespace.'''\n", '    x = g.app.gui.runAskOkCancelStringDialog(\n', '        c,\n', "        title = 'Language',\n", "        message = 'Enter language name. Case does not matter.',\n", '    )\n', "    # g.trace('===== x:', repr(x))\n", "    if not x: x = 'no-language!'\n", "    _values = c.abbrev_subst_env['name'] = x.lower()\n", "    _values = c.abbrev_subst_env['cap_name'] = x.capitalize()\n", '    return x.lower()\n', 'def html_tag():\n', '    """expand <tag> to \n', '       <tag>\\n</tag> with proper indendation"""\n', '    from leo.core.leoQt import QtCore\n', '    widget = c.frame.body.widget\n', '    scrollPosition = widget.getYScrollPosition()\n', '    textCursor = widget.textCursor()\n', '    tCurPosition = textCursor.position()  \n', '    i = tCurPosition - len(_abr)\n', '    b = c.p.b\n', '    s = []\n', "    while i and b[i] != '<':\n", '        s[0:0] = b[i]\n', '        i -= 1\n', '    start = i\n', "    s = ''.join(s)\n", '    s_close = s.split()[0]\n', '    indent = 0\n', "    while i and b[i] != '\\n':\n", '        indent += 1\n', '        i -= 1\n', '    if indent:\n', '        indent -= 1\n', '    def later(c=c, indent=indent, b=b, s=s, _abr=_abr):\n', '        offset = len("%s<%s>\\n%s    " % (b[:start], s, \' \'*indent))\n', '        c.p.b = "%s<%s>\\n%s    \\n%s</%s>%s" % (\n', "            b[:start], s, ' '*indent, ' '*indent, s_close, b[start+len(s)+len(_abr):]\n", '        )\n', '        widget.setYScrollPosition(scrollPosition)\n', '        textCursor.setPosition(offset)\n', '        widget.setTextCursor(textCursor)\n', '        c.bodyWantsFocusNow()\n', '        \n', '    QtCore.QTimer.singleShot(0, later)\n', 'def in_class():  # return "self, " if in a class definition\n', '    """return "self" if in a class definition (from headline)"""\n', '    for nd in c.p.self_and_parents_iter():\n', "        if nd.h.startswith('class'):\n", '            return "self, "\n', '    return ""\n', 'def insert(s):\n', "    '''Insert the string s in the current widget.'''\n", '    try:\n', '        w = c.abbrevCommands.w\n', '        if w:\n', '            i = w.getInsertPoint()\n', '            w.insert(i,s)\n', '    except AttributeError:\n', '        pass\n', 'def long_word():\n', '    """example of an abbreviation substitution which inspects\n', '    the current content of the body text, see `;;;` example\n', '    in @@data abbreviations-examples\n', '    """\n', '    words = c.p.b.split()\n', '    tCurPosition = c.frame.body.widget.textCursor().position() \n', '    i = tCurPosition - len(_abr)\n', '    b = c.p.b\n', '    s = []\n', '    while i and b[i].isalpha():\n', '        s[0:0] = b[i]\n', '        i -= 1\n', "    s = ''.join(s)\n", '    for i in words:\n', '        if i.startswith(s) and i != s:\n', '            return i[len(s):]\n', "    return ''\n", 'def param_doc(k=None):\n', '    """make an epydoc / rst style parameter documentation block"""\n', '    if not k:\n', '        k = "Params, comma sep."\n', "        indent = '    '\n", "    else:  # assume in an __init__ def'n\n", "        indent = '        '\n", '    if k in _values and _values[k]:\n', '        return "\\n\\n%s:Parameters:\\n%s" % (indent, \'\\n\'.join(\n', '            ["%s- `%s`: <|describe %s|>" % (\n', "                indent, i.split('=',1)[0].strip(), i.split('=',1)[0].strip()\n", "             ) for i in _values[k].split(',')]))\n", '    return ""\n', 'def user_name():\n', '    """get user\'s full name if available"""\n', '    global _user_name\n', '    if not _user_name:\n', "        _user_name = ask('LOGNAME','LOGNAME')\n", '    return _user_name\n']
abbreviationssubststart : GS: path: leoSettings.leo source: @string abbreviations-subst-start = {|{ kind: string val: {|{
activepathattype : GS: path: leoSettings.leo source: @string active-path-attype = auto kind: string val: auto
activepathautoload : GS: path: leoSettings.leo source: @data active-path-autoload kind: data val: ['# regular expressions (case insensitive) for files/directories\n', '# active_path loads automatically\n', '# e.g.\n', '#\n', "#   ^readme    - load any file starting with 'readme'\n"]
activepathbinopen : GS: path: leoSettings.leo source: @data active-path-bin-open kind: data val: ['# extensions for files/directories\n', '# active_path will load as binary, i.e. using external software\n', '# use lower case only\n', '.pdf\n']
activepathevent : GS: path: leoSettings.leo source: @string active-path-event = headdclick1 kind: string val: headdclick1
activepathignore : GS: path: leoSettings.leo source: @data active-path-ignore kind: data val: ['# regular expressions (case insensitive) for files/directories\n', "# active_path won't list, one per line.\n", '#\n', "# NOTE: directory names are always wrapped in '/', so write a\n", '# pattern to target \'/.svn/\' (e.g. "^/\\.bzr/$"), not \'.svn\'.\n', '#\n', '# e.g.\n', '#\n', "#   ^/\\.bzr/$    - ignore directories called '.bzr'\n", "#   \\.pyc$     -ignore files ending in '.pyc'\n"]
activepathloaddocstring : GS: path: leoSettings.leo source: @bool active-path-load-docstring = False kind: bool val: False
activepathmaxsize : GS: path: leoSettings.leo source: @int active-path-max-size = 1000000 kind: int val: 1000000
activepathtimeoutseconds : GS: path: leoSettings.leo source: @float active-path-timeout-seconds = 10. kind: float val: 10.0
addmypyannotations : GS: path: leoSettings.leo source: @data add-mypy-annotations kind: data val: ['# comma-separated pairs of strings: (argument-name, typescript-type)\n', '\n', '# Note: add-mypy-annotations can automatically annotate kwargs initialized to \n', '#       bool, float, int or string constants.\n', '\n', '# Define default annotations for arguments and return types...\n', '\n', 'DEFAULT, Any\n', 'DEFAULT_RETURN, None\n', '\n', '# Naming conventions used in Leo...\n', '\n', 'aBool, bool\n', 'aList, List\n', 'args, Any\n', 'c, Cmdr\n', 'callback, Callable\n', 'ch, str\n', 'changed, bool\n', 'char, str\n', 'd, Dict[str, str]\n', 'ev, Event\n', 'event, Event\n', 'fileName, str\n', 'fn, str\n', 'frac, float\n', 'frame, Widget\n', 'gnx, str\n', 'handler, Callable\n', 'i, int\n', 'i1, int\n', 'i2, int\n', 'index, int\n', 'idx, int\n', 'j, int\n', 'j1, int\n', 'j2, int\n', 'k, int\n', 'k1, int\n', 'k2, int\n', 'kwargs, Any\n', 'menu, Wrapper\n', 'message, str\n', 'n, int\n', 'n1, int\n', 'n2, int\n', 'name, str\n', 'obj, Any\n', 'p, Position\n', 'p1, Position\n', 'p2, Position\n', 'parentFrame, Wrapper\n', 'path, str\n', 'ratio, float\n', 'ratio2, float\n', 'root, Position\n', 's, str\n', 's1, str\n', 's2, str\n', 'script, str\n', 'tag, str\n', 'v, VNode\n', 'w, Wrapper\n', 'widget, Widget\n', 'wrapper, Wrapper\n', 'x, int\n', 'y, int\n']
addwstokillring : GS: path: leoSettings.leo source: @bool add-ws-to-kill-ring = False kind: bool val: False
allowtextzoom : GS: path: leoSettings.leo source: @bool allow-text-zoom = True kind: bool val: True
atautowarnsaboutleadingwhitespace : GS: path: myLeoSettings.leo source: @bool at-auto-warns-about-leading-whitespace = True kind: bool val: True
atbuttonbtnbg : GS: path: leoSettings.leo source: @color at-button-btn-bg = @LightSteelBlue1 kind: color val: @LightSteelBlue1
atrootbodiesstartindocmode : GS: path: leoSettings.leo source: @bool at-root-bodies-start-in-doc-mode = True kind: bool val: True
autocompletebrackets : GS: path: leoSettings.leo source: @bool autocomplete-brackets = False kind: bool val: False
autoindentinnocolormode : GS: path: leoSettings.leo source: @bool autoindent-in-nocolor-mode = True kind: bool val: True
autojustify : GS: path: leoSettings.leo source: @int autojustify = 78 kind: int val: 78
autojustifyonatstart : GS: path: leoSettings.leo source: @bool autojustify-on-at-start = False kind: bool val: False
autoscrollfindtab : GS: path: leoSettings.leo source: @bool auto-scroll-find-tab = True kind: bool val: True
autotabcomplete : GS: path: leoSettings.leo source: @bool auto-tab-complete = True kind: bool val: True
backlinknamelevels : GS: path: myLeoSettings.leo source: @int backlink_name_levels = 0 kind: int val: 0
batch : GS: path: leoSettings.leo source: @bool batch = False kind: bool val: False
beautifyallowjoinedstrings : GS: path: leoSettings.leo source: @bool beautify-allow-joined-strings = False kind: bool val: False
beautifymaxjoinlinelength : GS: path: leoSettings.leo source: @int beautify-max-join-line-length = 80 kind: int val: 80
beautifymaxsplitlinelength : GS: path: leoSettings.leo source: @int beautify-max-split-line-length = 88 kind: int val: 88
bigoutlinepane : GS: path: leoSettings.leo source: @bool big-outline-pane = False kind: bool val: False
bodybg : GS: path: myLeoSettings.leo source: @color body-bg = cyan kind: color val: cyan
bodycursorbackgroundcolor : GS: path: leoSettings.leo source: @color body-cursor-background-color = None kind: color val: None
bodycursorforegroundcolor : GS: path: leoSettings.leo source: @color body-cursor-foreground-color = None kind: color val: None
bodyfg : GS: path: leoSettings.leo source: @color body-fg = black kind: color val: black
bodyfontfamily : GS: path: leoSettings.leo source: @string body-font-family = @font-family kind: string val: @font-family
bodyfontsize : GS: path: myLeoSettings.leo source: @string body-font-size = 9pt kind: string val: 9pt
bodyfontstyle : GS: path: leoSettings.leo source: @string body-font-style = @font-style kind: string val: @font-style
bodyfontweight : GS: path: leoSettings.leo source: @string body-font-weight = @font-weight kind: string val: @font-weight
bodygmttime : GS: path: leoSettings.leo source: @bool body-gmt-time = False kind: bool val: False
bodyinsertioncursorcolor : GS: path: leoSettings.leo source: @color body-insertion-cursor-color = None kind: color val: None
bodypanewraps : GS: path: leoSettings.leo source: @bool body-pane-wraps = True kind: bool val: True
bodyselbg : GS: path: myLeoSettings.leo source: @color body-sel-bg = gray kind: color val: gray
bodyselfg : GS: path: leoSettings.leo source: @color body-sel-fg = white kind: color val: white
bodytextbackgroundcolor : GS: path: leoSettings.leo source: @color body-text-background-color = None kind: color val: None
bodytextforegroundcolor : GS: path: leoSettings.leo source: @color body-text-foreground-color = None kind: color val: None
bodytimeformatstring : GS: path: myLeoSettings.leo source: @string body_time_format_string = %Y-%m-%d %a %H:%M kind: string val: %Y-%m-%d %a %H:%M
bookmarksbaseborder : GS: path: leoSettings.leo source: @string bookmarks-base-border = "none" kind: string val: "none"
bookmarksbasecolor : GS: path: leoSettings.leo source: @color bookmarks-base-color = @text-foreground kind: color val: @text-foreground
bookmarksbasedecoration : GS: path: leoSettings.leo source: @string bookmarks-base-decoration = "none" kind: string val: "none"
bookmarksbasefamily : GS: path: leoSettings.leo source: @string bookmarks-base-family = @font-family kind: string val: @font-family
bookmarksbasemargin : GS: path: leoSettings.leo source: @string bookmarks-base-margin = 0 kind: string val: 0
bookmarksbasepadding : GS: path: leoSettings.leo source: @string bookmarks-base-padding = 1 kind: string val: 1
bookmarksbasesize : GS: path: leoSettings.leo source: @string bookmarks-base-size = @bookmarks-font-size kind: string val: @bookmarks-font-size
bookmarksbasestyle : GS: path: leoSettings.leo source: @string bookmarks-base-style = normal kind: string val: normal
bookmarksbaseweight : GS: path: leoSettings.leo source: @string bookmarks-base-weight = regular kind: string val: regular
bookmarkschildrencolor : GS: path: leoSettings.leo source: @color bookmarks-children-color = @text-foreground kind: color val: @text-foreground
bookmarkschildrendecoration : GS: path: leoSettings.leo source: @string bookmarks-children-decoration = underline kind: string val: underline
bookmarkschildrenfamily : GS: path: leoSettings.leo source: @string bookmarks-children-family = @font-family kind: string val: @font-family
bookmarkschildrensize : GS: path: leoSettings.leo source: @string bookmarks-children-size = ignore kind: string val: ignore
bookmarkschildrenstyle : GS: path: leoSettings.leo source: @string bookmarks-children-style = ignore kind: string val: ignore
bookmarkschildrenweight : GS: path: leoSettings.leo source: @string bookmarks-children-weight = ignore kind: string val: ignore
bookmarkscurrentcolor : GS: path: leoSettings.leo source: @color bookmarks-current-color = blue kind: color val: blue
bookmarkscurrentdecoration : GS: path: leoSettings.leo source: @string bookmarks-current-decoration = "none" kind: string val: "none"
bookmarkscurrentsize : GS: path: leoSettings.leo source: @string bookmarks-current-size = @bookmarks-font-size kind: string val: @bookmarks-font-size
bookmarkscurrentstyle : GS: path: leoSettings.leo source: @string bookmarks-current-style = "none" kind: string val: "none"
bookmarkscurrentweight : GS: path: leoSettings.leo source: @string bookmarks-current-weight = bold kind: string val: bold
bookmarksexpandedcolor : GS: path: leoSettings.leo source: @color bookmarks-expanded-color = @text-foreground kind: color val: @text-foreground
bookmarksexpandeddecoration : GS: path: leoSettings.leo source: @string bookmarks-expanded-decoration = underline kind: string val: underline
bookmarksexpandedsize : GS: path: leoSettings.leo source: @string bookmarks-expanded-size = ignore kind: string val: ignore
bookmarksexpandedstyle : GS: path: leoSettings.leo source: @string bookmarks-expanded-style = ignore kind: string val: ignore
bookmarksexpandedweight : GS: path: leoSettings.leo source: @string bookmarks-expanded-weight = bold kind: string val: bold
bookmarksfontsize : GS: path: leoSettings.leo source: @string bookmarks-font-size = 11pt kind: string val: 11pt
bookmarksgrabdblclick : GS: path: myLeoSettings.leo source: @bool bookmarks-grab-dblclick = False kind: bool val: False
bookmarkslevels : GS: path: myLeoSettings.leo source: @int bookmarks-levels = 1 kind: int val: 1
bookmarksmodifiers : GS: path: myLeoSettings.leo source: @data bookmarks-modifiers kind: data val: ['# These control the effects of modifiers (Shift, Control, Alt) on left\n', '# clicks on bookmarks.  Available modifiers are:\n', '#\n', '#     None AltControl ControlShift Alt Control Shift\n', '#     AltShift AltControlShift\n', '#\n', '# Available actions are:\n', '#\n', '#     goto_bookmark update_bookmark rename_bookmark edit_bookmark\n', '#     delete_bookmark add_child navigate hoist promote\n', '#\n', "# There's one more action than modifier combo., so you have to work\n", "# out what you don't want.  `promote` is missing by default.\n", '\n', 'None goto_bookmark\n', 'AltControl update_bookmark\n', 'ControlShift rename_bookmark\n', 'Alt edit_bookmark\n', 'Control delete_bookmark\n', 'Shift add_child\n', 'AltShift navigate\n', 'AltControlShift hoist\n']
changetext : GS: path: leoSettings.leo source: @string change-text = None kind: string val: None
chapterdropdownleft : GS: path: leoSettings.leo source: @bool chapter-dropdown-left = False kind: bool val: False
checkboxfontfamily : GS: path: leoSettings.leo source: @string checkbox-font-family = @font-family kind: string val: @font-family
checkboxfontsize : GS: path: leoSettings.leo source: @string checkbox-font-size = @medium-font-size kind: string val: @medium-font-size
checkforchangedexternalfiles : GS: path: myLeoSettings.leo source: @bool check-for-changed-external-files = True kind: bool val: True
checknodesokpatterns : GS: path: leoSettings.leo source: @data check-nodes-ok-patterns kind: data val: ['# Headlines matching the following regex strings are never considered dubious.\n', '# These strings are treated as raw strings.\n', '.*test_\n', '.*Test\n']
checknodesokprefixes : GS: path: leoSettings.leo source: @data check-nodes-ok-prefixes kind: data val: ['# Headlines starting with any of the following strings are not considered dubious.\n', '# These defaults ignore top-level @<file> nodes and marker nodes.\n', '@\n', '**\n', '==\n', '--']
checknodessuppressions : GS: path: leoSettings.leo source: @data check-nodes-suppressions kind: data val: ['# Additional headlines that are never considered dubious by the check-nodes command.\n', '# Headlines must match exactly.\n', '\n', '# The most natural place for this node is in the .leo file to be checked,\n', '# *not* myLeoSettings.leo.\n', '\n']
checkpythoncodeonwrite : GS: path: myLeoSettings.leo source: @bool check-python-code-on-write = True kind: bool val: True
cimporttypedefs : GS: path: leoSettings.leo source: @data c-import-typedefs kind: data val: ['# typedef names, one per line\n', '\n', '# These fix #545:\n', '\n', '    # _Bool\n', '    # scr_enter_status_t\n', '    # scr_exec_status_t\n', '    # scr_exit_status_t\n', '    # scr_node_api_t\n', '    # scr_update_status_t\n', '    # uint16_t\n', '    # uint8_t\n']
closeflashbrackets : GS: path: leoSettings.leo source: @string close-flash-brackets = )]} kind: string val: )]}
collapsenodesaftermove : GS: path: myLeoSettings.leo source: @bool collapse_nodes_after_move = True kind: bool val: True
collapsenodesduringfinds : GS: path: leoSettings.leo source: @bool collapse-nodes-during-finds = True kind: bool val: True
collapsenodeswhilespelling : GS: path: leoSettings.leo source: @bool collapse-nodes-while-spelling = True kind: bool val: True
collapseongotofirstlastvisible : GS: path: leoSettings.leo source: @bool collapse-on-goto-first-last-visible = True kind: bool val: True
collapseonltarrow : GS: path: leoSettings.leo source: @bool collapse-on-lt-arrow = True kind: bool val: True
colorcwebcommentswithlatex : GS: path: leoSettings.leo source: @bool color-cweb-comments-with-latex = True kind: bool val: True
colorcwebdocpartswithlatex : GS: path: leoSettings.leo source: @bool color-cweb-doc-parts-with-latex = True kind: bool val: True
colordirectivesinplaintext : GS: path: leoSettings.leo source: @bool color-directives-in-plain-text = True kind: bool val: True
colordocpartsasrest : GS: path: leoSettings.leo source: @bool color-doc-parts-as-rest = True kind: bool val: True
colorerdelay : GS: path: leoSettings.leo source: @int colorer-delay = 200 kind: int val: 200
colorermaxlines : GS: path: leoSettings.leo source: @int colorer-max-lines = 100 kind: int val: 100
colortrailingwhitespace : GS: path: leoSettings.leo source: @bool color-trailing-whitespace = True kind: bool val: True
commandmodebgcolor : GS: path: leoSettings.leo source: @color command-mode-bg-color = #f2fdff kind: color val: #f2fdff
commandmodefgcolor : GS: path: leoSettings.leo source: @color command-mode-fg-color = None kind: color val: None
comment : GS: path: leoSettings.leo source: @color comment = solarized-orange kind: color val: solarized-orange
comment.single : GS: path: leoSettings.leo source: @color comment.single = solarized-orange kind: color val: solarized-orange
comment1color : GS: path: leoSettings.leo source: @color comment1-color = firebrick3 kind: color val: firebrick3
comment2color : GS: path: leoSettings.leo source: @color comment2-color = firebrick3 kind: color val: firebrick3
comment3color : GS: path: leoSettings.leo source: @color comment3-color = plum3 kind: color val: plum3
comment4color : GS: path: leoSettings.leo source: @color comment4-color = orchid1 kind: color val: orchid1
contextmenucommands : GS: path: leoSettings.leo source: @data contextmenu-commands kind: data val: ['# Important: the contextmenu.py plugin must be enabled\n', '# for these settings to take effect.\n', '\n', '# Add commands to contextmenu\n', '# The format is *either*:\n', '#   <command> SPACE <description>\n', '# *or( a single "-" giving a menu separator.\n', '\n', 'undo Undo\n', 'redo Redo\n', '\n', '# EKR: I highly recommend *not* adding the following text-related items.\n', "#      These popup commands do not work in all of Leo's text panes!\n", '    # -\n', '    # copy-text Copy Text\n', '    # cut-text Cut Text\n', '    # paste-text Paste Text\n', '    # select-all Select All Text\n', '-\n', 'copy-node Copy Node\n', 'cut-node Cut Node\n', 'delete-node Delete Node\n', 'paste-node Paste Node\n', 'paste-retaining-clones Paste Node As Clone\n', '-']
contractvisitednodes : GS: path: leoSettings.leo source: @bool contractVisitedNodes = True kind: bool val: True
createatpersistencenodesautomatically : GS: path: leoSettings.leo source: @bool create-at-persistence-nodes-automatically = False kind: bool val: False
createnonexistentdirectories : GS: path: leoSettings.leo source: @bool create-nonexistent-directories = False kind: bool val: False
ctopythonclasslist : GS: path: leoSettings.leo source: @data c-to-python-class-list kind: data val: ['# The names of your classes, one per line.\n', '\n', 'Commands\n', 'vnode\n', 'position\n']
ctopythonivarsdict : GS: path: leoSettings.leo source: @data c-to-python-ivars-dict kind: data val: ['# The instance variables (ivars) used by your programs classes.\n', '# This creates a dictionary.  Keys are class names, values are lists of ivars.\n', '\n', '# Lines ending with a colon specify keys.\n', '# All other lines are comma-delimited lists of ivars for the last-seen key.\n', '# Trailing commas are ignored.\n', '\n', 'atFile:\n', '    mCommands, mErrors, mStructureErrors,\n', '    mTargetFileName, mOutputFileName, mOutputStream,\n', '    mStartSentinelComment, mEndSentinelComment, mRoot\n', '\n', 'vnode:\n', '    mCommands, mJoinList, mIconVal, mTreeID, mT, mStatusBits\n', '\n', 'tnode:\n', '    mBodyString, mBodyRTF, mJoinHead, mStatusBits, mFileIndex,\n', '    mSelectionStart, mSelectionLength, mCloneIndex,\n', '\n', 'LeoFrame:\n', '    mNextFrame, mPrevFrame, mCommands,\n', '\n', 'Commands:\n', '# public\n', '    mCurrentVnode, mLeoFrame, mInhibitOnTreeChanged, mMaxTnodeIndex,\n', '    mTreeCtrl, mBodyCtrl, mFirstWindowAndNeverSaved,\n', '#private\n', '    mTabWidth, mChanged, mOutlineExpansionLevel, mUsingClipboard,\n', '    mFileName, mMemoryInputStream, mMemoryOutputStream, mFileInputStream,\n', '    mInputFile, mFileOutputStream, mFileSize, mTopVnode, mTagList,\n', '    mMaxVnodeTag,\n', '    mUndoType, mUndoVnode, mUndoParent, mUndoBack, mUndoN,\n', '    mUndoDVnodes, mUndoLastChild, mUndoablyDeletedVnode,\n']
ctopythontypelist : GS: path: leoSettings.leo source: @data c-to-python-type-list kind: data val: ['# The names of your typedef types and standard types, one per line.\n', '#\n', '# c-to-python converts::\n', '#\n', '#   new aType(...)\n', '#\n', '# to::\n', '#\n', '#   aType(...)\n', '\n', 'char\n', 'void\n', 'short\n', 'long\n', 'int\n', 'double\n', 'float\n', 'unsigned']
cursorstayonpaste : GS: path: leoSettings.leo source: @bool cursor-stay-on-paste = True kind: bool val: True
datenodesbodytext : GS: path: leoSettings.leo source: @string datenodes-body-text = To do... kind: string val: To do...
datenodesdaynodeheadline : GS: path: leoSettings.leo source: @string datenodes-day-node-headline = %Y-%m-%d kind: string val: %Y-%m-%d
datenodesmonthnodedayheadline : GS: path: leoSettings.leo source: @string datenodes-month-node-day-headline = %d: %A kind: string val: %d: %A
datenodesmonthnodemonthheadline : GS: path: leoSettings.leo source: @string datenodes-month-node-month-headline = %B %Y kind: string val: %B %Y
datenodesmonthnodeomitsaturdays : GS: path: leoSettings.leo source: @bool datenodes-month-node-omit-saturdays = True kind: bool val: True
datenodesmonthnodeomitsundays : GS: path: leoSettings.leo source: @bool datenodes-month-node-omit-sundays = True kind: bool val: True
datenodesyearnodedayheadline : GS: path: leoSettings.leo source: @string datenodes-year-node-day-headline = %d: %A kind: string val: %d: %A
datenodesyearnodemonthheadline : GS: path: leoSettings.leo source: @string datenodes-year-node-month-headline = %B kind: string val: %B
datenodesyearnodeomitsaturdays : GS: path: leoSettings.leo source: @bool datenodes-year-node-omit-saturdays = True kind: bool val: True
datenodesyearnodeomitsundays : GS: path: leoSettings.leo source: @bool datenodes-year-node-omit-sundays = True kind: bool val: True
datenodesyearnodeyearheadline : GS: path: leoSettings.leo source: @string datenodes-year-node-year-headline = %Y kind: string val: %Y
debuggerkind : GS: path: leoSettings.leo source: @string debugger-kind = winpdb kind: string val: winpdb
debuggerpath : GS: path: leoSettings.leo source: @string debugger-path = None kind: string val: None
debugscriptbtnbg : GS: path: leoSettings.leo source: @color debug-script-btn-bg = @MistyRose1 kind: color val: @MistyRose1
defaultatautofileencoding : GS: path: leoSettings.leo source: @string default-at-auto-file-encoding = utf-8 kind: string val: utf-8
defaultderivedfileencoding : GS: path: leoSettings.leo source: @string default-derived-file-encoding = utf-8 kind: string val: utf-8
defaulteditingstate : GS: path: leoSettings.leo source: @string default-editing-state = insert kind: string val: insert
defaultleoextension : GS: path: leoSettings.leo source: @string default-leo-extension = .leo kind: string val: .leo
defaultleofile : GS: path: leoSettings.leo source: @string default-leo-file = ~/.leo/workbook.leo kind: string val: ~/.leo/workbook.leo
dialogborder : GS: path: leoSettings.leo source: @string dialog-border = 2px kind: string val: 2px
dialogfontfamily : GS: path: leoSettings.leo source: @string dialog-font-family = @font-family kind: string val: @font-family
dialogfontsize : GS: path: leoSettings.leo source: @string dialog-font-size = @font-size kind: string val: @font-size
dialogfontstyle : GS: path: leoSettings.leo source: @string dialog-font-style = @font-style kind: string val: @font-style
dialogfontweight : GS: path: leoSettings.leo source: @string dialog-font-weight = @font-weight  kind: string val: @font-weight
dialogmargin : GS: path: leoSettings.leo source: @string dialog-margin = 2px kind: string val: 2px
docpartcolor : GS: path: leoSettings.leo source: @color doc-part-color = firebrick3 kind: color val: firebrick3
dragaltdragexpands : GS: path: leoSettings.leo source: @bool drag-alt-drag-expands = True kind: bool val: True
editlabelbg : GS: path: leoSettings.leo source: @color edit-label-bg = @LightSteelBlue1 kind: color val: @LightSteelBlue1
editlabelfg : GS: path: leoSettings.leo source: @color edit-label-fg = black kind: color val: black
editlabelfontfamily : GS: path: leoSettings.leo source: @string edit-label-font-family = @font-family kind: string val: @font-family
editlabelfontsize : GS: path: leoSettings.leo source: @string edit-label-font-size = @font-size kind: string val: @font-size
editlabelfontstyle : GS: path: leoSettings.leo source: @string edit-label-font-style = @font-style kind: string val: @font-style
editlabelfontweight : GS: path: leoSettings.leo source: @string edit-label-font-weight = @font-weight kind: string val: @font-weight
enableabbreviations : GS: path: leoSettings.leo source: @bool enable-abbreviations = True kind: bool val: True
enablealtctrlbindings : GS: path: leoSettings.leo source: @bool enable-alt-ctrl-bindings = True kind: bool val: True
enableautocompleterinitially : GS: path: leoSettings.leo source: @bool enable-autocompleter-initially = False kind: bool val: False
enablecalltipsinitially : GS: path: leoSettings.leo source: @bool enable-calltips-initially = False kind: bool val: False
enabledragmessages : GS: path: leoSettings.leo source: @bool enable-drag-messages = False kind: bool val: False
enabletreedragging : GS: path: myLeoSettings.leo source: @bool enable_tree_dragging = False kind: bool val: False
enchantlanguage : GS: path: myLeoSettings.leo source: @string enchant_language = en_US kind: string val: en_US
enchantlocaldictionary : GS: path: myLeoSettings.leo source: @string enchant_local_dictionary = '/cmp/pri/git/leoMySettings/spell_dict.txt kind: string val: '/cmp/pri/git/leoMySettings/spell_dict.txt
execscriptcommands : GS: path: leoSettings.leo source: @data exec-script-commands kind: data val: ['# This node contains the commands needed to execute a program in a particular language.\n', '\n', '# Format: language-name: command\n', '\n', '# Create a temporary file if c.p is not any kind of @<file> node.\n', '\n', '# Compute the final command as follows:\n', '\n', '# 1. If command contains <FILE>, replace <FILE> with the full path to the external file.\n', '# 2. If command contains <NO-FILE>, just remove <NO-FILE>.\n', '# 3. Otherwise, append the full path to the external file to the command.\n', '\n', 'go: go run . <NO-FILE>\n', 'python: python\n', 'rust: rustc\n']
execscriptpatterns : GS: path: leoSettings.leo source: @data exec-script-patterns kind: data val: ['# This node contains the regex pattern to determine the line number in error messages.\n', '# Format: language-name: regex pattern\n', '#\n', '# Patterns must define two groups, in either order:\n', '# One group, containing only digits, defines the line number.\n', '# The other group defines the file name.\n', '\n', 'go: ^\\s*(.*):([0-9]+):([0-9]+):.+$\n', 'python: ^\\s*File "(.+)", line ([0-9]+), in .+$\n', 'rust: ^\\s*--> (.+):([0-9]+):([0-9]+)\\s*$']
externaleditor : GS: path: leoSettings.leo source: @string external-editor = None kind: string val: None
findfontfamily : GS: path: leoSettings.leo source: @string find-font-family = @font-family kind: string val: @font-family
findfontsize : GS: path: myLeoSettings.leo source: @string find-font-size = 12pt kind: string val: 12pt
findfontstyle : GS: path: leoSettings.leo source: @string find-font-style = @font-style kind: string val: @font-style
findfontweight : GS: path: leoSettings.leo source: @string find-font-weight = @font-weight kind: string val: @font-weight
findfoundbg : GS: path: leoSettings.leo source: @color find-found-bg = blue kind: color val: blue
findfoundfg : GS: path: leoSettings.leo source: @color find-found-fg = white kind: color val: white
findnotfoundbg : GS: path: leoSettings.leo source: @color find-not-found-bg = red kind: color val: red
findnotfoundfg : GS: path: leoSettings.leo source: @color find-not-found-fg = white kind: color val: white
findpatternfontfamily : GS: path: leoSettings.leo source: @string find-pattern-font-family = @font-family kind: string val: @font-family
findtabbg : GS: path: myLeoSettings.leo source: @color find-tab-bg = lime kind: color val: lime
findtext : GS: path: leoSettings.leo source: @string find-text = None kind: string val: None
fixedwindowposition : GS: path: leoSettings.leo source: @data fixedWindowPosition kind: data val: ['# Must be four entries: width,height,left,top.\n', '# Put this in myLeoSettings.leo, **not** in individual .leo files.\n', '# This setting has no effect unless @bool fixed_window = True\n', '\n', '1200\n', '800\n', '50\n', '50']
flashbracketsbackgroundcolor : GS: path: leoSettings.leo source: @color flash-brackets-background-color = DodgerBlue1 kind: color val: DodgerBlue1
flashbracketscount : GS: path: leoSettings.leo source: @int flash-brackets-count = 2 kind: int val: 2
flashbracketsdelay : GS: path: leoSettings.leo source: @int flash-brackets-delay = 75 kind: int val: 75
flashbracketsforegroundcolor : GS: path: leoSettings.leo source: @color flash-brackets-foreground-color = white kind: color val: white
flashmatchingbrackets : GS: path: leoSettings.leo source: @bool flash-matching-brackets = True kind: bool val: True
focusedborderfocuscolor : GS: path: leoSettings.leo source: @color focused-border-focus-color = blue kind: color val: blue
focusedborderstyle : GS: path: leoSettings.leo source: @string focused-border-style = solid kind: string val: solid
focusedborderunfocuscolor : GS: path: leoSettings.leo source: @color focused-border-unfocus-color = white kind: color val: white
focusedborderwidth : GS: path: leoSettings.leo source: @string focused-border-width = 3px kind: string val: 3px
fontfamily : GS: path: leoSettings.leo source: @string font-family = DejaVu Sans Mono, Droid Sans Mono kind: string val: DejaVu Sans Mono, Droid Sans Mono
fontsize : GS: path: leoSettings.leo source: @string font-size = 12pt  kind: string val: 12pt
fontsizebody : GS: path: leoSettings.leo source: @string font-size-body = @body-font-size kind: string val: @body-font-size
fontstyle : GS: path: leoSettings.leo source: @string font-style = normal kind: string val: normal
fontweight : GS: path: leoSettings.leo source: @string font-weight = normal kind: string val: normal
forbidinvalidcompletions : GS: path: leoSettings.leo source: @bool forbid-invalid-completions = False kind: bool val: False
forceexecuteentirebody : GS: path: leoSettings.leo source: @bool force-execute-entire-body = False kind: bool val: False
forcenewlinesinatnosentbodies : GS: path: leoSettings.leo source: @bool force-newlines-in-at-nosent-bodies = True kind: bool val: True
forthbolditalicwords : GS: path: leoSettings.leo source: @data forth-bold-italic-words kind: data val: []
forthboldwords : GS: path: leoSettings.leo source: @data forth-bold-words kind: data val: []
forthdefwords : GS: path: leoSettings.leo source: @data forth-defwords kind: data val: [':\n', 'variable\n', 'constant\n', 'code\n']
forthdelimiterpairs : GS: path: leoSettings.leo source: @data forth-delimiter-pairs kind: data val: ['\\Delimiter pairs for forth colorizing, one per line\n', '\n', '[ ]\n', '{ }\n', 'asm[ ]asm\n']
forthitalicwords : GS: path: leoSettings.leo source: @data forth-italic-words kind: data val: []
forthkeyword2family : GS: path: leoSettings.leo source: @font forth.keyword2 kind: family val: None
forthkeyword2size : GS: path: leoSettings.leo source: @font forth.keyword2 kind: size val: 12
forthkeyword2slant : GS: path: leoSettings.leo source: @font forth.keyword2 kind: slant val: None
forthkeyword2weight : GS: path: leoSettings.leo source: @font forth.keyword2 kind: weight val: None
forthkeyword3color : GS: path: leoSettings.leo source: @color forth-keyword3-color = black kind: color val: black
forthkeyword3family : GS: path: leoSettings.leo source: @font forth.keyword3 kind: family val: None
forthkeyword3fontsize : GS: path: leoSettings.leo source: @font forth.keyword3 kind: size val: 12
forthkeyword3fontslant : GS: path: leoSettings.leo source: @font forth.keyword3 kind: slant val: roman
forthkeyword3fontweight : GS: path: leoSettings.leo source: @font forth.keyword3 kind: weight val: bold
forthkeyword4color : GS: path: leoSettings.leo source: @color forth-keyword4-color = black kind: color val: black
forthkeyword4family : GS: path: leoSettings.leo source: @font forth.keyword4 kind: family val: None
forthkeyword4size : GS: path: leoSettings.leo source: @font forth.keyword4 kind: size val: 12
forthkeyword4slant : GS: path: leoSettings.leo source: @font forth.keyword4 kind: slant val: slant
forthkeyword4weight : GS: path: leoSettings.leo source: @font forth.keyword4 kind: weight val: bold
forthkeyword5color : GS: path: leoSettings.leo source: @color forth-keyword5-color = black kind: color val: black
forthkeyword5family : GS: path: leoSettings.leo source: @font forth.keyword5 kind: family val: None
forthkeyword5size : GS: path: leoSettings.leo source: @font forth.keyword5 kind: size val: 12
forthkeyword5slant : GS: path: leoSettings.leo source: @font forth.keyword5 kind: slant val: slant
forthkeyword5weight : GS: path: leoSettings.leo source: @font forth.keyword5 kind: weight val: normal
forthstringwordpairs : GS: path: leoSettings.leo source: @data forth-string-word-pairs kind: data val: ["\\ List of supplementary tokens to be syntax-coloured by Leo as Forth 'string words'.\n", '\\ Each line contains a pair of tokens.\n', "\\ Lines beginning with '\\' are comments, and ignored.\n", '\n', '" "\n', 'c" "\n', '." "\n', 's" "\n', '.( )\n', '\n', 'abort" "\n', 'tty" "\n', 'ttyl" "\n', 'lcd1" "\n', 'lcd2" "\n', 'lcd1c" "\n', 'lcd2c" "\n']
forthwords : GS: path: leoSettings.leo source: @data forth-words kind: data val: ["\\ lines beginning with '\\' are comments, and ignored.\n", '\\ declare any supplementary forth words you want coloured, one per line, below\n', '\n', '\\ asm[ ]asm     now string delims.\n', '\\ :             now a defining word.\n', '\n', '!\n', '<\n', "'\n", '+\n', ',\n', '-\n', '1+\n', '2>r\n', '2r>\n', '2drop\n', '2dup\n', '2swap\n', '::\n', '::code\n', ';\n', '<=\n', '=\n', '>\n', '>=\n', '>r\n', 'r>\n', '>w\n', 'w>\n', "[']\n", 'again\n', 'and\n', 'begin\n', 'code\n', 'constant\n', 'drop\n', 'dup\n', 'else\n', 'end-code\n', 'exit\n', 'host\n', 'if\n', 'include\n', 'invert\n', 'label:\n', 'macro\n', 'meta\n', 'needs\n', 'or \n', 'picasm\n', 'repeat\n', 'return-in-w\n', 'swap\n', 'target\n', 'then\n', 'until\n', 'v-for\n', 'v-next\n', 'variable\n', 'while\n', '@']
framebg : GS: path: leoSettings.leo source: @color frame-bg = white kind: color val: white
ftsmaxhits : GS: path: leoSettings.leo source: @int fts-max-hits = 30 kind: int val: 30
fullunlpaths : GS: path: leoSettings.leo source: @bool full-unl-paths = False kind: bool val: False
fwcopyhtml : GS: path: leoSettings.leo source: @bool fw-copy-html = False kind: bool val: False
fwrenderpane : GS: path: leoSettings.leo source: @string fw-render-pane = '' kind: string val: ''
generic.deleted : GS: path: leoSettings.leo source: @color generic.deleted = solarized-red kind: color val: solarized-red
generic.emph : GS: path: leoSettings.leo source: @color generic.emph = solarized-blue kind: color val: solarized-blue
generic.heading : GS: path: leoSettings.leo source: @color generic.heading = solarized-magenta kind: color val: solarized-magenta
generic.inserted : GS: path: leoSettings.leo source: @color generic.inserted = alt-solarized-green kind: color val: alt-solarized-green
generic.strong : GS: path: leoSettings.leo source: @color generic.strong = solarized-blue kind: color val: solarized-blue
generic.subheading : GS: path: leoSettings.leo source: @color generic.subheading = solarized-magenta kind: color val: solarized-magenta
genericbuttonbtnbg : GS: path: leoSettings.leo source: @color generic-button-btn-bg = @LightSteelBlue1 kind: color val: @LightSteelBlue1
globalabbreviations : GS: path: leoSettings.leo source: @data global-abbreviations kind: data val: ["# Blanks lines and comments (lines starting with '#') are ignored.\n", '# All other lines should have the form::\n', '\n', '# name=definition\n', '\n', '# @data abbreviation overrides @data global-abbreviation, so:\n', '# - Use @data global-abbreviation nodes in myLeoSettings.leo.\n', '# - Use @data abbreviation nodes in local files.\n', '\n', '# Important: You can organize your abbreviations!\n', '#            All descendant nodes are part of this node.\n', '\n', '# This abbreviation will only work with @bool scripting-abbreviations = True\n', '# (or @bool scripting-at-script-nodes = True)\n', '\n', 'date;;={|{x=time.asctime()}|}\n', '\n', '# type html;; to insert template and ,, to select next <|placeholder|>\n', '\n', 'html;;=<html>\n', '\\:<head>\n', '\\:<title><|title|></title>\n', '\\:<style>\n', '\\:</style>\n', '\\:</head>\n', '\\:<body>\n', '\\:<|content|>\n', '\\:</body>\n', '\\:</html>\n', '\n', "# By convention, most abbreviations end with ;; so that you won't type them by accident.\n", '# However, you can fix misspellings as shown here.\n', '\n', '# teh=the\n', '# hellow=hello\n', '\n']
globaldynamicabbrevs : GS: path: leoSettings.leo source: @bool globalDynamicAbbrevs = True kind: bool val: True
gnxkind : GS: path: leoSettings.leo source: @string gnx-kind = none kind: string val: None
graphmanuallayout : GS: path: leoSettings.leo source: @bool graph-manual-layout = False kind: bool val: False
gutterbg : GS: path: myLeoSettings.leo source: @color gutter-bg = BurlyWood kind: color val: BurlyWood
gutterfg : GS: path: myLeoSettings.leo source: @color gutter-fg = DarkGreen kind: color val: DarkGreen
gutterfontfamily : GS: path: leoSettings.leo source: @string gutter-font-family = @font-family kind: string val: @font-family
gutterfontsize : GS: path: myLeoSettings.leo source: @string gutter-font-size = 9pt kind: string val: 9pt
gutterfontstyle : GS: path: leoSettings.leo source: @string gutter-font-style = @font-style kind: string val: @font-style
gutterfontweight : GS: path: leoSettings.leo source: @string gutter-font-weight = @font-weight kind: string val: @font-weight
gutterwadjust : GS: path: myLeoSettings.leo source: @int gutter-w-adjust = 1 kind: int val: 1
gutteryadjust : GS: path: myLeoSettings.leo source: @int gutter-y-adjust = 1 kind: int val: 1
headbg : GS: path: myLeoSettings.leo source: @color head-bg = pink kind: color val: pink
headfg : GS: path: leoSettings.leo source: @color head-fg = black kind: color val: black
headfontfamily : GS: path: leoSettings.leo source: @string head-font-family = @font-family kind: string val: @font-family
headfontsize : GS: path: myLeoSettings.leo source: @string head-font-size = 8pt kind: string val: 8pt
headfontstyle : GS: path: leoSettings.leo source: @string head-font-style = @font-style kind: string val: @font-style
headfontweight : GS: path: leoSettings.leo source: @string head-font-weight = @font-weight kind: string val: @font-weight
headlinegmttime : GS: path: leoSettings.leo source: @bool headline-gmt-time = False kind: bool val: False
headlinetimeformatstring : GS: path: myLeoSettings.leo source: @string headline_time_format_string = %Y-%m-%d %a %H:%M kind: string val: %Y-%m-%d %a %H:%M
headselbg : GS: path: myLeoSettings.leo source: @color head-sel-bg = blue kind: color val: blue
headselfg : GS: path: myLeoSettings.leo source: @color head-sel-fg = white kind: color val: white
highlightbodyline : GS: path: leoSettings.leo source: @bool highlight-body-line = False kind: bool val: False
historylist : GS: path: leoSettings.leo source: @data history-list kind: data val: ["# Lines starting with '#' are comment lines.\n", '# A list of command names to be pre-loaded into the history list.\n', 'pylint\n', 'sort-lines\n']
historytracerport : GS: path: leoSettings.leo source: @int history-tracer-port=8087 kind: int val: 8087
httpactive : GS: path: leoSettings.leo source: @bool http-active = True kind: bool val: True
httpbookmarkunl : GS: path: leoSettings.leo source: @string http-bookmark-unl = None kind: string val: None
httpip : GS: path: leoSettings.leo source: @string http-ip = 127.0.0.1 kind: string val: 127.0.0.1
httpport : GS: path: leoSettings.leo source: @int http-port = 8130 kind: int val: 8130
httpscript : GS: path: leoSettings.leo source: @data http-script kind: data val: ['$(document).ready(function(){\n', '    // Toggle (hide) all but top-level *nodes*.\n', '    // Headlines are *always* visible.\n', '    $("div.node").hide()\n', '    $(".outlinepane").children("div.node").show();\n', '    // Attach borders to *headlines*.\n', '    $("div.headline").addClass(\'unborderclass\')\n', '    $(".outlinepane").children("div.node").children("div.headline:first").removeClass(\'unborderclass\');\n', '    $(".outlinepane").children("div.node").children("div.headline:first").addClass(\'borderclass\');\n', '    // Set h attributes for css\n', '    // $("headline").attr("icon_url", "http://leoeditor.com/box" + $("headline").attr("icon") + ".GIF")\n', "        // Works, but I haven't found how to use it.\n", '    $("div.headline").click(function(e){\n', '        e.stopImmediatePropagation()\n', '            // Google: jquery click event called twice.\n', '        // Toggle the expansion state.\n', '        $(e.target).parent().children("div.node").toggle()\n', '        // Set the body text.\n', '        $(".body-code").text($(e.target).attr("b"));\n', '        // Set the border\n', '        $("div.headline").removeClass(\'borderclass\');\n', '        $("div.headline").addClass(\'unborderclass\');\n', "        $(e.target).removeClass('unborderclass');\n", "        $(e.target).addClass('borderclass');\n", '        // console.clear();\n', '        // console.log($(e.target));\n', '        // console.log($(e.target).children("div.node").length);\n', '        // console.log($(e.target).children("div.node").children("div.headline").length);\n', '        //console.log($(e.target).attr("b").length);\n', '        //console.log($(e.target).children(":first"));\n', '        //console.log($(e.target).children(":first").is(":visible"));\n', '    });\n', '});']
httpstylesheet : GS: path: leoSettings.leo source: @data http-stylesheet kind: data val: ['/*\n', '    The main .css stylesheet for the mod_http.py plugin.\n', '    This stylesheet allocates fix-sized areas for the outline and body panes.\n', '*/\n', 'h1 {\n', '    /* font-size: 16pt; */\n', '    /* color: red; */\n', '}\n', '.borderclass{\n', '    border-color: #C1E0FF;\n', '    border-width: 1px;\n', '    border-style: solid;\n', '}\n', '.unborderclass{\n', '    border-color: white;\n', '    border-width: 1px;\n', '    border-style: solid;\n', '}\n', 'div.headline {\n', '    color: blue;\n', '    font-size: 16pt;\n', '    font-style: normal;\n', '    font-weight: normal;\n', '    /* Prevent false clicks. */\n', '    margin-top: 2px;\n', '    margin-bottom: 2px;\n', '    padding: 4px;\n', '}\n', 'div.container {\n', '    /* position:relative; */\n', '    position: absolute;\n', '}\n', 'div.node {\n', '    position: relative;\n', '    left: 20px;\n', '}\n', 'div.outlinepane {\n', '    \n', '    background: #ffffec; /* Leo yellow */\n', '    /* Fixed height/width creates scrollbars.*/\n', '    resize: none;\n', '    position: absolute:\n', '    top: 10px;\n', '    left: 10px;\n', '    height: 300px;\n', '    width: 1000px;\n', '    /* height: 50%; */\n', '    /* width: 100%; */\n', '    overflow: scroll;\n', '    line-height: 0.8;\n', '}\n', 'div.bodypane {\n', '    /* Fixed height/width creates scrollbars.*/\n', '    position: absolute;\n', '    resize: none;\n', '    height: 500px;\n', '    width: 1000px;\n', '    left: 10px;\n', '    top: 310px;\n', '    bottom: 0px;\n', '    /* height: 50%; */\n', '    /* width: 100%; */\n', '    overflow: scroll;\n', '}\n', '/* Indicator icons...\n', '\n', '    Alas, the following does not work::\n', '\n', '        node::before {\n', '            content: url(attr(icon_url)) " " attr(expand) " ";\n', '        }\n', '*/\n', 'div.headline[icon="00"]::before {\n', '    content: url("http://leoeditor.com/box00.GIF") " " attr(expand) " ";\n', '}\n', 'div.headline[icon="01"]::before {\n', '    content: url("http://leoeditor.com/box01.GIF") " " attr(expand) " ";\n', '}\n', 'div.headline[icon="02"]::before {\n', '    content: url("http://leoeditor.com/box02.GIF") " " attr(expand) " ";\n', '}\n', 'div.headline[icon="03"]::before {\n', '    content: url("http://leoeditor.com/box03.GIF") " " attr(expand) " ";\n', '}\n', 'div.headline[icon="04"]::before {\n', '    content: url("http://leoeditor.com/box04.GIF") " " attr(expand) " ";\n', '}\n', 'div.headline[icon="05"]::before {\n', '    content: url("http://leoeditor.com/box05.GIF") " " attr(expand) " ";\n', '}\n', 'div.headline[icon="06"]::before {\n', '    content: url("http://leoeditor.com/box06.GIF") " " attr(expand) " ";\n', '}\n', 'div.headline[icon="07"]::before {\n', '    content: url("http://leoeditor.com/box07.GIF") " " attr(expand) " ";\n', '}\n', 'div.headline[icon="08"]::before {\n', '    content: url("http://leoeditor.com/box08.GIF") " " attr(expand) " ";\n', '}\n', 'div.headline[icon="09"]::before {\n', '    content: url("http://leoeditor.com/box09.GIF") " " attr(expand) " ";\n', '}\n', 'div.headline[icon="10"]::before {\n', '    content: url("http://leoeditor.com/box10.GIF") " " attr(expand) " ";\n', '}\n', 'div.headline[icon="11"]::before {\n', '    content: url("http://leoeditor.com/box11.GIF") " " attr(expand) " ";\n', '}\n', 'div.headline[icon="12"]::before {\n', '    content: url("http://leoeditor.com/box12.GIF") " " attr(expand) " ";\n', '}\n', 'div.headline[icon="13"]::before {\n', '    content: url("http://leoeditor.com/box13.GIF") " " attr(expand) " ";\n', '}\n', 'div.headline[icon="14"]::before {\n', '    content: url("http://leoeditor.com/box14.GIF") " " attr(expand) " ";\n', '}\n', 'div.headline[icon="15"]::before {\n', '    content: url("http://leoeditor.com/box15.GIF") " " attr(expand) " ";\n', '}\n', 'code {\n', '    /* works */\n', '    /* background: yellow; */\n', '    font-family: "Monospace";\n', '    font-size: 150%; /* 20pt; */\n', '}']
iconheight : GS: path: leoSettings.leo source: @int icon-height = 16 kind: int val: 16
ignorecase : GS: path: leoSettings.leo source: @bool ignore-case = True kind: bool val: True
ignoreunboundnonasciikeys : GS: path: leoSettings.leo source: @bool ignore-unbound-non-ascii-keys = False kind: bool val: False
importhtmltags : GS: path: leoSettings.leo source: @data import-html-tags kind: data val: ['# lowercase html tags, one per line.\n', '\n', 'a\n', 'abbr\n', 'acronym\n', 'address\n', 'applet\n', 'area\n', 'b\n', 'base\n', 'basefont\n', 'bdo\n', 'big\n', 'blockquote\n', 'body\n', 'br\n', 'button\n', 'caption\n', 'center\n', 'cite\n', 'code\n', 'col\n', 'colgroup\n', 'dd\n', 'del\n', 'dfn\n', 'dir\n', 'div\n', 'dl\n', 'dt\n', 'em\n', 'fieldset\n', 'font\n', 'form\n', 'frame\n', 'frameset\n', 'head\n', 'h1\n', 'h2\n', 'h3\n', 'h4\n', 'h5\n', 'h6\n', 'hr\n', 'html\n', 'i\n', 'iframe\n', 'img\n', 'input\n', 'ins\n', 'kbd\n', 'label\n', 'legend\n', 'li\n', 'link\n', 'map\n', 'menu\n', 'meta\n', 'noframes\n', 'noscript\n', 'object\n', 'ol\n', 'optgroup\n', 'option\n', 'p\n', 'param\n', 'pre\n', 'q\n', 's\n', 'samp\n', 'script\n', 'select\n', 'small\n', 'span\n', 'strike\n', 'strong\n', 'style\n', 'sub\n', 'sup\n', 'table\n', 'tbody\n', 'td\n', 'textarea\n', 'tfoot\n', 'th\n', 'thead\n', 'title\n', 'tr\n', 'tt\n', 'u\n', 'ul\n', 'var']
importxmltags : GS: path: leoSettings.leo source: @data import-xml-tags kind: data val: ['# lowercase xml tags, one per line.\n', '\n', 'html\n', 'body\n', 'head\n', 'div\n', 'table\n']
indentaddedcomments : GS: path: leoSettings.leo source: @bool indent-added-comments = True kind: bool val: True
initialchooserdirectory : GS: path: leoSettings.leo source: @string initial-chooser-directory = None kind: string val: None
initialhorizontalratio : GS: path: leoSettings.leo source: @ratio initial-horizontal-ratio = 0.4 kind: ratio val: 0.4
initialhorizontalsecondaryratio : GS: path: leoSettings.leo source: @ratio initial-horizontal-secondary-ratio = 0.8 kind: ratio val: 0.8
initialsplitorientation : GS: path: myLeoSettings.leo source: @string initial_split_orientation = vertical kind: string val: vertical
initialverticalratio : GS: path: leoSettings.leo source: @ratio initial-vertical-ratio = 0.5 kind: ratio val: 0.5
initialverticalsecondaryratio : GS: path: leoSettings.leo source: @ratio initial-vertical-secondary-ratio = 0.65 kind: ratio val: 0.65
initialwindowheight : GS: path: leoSettings.leo source: @int initial-window-height = 600 kind: int val: 600
initialwindowleft : GS: path: leoSettings.leo source: @int initial-window-left =  20 kind: int val: 20
initialwindowtop : GS: path: leoSettings.leo source: @int initial-window-top = 20 kind: int val: 20
initialwindowwidth : GS: path: leoSettings.leo source: @int initial-window-width = 800 kind: int val: 800
insertmodebgcolor : GS: path: leoSettings.leo source: @color insert-mode-bg-color = #fdf5f5 kind: color val: #fdf5f5
insertmodefgcolor : GS: path: leoSettings.leo source: @color insert-mode-fg-color = black kind: color val: black
insertnewnodesatend : GS: path: leoSettings.leo source: @bool insert-new-nodes-at-end = False kind: bool val: False
interactbtnbg : GS: path: leoSettings.leo source: @color interact-btn-bg = @LightBlue kind: color val: @LightBlue
interoutlinedragmoves : GS: path: leoSettings.leo source: @bool inter-outline-drag-moves = False kind: bool val: False
invisibleoutlinenavigation : GS: path: leoSettings.leo source: @bool invisible-outline-navigation = False kind: bool val: False
jsonoutlineclipboard : GS: path: leoSettings.leo source: @bool json-outline-clipboard = False kind: bool val: False
keyboardkind : GS: path: leoSettings.leo source: @string keyboard-kind = default-keyboard kind: string val: default-keyboard
keyword : GS: path: leoSettings.leo source: @color keyword = solarized-blue kind: color val: solarized-blue
keyword1color : GS: path: leoSettings.leo source: @color keyword1-color = blue kind: color val: blue
keyword2color : GS: path: leoSettings.leo source: @color keyword2-color = blue kind: color val: blue
keyword3color : GS: path: leoSettings.leo source: @color keyword3-color = blue kind: color val: blue
keyword4color : GS: path: leoSettings.leo source: @color keyword4-color = blue kind: color val: blue
labelcolor : GS: path: leoSettings.leo source: @color label-color = red kind: color val: red
leobabelnodecreationdefault : GS: path: leoSettings.leo source: @bool Leo-Babel-Node-Creation-Default = True kind: bool val: True
leogreen : GS: path: leoSettings.leo source: @color LeoGreen = #00AA00 kind: color val: #00AA00
leokeywordcolor : GS: path: leoSettings.leo source: @color leo-keyword-color = #00aa00 kind: color val: #00aa00
leoscreenprefix : GS: path: leoSettings.leo source: @string leoscreen-prefix = None kind: string val: None
leoscreentimefmt : GS: path: leoSettings.leo source: @string leoscreen-time-fmt = %Y-%m-%d %H:%M:%S kind: string val: %Y-%m-%d %H:%M:%S
leotohtmlnomenus : GS: path: leoSettings.leo source: @bool leo-to-html-no-menus = False kind: bool val: False
leoyellow : GS: path: leoSettings.leo source: @color LeoYellow = #ffffec kind: color val: #ffffec
linehighlightcolor : GS: path: leoSettings.leo source: @string line-highlight-color = None kind: string val: None
literal1color : GS: path: leoSettings.leo source: @color literal1-color = #00aa00 kind: color val: #00aa00
literal2color : GS: path: leoSettings.leo source: @color literal2-color = #00aa00 kind: color val: #00aa00
literal3color : GS: path: leoSettings.leo source: @color literal3-color = #00aa00 kind: color val: #00aa00
literal4color : GS: path: leoSettings.leo source: @color literal4-color = #00aa00 kind: color val: #00aa00
logbg : GS: path: myLeoSettings.leo source: @color log-bg = LightSkyBlue kind: color val: LightSkyBlue
logblackcolor : GS: path: leoSettings.leo source: @color log-black-color = black kind: color val: black
logbluecolor : GS: path: leoSettings.leo source: @color log-blue-color = blue kind: color val: blue
logcyancolor : GS: path: leoSettings.leo source: @color log-cyan-color = cyan kind: color val: cyan
logerrorcolor : GS: path: leoSettings.leo source: @color log-error-color = red kind: color val: red
logfg : GS: path: leoSettings.leo source: @color log-fg = black kind: color val: black
logfontfamily : GS: path: leoSettings.leo source: @string log-font-family = @font-family kind: string val: @font-family
logfontsize : GS: path: myLeoSettings.leo source: @string log-font-size = 9pt kind: string val: 9pt
logfontstyle : GS: path: leoSettings.leo source: @string log-font-style = @font-style kind: string val: @font-style
logfontweight : GS: path: leoSettings.leo source: @string log-font-weight = @font-weight kind: string val: @font-weight
loggreencolor : GS: path: leoSettings.leo source: @color log-green-color = green kind: color val: green
loginfocolor : GS: path: leoSettings.leo source: @color log-info-color = blue kind: color val: blue
logmagentacolor : GS: path: leoSettings.leo source: @color log-magenta-color = magenta kind: color val: magenta
lognotecolor : GS: path: leoSettings.leo source: @color log-note-color = blue kind: color val: blue
logorangecolor : GS: path: leoSettings.leo source: @color log-orange-color = orange kind: color val: orange
logpanebackgroundcolor : GS: path: leoSettings.leo source: @color log-pane-background-color = #f2fdff kind: color val: #f2fdff
logpanefindtabbackgroundcolor : GS: path: leoSettings.leo source: @color log-pane-Find-tab-background-color = #d6c7d3 kind: color val: #d6c7d3
logpanespelltabbackgroundcolor : GS: path: leoSettings.leo source: @color log-pane-Spell-tab-background-color = MistyRose1 kind: color val: MistyRose1
logpanewraps : GS: path: leoSettings.leo source: @bool log-pane-wraps = False kind: bool val: False
logredcolor : GS: path: leoSettings.leo source: @color log-red-color = red kind: color val: red
logselbg : GS: path: leoSettings.leo source: @string log-sel-bg = blue kind: string val: blue
logselfg : GS: path: leoSettings.leo source: @string log-sel-fg = white kind: string val: white
logshowsavetime : GS: path: leoSettings.leo source: @bool log-show-save-time = False kind: bool val: False
logtextbackgroundcolor : GS: path: leoSettings.leo source: @color log-text-background-color = None kind: color val: None
logtextforegroundcolor : GS: path: leoSettings.leo source: @color log-text-foreground-color = None kind: color val: None
logtimestampformat : GS: path: leoSettings.leo source: @string log-timestamp-format = %H:%M:%S kind: string val: %H:%M:%S
logvioletcolor : GS: path: leoSettings.leo source: @color log-violet-color = violet kind: color val: violet
logwarningcolor : GS: path: leoSettings.leo source: @color log-warning-color = blue kind: color val: blue
logwhitecolor : GS: path: leoSettings.leo source: @color log-white-color = white kind: color val: white
logyellowcolor : GS: path: leoSettings.leo source: @color log-yellow-color = yellow kind: color val: yellow
mainspellingdictionary : GS: path: leoSettings.leo source: @string main-spelling-dictionary = None kind: string val: None
makenodeconflictsnode : GS: path: leoSettings.leo source: @bool make-node-conflicts-node = True kind: bool val: True
markchanges : GS: path: leoSettings.leo source: @bool mark-changes = False kind: bool val: False
markfinds : GS: path: leoSettings.leo source: @bool mark-finds = False kind: bool val: False
markupcolor : GS: path: leoSettings.leo source: @color markup-color = blue kind: color val: blue
maxfindlonglineslength : GS: path: leoSettings.leo source: @int max-find-long-lines-length = 110 kind: int val: 110
maxundostacksize : GS: path: leoSettings.leo source: @int max-undo-stack-size = 0 kind: int val: 0
mediumfontsize : GS: path: leoSettings.leo source: @string medium-font-size = 10pt kind: string val: 10pt
menus : GS: path: doc.leo source:  kind: menus val: None
mimeopencmd : GS: path: leoSettings.leo source: @string mime-open-cmd = None kind: string val: None
minibufferbackgroundcolor : GS: path: leoSettings.leo source: @color minibuffer-background-color = lightblue kind: color val: lightblue
minibufferbg : GS: path: leoSettings.leo source: @color minibuffer-bg = @LightSteelBlue1 kind: color val: @LightSteelBlue1
minibufferborder : GS: path: leoSettings.leo source: @string minibuffer-border = 2px kind: string val: 2px
minibuffererrorcolor : GS: path: leoSettings.leo source: @color minibuffer-error-color = red kind: color val: red
minibufferfg : GS: path: leoSettings.leo source: @color minibuffer-fg = black kind: color val: black
minibufferfindmode : GS: path: leoSettings.leo source: @bool minibuffer-find-mode = False kind: bool val: False
minibufferfontfamily : GS: path: leoSettings.leo source: @string minibuffer-font-family = @font-family kind: string val: @font-family
minibufferfontsize : GS: path: myLeoSettings.leo source: @string minibuffer-font-size = 8pt kind: string val: 8pt
minibufferfontstyle : GS: path: leoSettings.leo source: @string minibuffer-font-style = @font-style kind: string val: @font-style
minibufferfontweight : GS: path: leoSettings.leo source: @string minibuffer-font-weight = @font-weight kind: string val: @font-weight
minibufferforegroundcolor : GS: path: leoSettings.leo source: @color minibuffer-foreground-color = black kind: color val: black
minibuffermargin : GS: path: leoSettings.leo source: @string minibuffer-margin = 2px kind: string val: 2px
minibufferselbg : GS: path: leoSettings.leo source: @color minibuffer-sel-bg = lightgray kind: color val: lightgray
minibufferselfg : GS: path: leoSettings.leo source: @color minibuffer-sel-fg = white kind: color val: white
minibufferwarningcolor : GS: path: leoSettings.leo source: @color minibuffer-warning-color = lightgrey kind: color val: lightgrey
modautosaveactive : GS: path: leoSettings.leo source: @bool mod-autosave-active = True kind: bool val: True
modautosaveinterval : GS: path: leoSettings.leo source: @int mod-autosave-interval = 300 kind: int val: 300
modautosaveverbose : GS: path: leoSettings.leo source: @bool mod-autosave-verbose = False kind: bool val: False
modscriptingsubtext : GS: path: leoSettings.leo source: @string mod-scripting-subtext = ▼ kind: string val: ▼
name : GS: path: leoSettings.leo source: @color name = solarized-red kind: color val: solarized-red
name.class : GS: path: leoSettings.leo source: @color name.class = white kind: color val: white
name.decorator : GS: path: leoSettings.leo source: @color name.decorator = solarized-orange kind: color val: solarized-orange
name.entity : GS: path: leoSettings.leo source: @color name.entity = solarized-blue kind: color val: solarized-blue
name.function : GS: path: leoSettings.leo source: @color name.function = white kind: color val: white
name.other : GS: path: leoSettings.leo source: @color name.other = solarized-red kind: color val: solarized-red
name.tag : GS: path: leoSettings.leo source: @color name.tag = solarized-magenta kind: color val: solarized-magenta
newleofileencoding : GS: path: leoSettings.leo source: @string new-leo-file-encoding = utf-8 kind: string val: utf-8
nodeactionsmessagelevel : GS: path: leoSettings.leo source: @int nodeActions-message-level = 1 kind: int val: 1
nodeactionssaveatfilenodes : GS: path: leoSettings.leo source: @bool nodeActions-save-atFile-nodes = False kind: bool val: False
nodediffstyle : GS: path: leoSettings.leo source: @string node-diff-style = compare kind: string val: compare
nodeonly : GS: path: leoSettings.leo source: @bool node-only = False kind: bool val: False
nodewatchautoexecutescripts : GS: path: leoSettings.leo source: @bool nodewatch-autoexecute-scripts = False kind: bool val: False
openflashbrackets : GS: path: leoSettings.leo source: @string open-flash-brackets = ([{ kind: string val: ([{
openwithcleanfilenames : GS: path: leoSettings.leo source: @bool open-with-clean-filenames = False kind: bool val: False
openwithgotonodeonupdate : GS: path: leoSettings.leo source: @bool open-with-goto-node-on-update = True kind: bool val: True
openwithsaveonupdate : GS: path: leoSettings.leo source: @bool open-with-save-on-update = True kind: bool val: True
openwithtable : GS: path: myLeoSettings.leo source: @openwith atom = Alt+Shift+Ctrl+E kind: openwithtable val: [{'command': None, 'ext': '', 'kind': 'subprocess.Popen', 'args': ['"/usr/bin/atom"'], 'name': 'atom', 'shortcut': 'Alt+Shift+Ctrl+E'}]
openwithusesderivedfileextensions : GS: path: leoSettings.leo source: @bool open-with-uses-derived-file-extensions = False kind: bool val: False
operatorcolor : GS: path: leoSettings.leo source: @color operator-color = None kind: color val: None
opmlnamespace : GS: path: leoSettings.leo source: @string opml-namespace = leo:com:leo-opml-version-1 kind: string val: leo:com:leo-opml-version-1
opmlreadderivedfiles : GS: path: leoSettings.leo source: @bool opml-read-derived-files = True kind: bool val: True
opmluseoutlineelements : GS: path: leoSettings.leo source: @bool opml-use-outline-elements = True kind: bool val: True
opmlversion : GS: path: leoSettings.leo source: @string opml-version = 2.0 kind: string val: 2.0
opmlwritebodytext : GS: path: leoSettings.leo source: @bool opml-write-body-text = True kind: bool val: True
opmlwritederivedfiles : GS: path: leoSettings.leo source: @bool opml-write-derived-files = True kind: bool val: True
opmlwriteleodetails : GS: path: leoSettings.leo source: @bool opml-write-leo-details = True kind: bool val: True
opmlwriteleoglobalsattributes : GS: path: leoSettings.leo source: @bool opml-write-leo-globals-attributes = True kind: bool val: True
opmlwriteuas : GS: path: leoSettings.leo source: @bool opml-write-uAs = True kind: bool val: True
outlinenavextenddelay : GS: path: leoSettings.leo source: @float outline-nav-extend-delay = 2.0 kind: float val: 2.0
outlinepanehasinitialfocus : GS: path: leoSettings.leo source: @bool outline-pane-has-initial-focus = False kind: bool val: False
outlinetabsshowclose : GS: path: leoSettings.leo source: @bool outline-tabs-show-close = True kind: bool val: True
outputinitialcomment : GS: path: leoSettings.leo source: @string output-initial-comment = None kind: string val: None
outputnewline : GS: path: leoSettings.leo source: @string output-newline = nl kind: string val: nl
overwritemodebgcolor : GS: path: leoSettings.leo source: @color overwrite-mode-bg-color = azure2 kind: color val: azure2
overwritemodefgcolor : GS: path: leoSettings.leo source: @color overwrite-mode-fg-color = black kind: color val: black
pagewidth : GS: path: leoSettings.leo source: @int page-width = 80 kind: int val: 80
patchkeyword1color : GS: path: leoSettings.leo source: @color patch-keyword1-color = green kind: color val: green
patchkeyword2color : GS: path: leoSettings.leo source: @color patch-keyword2-color = red kind: color val: red
patchkeyword3color : GS: path: leoSettings.leo source: @color patch-keyword3-color = blue kind: color val: blue
patchliteral1color : GS: path: leoSettings.leo source: @color patch-literal1-color = blue kind: color val: blue
patchliteral2color : GS: path: leoSettings.leo source: @color patch-literal2-color = blue kind: color val: blue
pathdemangle : GS: path: leoSettings.leo source: @data path-demangle kind: data val: ['# pairs of lines in this text indicate search and replace targets for\n', '# cleaning the recent files list.  Each pair of lines should start with\n', '# "REPLACE:" (first line) and "WITH:" (second line).  For example:\n', '#\n', '#  REPLACE: .gnome-desktop\n', '#     WITH: My Desktop\n', '#  REPLACE: /mnt/usr1/\n', '#     WITH: /\n', '\n']
pathtozim : GS: path: leoSettings.leo source: @string path-to-zim = None kind: string val: None
patternmatch : GS: path: leoSettings.leo source: @bool pattern-match = False kind: bool val: False
phpkeyword1fontsize : GS: path: leoSettings.leo source: @font php.keyword kind: size val: 12
phpkeyword1fontslant : GS: path: leoSettings.leo source: @font php.keyword kind: slant val: roman
phpkeyword1fontweight : GS: path: leoSettings.leo source: @font php.keyword kind: weight val: normal
phpoperatorcolor : GS: path: leoSettings.leo source: @color php-operator-color = DodgerBlue1 kind: color val: DodgerBlue1
plainkeyoutlinesearch : GS: path: leoSettings.leo source: @bool plain-key-outline-search = False kind: bool val: False
preloadfindpattern : GS: path: leoSettings.leo source: @bool preload-find-pattern = False kind: bool val: False
printingfontfamily : GS: path: leoSettings.leo source: @string printing-font-family = DejaVu Sans Mono kind: string val: DejaVu Sans Mono
printingfontsize : GS: path: leoSettings.leo source: @string printing-font-size = 12 kind: string val: 12
printsettingsatdatalimit : GS: path: leoSettings.leo source: @int print-settings-at-data-limit = 20 kind: int val: 20
py2csoutputdirectory : GS: path: leoSettings.leo source: @string py2cs-output-directory = ~/py2cs kind: string val: ~/py2cs
py2csoverwrite : GS: path: leoSettings.leo source: @bool py2cs-overwrite = True kind: bool val: True
pygmentsstylename : GS: path: leoSettings.leo source: @string pygments-style-name = default kind: string val: default
pythontotypescripttypes : GS: path: leoSettings.leo source: @data python-to-typescript-types kind: data val: ['# comma-separated pairs of strings: (argument-name, typescript-type)\n', 'c, Commands\n', 'ch, character\n', 'gnx, string\n', 'd, dictionary\n', 'i, number\n', 'j, number\n', 'k, number\n', 'n, number\n', 'p, Position\n', 's, string\n', 'v, VNode']
qtcursorwidth : GS: path: leoSettings.leo source: @int qt-cursor-width = 1 kind: int val: 1
qtguipluginstylesheet : GS: path: leoSettings.leo source: @data qt-gui-plugin-style-sheet kind: data val: ['/*\n', '@language css\n', '\n', '    leoSettings.leo: @data qt-gui-plugin-style-sheet\n', '\n', "    =========== Leo's new, fully parameterized, stylesheet. ===========\n", '    \n', "    This stylesheet is responsible for most of Leo's appearance.\n", '    This stylesheet is composed of this nodes and all its descendants, in outline order.\n', '    \n', '    Leo inserts the settings in the tree "Qt Gui Stylesheet settings" into this stylesheet.\n', '    Modify those settings, *not* this stylesheet.\n', '    \n', '    About Qt stylesheets: http://qt-project.org/doc/qt-4.8/stylesheet.html\n', '*/\n', '\n', '/* ========== Body pane ========== */\n', '\n', 'QTextEdit#richTextEdit {\n', '    background-color:           @body-bg;\n', '    color:                      @body-fg;\n', '    selection-color:            @body-sel-fg;\n', '    selection-background-color: @body-sel-bg;\n', '    font-family:                @body-font-family;\n', '    font-size:                  @font-size-body;\n', "    /* Don't use body-font-size for the font-size. */\n", '    font-weight:                @body-font-weight;\n', '    font-style:                 @body-font-style;\n', '}\n', '\n', 'QTextEdit#bigtextwarning {\n', '    background-color: red; /* No longer used */\n', '}', '\n', '/* ========== Buttons ========== \n', '\n', '    Examples::\n', '    \n', '        QPushButton#<button text>-button { <style> }\n', '        QPushButton[button_kind="<button kind>"] { <style> }\n', '*/\n', '\n', '/*\n', '    Default for all buttons.\n', '    If you specify the size, you should also specify the font.\n', '*/\n', '\n', '/* -----\n', 'QPushButton {\n', '    font-family: at-push-button-font-family;\n', '    font-size:   at-push-button-font-size;\n', '}\n', '----- */\n', '\n', 'QPushButton[button_kind="at-button"] {\n', '    /* Buttons created by @button nodes. */\n', '    background-color: @at-button-btn-bg;\n', '}\n', 'QPushButton[button_kind="debug-script"] {\n', '    background-color: @debug-script-btn-bg;\n', '}\n', 'QPushButton[button_kind="generic-button"] {\n', '    /* The default styling for buttons. */\n', '    background-color: @generic-button-btn-bg;\n', '}\n', 'QPushButton[button_kind="run-script"] {\n', '    /* The singleton run-script button. */\n', '    background-color: @run-script-btn-bg;\n', '}\n', 'QPushButton[button_kind="script-button"] {\n', '    /* Buttons created by the script-button button. */\n', '    background-color: @script-button-btn-bg;\n', '}\n', 'QPushButton#script-button-button { \n', '    /* The singleton script-button button. */\n', '    background-color: @script-button-button-btn-bg;\n', '}\n', '/*  ========== Dialogs (QLabel) ========== \n', '\n', '    Use care when changing these settings: they are used for dialog text. \n', '*/\n', '\n', 'QLabel {\n', '    border:         @dialog-border;\n', '    margin:         @dialog-margin;\n', '    font-family:    @dialog-font-family;\n', '    font-size:      @dialog-font-size;\n', '    font-weight:    @dialog-font-weight;\n', '    font-style:     @dialog-font-style;\n', '}\n', '\n', 'QCheckBox#TipCheckbox {\n', '    background: lightgrey;\n', '}\n', '/* ========== Components of the Find Tab ========== */\n', '\n', 'QWidget#findTab {\n', '    background-color: @find-tab-bg;\n', '}\n', '\n', 'QLabel#findHeading, QLabel#findHelp {\n', '    font-family:    @find-font-family;\n', '    font-size:      @find-font-size; \n', '    font-weight:    @find-font-weight;\n', '    font-style:     @find-font-style; \n', '}\n', '\n', 'QLabel#findLabel, QLabel#changeLabel {\n', '    font-family:    @find-font-family;\n', '    font-size:      @find-font-size;\n', '    font-weight:    @find-font-weight;\n', '    font-style:     @find-font-style;\n', '}\n', '\n', 'QLineEdit#findPattern, QLineEdit#findChange {\n', '    font-family:    @find-pattern-font-family;\n', '    font-size:      @find-font-size;\n', '    font-weight:    @find-font-weight;\n', '    font-style:     @find-font-style;\n', '}\n', '\n', 'QCheckBox, QRadioButton {\n', '    /* For the Find Tab. */\n', '    font-family:    @checkbox-font-family;\n', '    font-size:      @checkbox-font-size;\n', '}\n', '/* ===== Optional line-number gutter ===== */\n', '\n', 'QFrame#gutter {\n', '    background-color:           @gutter-bg;\n', '    color:                      @gutter-fg;\n', '    font-family:                @gutter-font-family;\n', '    font-size:                  @gutter-font-size;\n', '    font-weight:                @gutter-font-weight;\n', '    font-style:                 @gutter-font-style;\n', '}', '\n', '/* ========== The log pane & other text widgets ========== */\n', '\n', 'QTextEdit:focus {\n', '  border-color: @focused-border-focus-color; \n', '}\n', '\n', 'QTextEdit {\n', '    border-color:               @focused-border-unfocus-color; \n', '    border-style:               @focused-border-style;\n', '    border-width:               @focused-border-width; \n', '    background-color:           @log-bg;\n', '    color:                      @log-fg;\n', '    selection-color:            @log-sel-fg;\n', '    selection-background-color: @log-sel-bg;\n', '    font-family:                @log-font-family;\n', '    font-size:                  @log-font-size;\n', '    font-weight:                @log-font-weight;\n', '    font-style:                 @log-font-style;\n', '}\n', '/* ==========  Minibuffer ========== */\n', '\n', '/* ----- The minibuffer itself ----- */\n', '\n', 'QLineEdit#lineEdit {\n', '    color:                      @minibuffer-fg;\n', '    background-color:           @minibuffer-bg;\n', '    selection-color:            @minibuffer-sel-fg;\n', '    selection-background-color: @minibuffer-sel-bg;\n', '    font-family:                @minibuffer-font-family;\n', '    font-size:                  @minibuffer-font-size;\n', '    font-weight:                @minibuffer-font-weight;\n', '    font-style:                 @minibuffer-font-style;\n', '}\n', '\n', '/* ----- The label of the minibuffer ----- */\n', '\n', 'QLabel#minibufferLabel {\n', '    border:         @minibuffer-border;\n', '    margin:         @minibuffer-margin;\n', '    font-family:    @minibuffer-font-family;\n', '    font-size:      @minibuffer-font-size;\n', '    font-weight:    @minibuffer-font-weight;\n', '    font-style:     @minibuffer-font-style;\n', '}\n', '\n', '/* ========== Outline pane ========== */\n', '\n', 'QTreeWidget {\n', '    /* Outline pane defaults. */\n', '    border-style:               @focused-border-style;\n', '    border-width:               @focused-border-width; \n', '    border-color:               @focused-border-unfocus-color; \n', '    color:                      @tree-fg;\n', '    background-color:           @tree-bg;\n', '    font-family:                @tree-font-family;\n', '    font-size:                  @tree-font-size;\n', '    font-weight:                @tree-font-weight;\n', '    font-style:                 @tree-font-style;\n', '    show-decoration-selected:   0; /* 1: select entire row */\n', '}\n', '\n', 'QTreeWidget QLineEdit {\n', '    /* Headlines when they *are* being edited. */\n', '    color:                      @head-fg;\n', '    background-color:           @head-bg;\n', '    selection-color:            @head-sel-fg; \n', '    selection-background-color: @head-sel-bg;\n', '    font-family:                @head-font-family;\n', '    font-size:                  @head-font-size; \n', '    font-weight:                @head-font-weight;\n', '    font-style:                 @head-font-style;\n', '}\n', '\n', 'QTreeWidget:focus {\n', '  border-style:         @focused-border-style;\n', '  border-width:         @focused-border-width; \n', '  border-color:         @focused-border-focus-color; \n', '}\n', '\n', 'QTreeWidget::item:selected {\n', '    /* Headlines when they selected but *not* edited. */\n', '    color:              @edit-label-fg;\n', '    background-color:   @edit-label-bg;\n', '    font-family:        @edit-label-font-family;\n', '    font-size:          @edit-label-font-size;\n', '    font-weight:        @edit-label-font-weight;\n', '    font-style:         @edit-label-font-style;\n', '}\n', '\n', '/* ===== \n', '\n', 'QTreeView::branch:open{\n', '    color:                      @tree-fg;\n', '    background-color:           @tree-bg;\n', '}\n', '\n', 'QTreeView::branch:closed{\n', '    color:                      @tree-fg;\n', '    background-color:           @tree-bg;\n', '}\n', '\n', 'QTreeView::branch:closed:has-children{\n', '    image: AT-tree-image-closed;\n', '}\n', '\n', 'QTreeView::branch:open:has-children{\n', '    image: At-tree-image-open;\n', '}\n', '\n', '===== */\n', '\n', '/* ========== bookmarks.py plugin ========== */\n', '\n', '#show_bookmarks QPushButton {\n', '    color:              @bookmarks_base_color;\n', '    margin:             @bookmarks_base_margin;\n', '    padding:            @bookmarks_base_padding;\n', '    border:             @bookmarks_base_border;\n', '    font-family:        @bookmarks_base_family;\n', '    font-size:          @bookmarks_base_size;\n', '    font-style:         @bookmarks_base_style;\n', '    font-weight:        @bookmarks_base_weight;\n', '    text-decoration:    @bookmarks_base_decoration;\n', '}\n', '\n', '\n', '/* ========== screencast.py plugin========== */\n', '\n', 'QPlainTextEdit#screencastcaption {\n', '    background-color:   @screencast-bg;\n', '    font-family:        @screencast-font-family;\n', '    font-size:          @screencast-font-size;\n', '    font-weight:        @screencast-font-weight;\n', '    font-style:         @screencast-font-slant;\n', '}\n', '/* ========== interact.py plugin ========== */\n', '\n', 'QPushButton[button_kind="interact"] {\n', '    /* Buttons from the interact plugin. */\n', '    background-color: @interact-btn-bg;\n', '}\n', '/* ========== quickmove.py plugin ========== */\n', '\n', 'QPushButton[button_kind="quick-move"] { \n', '    /* Buttons from the quickmove plugin. */\n', '    background-color: @quick-move-btn-bg;\n', '}', '\n', 'QWidget#body-text-renderer {\n', '    color:              @render-fg;\n', '    background-color:   @render-bg;\n', '}', '\n', 'QSplitter {\n', '    border-color:       @splitter-border-fg;\n', '    background-color:   @splitter-bg;\n', '    border-style:       @splitter-border-style;\n', '}\n', '\n', 'QSplitter::handle {\n', '    /* Supports only background attributes. */\n', '    background-color:   @splitter-handle-bg;\n', '}\n', '\n', 'QSplitter::handle:hover {\n', '    background-color:   @splitter-hover-bg;\n', '}\n', '/* Status areas. */\n', '\n', 'QLineEdit#status1, QLineEdit#status2 {\n', '    background-color:   @status-bg;\n', '    color:              @status-fg;\n', '    border-color:       @status-border-color;\n', '    border-width:       @status-border-width;\n', '    border-style:       @status-border-style;\n', '    font-family:        @status-font-family;\n', '    font-size:          @status-font-size;\n', '    font-weight:        @status-font-weight;\n', '    font-style:         @status-font-style;\n', '}\n', '\n', '/* ========== Widgets ========== */\n', '\n', '/* ----- Destroys other background colors!\n', 'QFrame {\n', '    background-color: at-frame-bg;\n', '}\n', '----- */\n', '\n', 'QScrollArea {\n', '    background-color:   @scroll-area-bg;\n', '}\n', '\n', 'QTabbedWidget {\n', '    background-color:   @tabbed-widget-bg;\n', '}\n', '\n', 'QTabBar::tab {\n', '    background:         @unselected-tab-bg;\n', '}\n', '\n', 'QTabBar::tab:selected, QTabBar::tab:hover {\n', '    background:         @selected-tab-bg;\n', '}\n', '\n', 'QStackedWidget {\n', '    border-color:       @stacked-widget-border-color;\n', '    background-color:   @stacked-widget-bg;\n', '    padding:            @stacked-widget-padding;\n', '}\n', '/* ----- bookmarks.py ----- */\n', '\n', "#show_bookmarks QPushButton[style_class~='bookmark_children'] {\n", '    color:              @bookmarks_children_color;\n', '    font-family:        @bookmarks_children_family;\n', '    font-size:          @bookmarks_children_size;\n', '    font-weight:        @bookmarks_children_weight;\n', '    text-decoration:    @bookmarks_children_decoration;\n', '}\n', '\n', "#show_bookmarks QPushButton[style_class~='bookmark_expanded'] {\n", '    font-size:          @bookmarks_expanded_size;\n', '    color:              @bookmarks_expanded_color;\n', '    font-style:         @bookmarks_expanded_style;\n', '    font-weight:        @bookmarks_expanded_weight;\n', '    text-decoration:    @bookmarks_expanded_decoration;\n', '}\n', '\n', "#show_bookmarks QPushButton[style_class~='bookmark_current'] {\n", '    font-size:          @bookmarks_current_size;\n', '    color:              @bookmarks_current_color;\n', '    font-style:         @bookmarks_expanded_style;\n', '    font-weight:        @bookmarks_current_weight;\n', '    text-decoration:    @bookmarks_current_decoration;\n', '}', '\n']
qtmaxcolorizedchars : GS: path: leoSettings.leo source: @int qt-max-colorized-chars = 0 kind: int val: 0
qtscintillastyles : GS: path: leoSettings.leo source: @data qt-scintilla-styles kind: data val: ['# Lines have the form: color, style\n', '# color may be any kind of Qt color specifier\n', '# See http://pyqt.sourceforge.net/Docs/QScintilla2/classQsciLexerPython.html\n', '# for list of selector names.\n', '\n', '# Firebrick3: #CD2626\n', '# Black: #000000\n', '# Green: #008000\n', '# Leo Green: # 00AA00\n', '# Red: #FF0000\n', '# Blue: #0000FF\n', '\n', '# Note: the following lines must be indented.\n', '\n', '    black, ClassName\n', '    #CD2626, Comment\n', '    #CD2626, CommentBlock\n', '    #00AA00, Decorator\n', '    #00AA00, DoubleQuotedString\n', '    black, FunctionMethodName\n', '    black, HighlightedIdentifier\n', '    black, Identifier\n', '    blue,  Keyword\n', '    black, Number\n', '    black, Operator\n', '    #00AA00, SingleQuotedString\n', '    #00AA00, TripleSingleQuotedString\n', '    #00AA00, TripleDoubleQuotedString\n', '    #00AA00, UnclosedString\n']
qtscintillazoomin : GS: path: leoSettings.leo source: @int qt-scintilla-zoom-in = 0 kind: int val: 0
qtstylename : GS: path: leoSettings.leo source: @string qt-style-name = None kind: string val: None
qttoolbarlocation : GS: path: leoSettings.leo source: @string qt-toolbar-location=top kind: string val: top
qttreemultipleselection : GS: path: leoSettings.leo source: @bool qt-tree-multiple-selection = True kind: bool val: True
qtusescintilla : GS: path: leoSettings.leo source: @bool qt-use-scintilla = False kind: bool val: False
quickmovebtnbg : GS: path: leoSettings.leo source: @color quick-move-btn-bg = @LightSteelBlue1 kind: color val: @LightSteelBlue1
qwebviewfontsize : GS: path: leoSettings.leo source: @int qweb-view-font-size = 16 kind: int val: 16
recentfilesgroup : GS: path: leoSettings.leo source: @bool recent-files-group = False kind: bool val: False
recentfilesgroupalways : GS: path: leoSettings.leo source: @bool recent-files-group-always = False kind: bool val: False
redirectexecutescriptoutputtologpane : GS: path: leoSettings.leo source: @bool redirect-execute-script-output-to-log_pane = False kind: bool val: False
removesentinelsextension : GS: path: leoSettings.leo source: @string remove-sentinels-extension = .txt kind: string val: .txt
renderbg : GS: path: leoSettings.leo source: @color render-bg = white kind: color val: white
renderfg : GS: path: leoSettings.leo source: @color render-fg = black kind: color val: black
replacemetawithalt : GS: path: leoSettings.leo source: @bool replace-meta-with-alt = False kind: bool val: False
reportunchangedfiles : GS: path: leoSettings.leo source: @bool report-unchanged-files = True kind: bool val: True
reverse : GS: path: leoSettings.leo source: @bool reverse = False kind: bool val: False
reversefinddefs : GS: path: leoSettings.leo source: @bool reverse-find-defs = False kind: bool val: False
rguidecol : GS: path: leoSettings.leo source: @int rguide-col = 80 kind: int val: 80
richtextckeautosave : GS: path: myLeoSettings.leo source: @bool richtext_cke_autosave = False kind: bool val: False
richtextckeconfig : GS: path: myLeoSettings.leo source: @data richtext_cke_config kind: data val: ['# This node\'s non-"#" content should be valid java-script.  This is\n', '# a toolbar configuration for CKEditor 4.2.\n', '#\n', '# To enable all CKE features, clear this setting, i.e. remove\n', '# everything below these "#" lines in your myLeoSettings.leo\n']
rssbodyformat : GS: path: leoSettings.leo source: @data rss-body-format kind: data val: ['@url <link>\n', '\\n\n', '<title>\n', '<date>\n', '\\n\n', '<summary>']
rssdateformat : GS: path: leoSettings.leo source: @string rss-date-format = %Y-%m-%d %I:%M %p kind: string val: %Y-%m-%d %I:%M %p
rssheadlineformat : GS: path: leoSettings.leo source: @string rss-headline-format = [<date>] <title> kind: string val: [<date>] <title>
rsssortnewestfirst : GS: path: leoSettings.leo source: @bool rss-sort-newest-first = True kind: bool val: True
rst2httpattributename : GS: path: leoSettings.leo source: @string rst2-http-attributename = None kind: string val: None
rst3action : GS: path: leoSettings.leo source: @string rst3-action=None kind: string val: None
rst3calldocutils : GS: path: leoSettings.leo source: @bool rst3-call-docutils = True kind: bool val: True
rst3defaultpath : GS: path: leoSettings.leo source: @string rst3-default-path = None kind: string val: None
rst3generaterstheadercomment : GS: path: leoSettings.leo source: @bool rst3-generate-rst-header-comment = True kind: bool val: True
rst3httpserversupport : GS: path: leoSettings.leo source: @bool rst3-http-server-support = False kind: bool val: False
rst3nodebeginmarker : GS: path: leoSettings.leo source: @string rst3-node-begin-marker = http-node-marker- kind: string val: http-node-marker-
rst3publishargvformissingstylesheets : GS: path: leoSettings.leo source: @string rst3-publish-argv-for-missing-stylesheets = None kind: string val: None
rst3removeleodirectives : GS: path: leoSettings.leo source: @bool rst3-remove-leo-directives = True kind: bool val: True
rst3stylesheetembed : GS: path: leoSettings.leo source: @bool rst3-stylesheet-embed = False kind: bool val: False
rst3stylesheetname : GS: path: leoSettings.leo source: @string rst3-stylesheet-name = default.css kind: string val: default.css
rst3stylesheetpath : GS: path: leoSettings.leo source: @string rst3-stylesheet-path = None kind: string val: None
rst3underlinecharacters : GS: path: leoSettings.leo source: @string rst3-underline-characters = #=+*^~-:>< kind: string val: #=+*^~-:><
rst3verbose : GS: path: leoSettings.leo source: @bool rst3-verbose = True kind: bool val: True
rst3writeintermediateextension : GS: path: leoSettings.leo source: @string rst3-write-intermediate-extension = .txt kind: string val: .txt
rst3writeintermediatefile : GS: path: leoSettings.leo source: @bool rst3-write-intermediate-file = True kind: bool val: True
runflake8onwrite : GS: path: leoSettings.leo source: @bool run-flake8-on-write = False kind: bool val: False
runpyflakesonwrite : GS: path: myLeoSettings.leo source: @bool run-pyflakes-on-write = True kind: bool val: True
runscriptbtnbg : GS: path: leoSettings.leo source: @color run-script-btn-bg = @MistyRose1 kind: color val: @MistyRose1
saveclearsundobuffer : GS: path: leoSettings.leo source: @bool save-clears-undo-buffer = False kind: bool val: False
screencapturesavepath : GS: path: leoSettings.leo source: @string screen-capture-save-path = None kind: string val: None
screencastbg : GS: path: leoSettings.leo source: @color screencast-bg = yellow kind: color val: yellow
screencastfontfamily : GS: path: leoSettings.leo source: @font screencast kind: family val: Times New Roman
screencastfontsize : GS: path: leoSettings.leo source: @font screencast kind: size val: 18pt
screencastfontslant : GS: path: leoSettings.leo source: @font screencast kind: slant val: normal
screencastfontweight : GS: path: leoSettings.leo source: @font screencast kind: weight val: normal
screenshotbin : GS: path: leoSettings.leo source: @string screenshot-bin = "c:\Program Files (x86)\Inkscape\inkscape.exe" kind: string val: "c:\Program Files (x86)\Inkscape\inkscape.exe"
scriptbuttonbtnbg : GS: path: leoSettings.leo source: @color script-button-btn-bg = @MistyRose1 kind: color val: @MistyRose1
scriptbuttonbuttonbtnbg : GS: path: leoSettings.leo source: @color script-button-button-btn-bg = #ffffcc kind: color val: #ffffcc
scriptfilepath : GS: path: doc.leo source: @string script-file-path = /pri/tmp/xxx.bash kind: string val: /pri/tmp/xxx.bash
scriptingabbreviations : GS: path: leoSettings.leo source: @bool scripting-abbreviations = False kind: bool val: False
scriptingatbuttonnodes : GS: path: leoSettings.leo source: @bool scripting-at-button-nodes = True kind: bool val: True
scriptingatcommandsnodes : GS: path: leoSettings.leo source: @bool scripting-at-commands-nodes = True kind: bool val: True
scriptingatpluginnodes : GS: path: leoSettings.leo source: @bool scripting-at-plugin-nodes = False kind: bool val: False
scriptingatrclicknodes : GS: path: leoSettings.leo source: @bool scripting-at-rclick-nodes = False kind: bool val: False
scriptingatscriptnodes : GS: path: myLeoSettings.leo source: @bool scripting-at-script-nodes = True kind: bool val: True
scriptingcreatedebugbutton : GS: path: leoSettings.leo source: @bool scripting-create-debug-button = False kind: bool val: False
scriptingcreaterunscriptbutton : GS: path: leoSettings.leo source: @bool scripting-create-run-script-button = False kind: bool val: False
scriptingcreatescriptbuttonbutton : GS: path: leoSettings.leo source: @bool scripting-create-script-button-button = True kind: bool val: True
scriptingmaxbuttonsize : GS: path: leoSettings.leo source: @int scripting-max-button-size = 18 kind: int val: 18
scrollareabg : GS: path: leoSettings.leo source: @color scroll-area-bg = white kind: color val: white
searchbody : GS: path: leoSettings.leo source: @bool search-body = True kind: bool val: True
searchheadline : GS: path: leoSettings.leo source: @bool search-headline = True kind: bool val: True
searchlinksbackwards : GS: path: leoSettings.leo source: @bool search-links-backwards=True kind: bool val: True
sectionnamecolor : GS: path: leoSettings.leo source: @color section-name-color = red kind: color val: red
selectalltextwheneditingheadlines : GS: path: leoSettings.leo source: @bool select-all-text-when-editing-headlines = False kind: bool val: False
selectedtabbg : GS: path: leoSettings.leo source: @color selected-tab-bg = @LightSteelBlue1 kind: color val: @LightSteelBlue1
settingsfindermenu : GS: path: leoSettings.leo source: @outline-data settings-finder-menu kind: outlinedata val: <?xml version="1.0" encoding="utf-8"?> <!-- Created by Leo: https://leo-editor.github.io/leo-editor/leo_toc.html --> <leo_file xmlns:leo="https://leo-editor.github.io/leo-editor/namespaces/leo-python-editor/1.1" > <leo_header file_format="2"/> <vnodes> <v t="tbrown.20150821171510.1"><vh>@outline-data settings-finder-menu</vh> <v t="tbrown.20150821171510.2"><vh>Colors</vh> <v t="tbrown.20150821171510.3"><vh>Body pane</vh> <v t="tbrown.20150821171510.4"><vh>Background</vh></v> <v t="tbrown.20150821171510.5"><vh>Foreground</vh></v> <v t="tbrown.20150821171510.6"><vh>Selected foreground</vh></v> <v t="tbrown.20150821171510.7"><vh>Selected background</vh></v> </v> <v t="tbrown.20150821171510.9"><vh>Border colors</vh> <v t="tbrown.20150821171510.10"><vh>Focused border</vh></v> <v t="tbrown.20150821171510.11"><vh>Not focused border</vh></v> </v> <v t="tbrown.20150821171510.12"><vh>Button background colors</vh> <v t="tbrown.20150821171510.13"><vh>Run script</vh></v> <v t="tbrown.20150821171510.14"><vh>Debug script</vh></v> <v t="tbrown.20150821171510.15"><vh>Script button</vh></v> <v t="tbrown.20150821171510.16"><vh>Script</vh></v> <v t="tbrown.20150821171510.17"><vh>Generic</vh></v> <v t="tbrown.20150821171510.18"><vh>Quick move</vh></v> <v t="tbrown.20150821171510.19"><vh>Interact</vh></v> <v t="tbrown.20150821171510.20"><vh>At button</vh></v> </v> <v t="tbrown.20150821171510.21"><vh>Find tab colors</vh> <v t="tbrown.20150821171510.22"><vh>Find tab background</vh></v> </v> <v t="tbrown.20150821171510.23"><vh>Gutter colors</vh> <v t="tbrown.20150821171510.24"><vh>Gutter background</vh></v> <v t="tbrown.20150821171510.25"><vh>Gutter foreground</vh></v> </v> <v t="tbrown.20150821171510.26"><vh>Log pane colors</vh> <v t="tbrown.20150821171510.27"><vh>Log foreground</vh></v> <v t="tbrown.20150821171510.28"><vh>Log background</vh></v> </v> <v t="tbrown.20150821171510.29"><vh>Minibuffer colors</vh> <v t="tbrown.20150821171510.30"><vh>Foreground</vh></v> <v t="tbrown.20150821171510.31"><vh>Background</vh></v> <v t="tbrown.20150821171510.32"><vh>Select foreground</vh></v> <v t="tbrown.20150821171510.33"><vh>Select background</vh></v> </v> <v t="tbrown.20150821171510.34"><vh>Outline colors</vh> <v t="tbrown.20150821171510.35"><vh>Basic outline colors</vh> <v t="tbrown.20150821171510.36"><vh>Tree foreground</vh></v> <v t="tbrown.20150821171510.37"><vh>Tree background</vh></v> </v> <v t="tbrown.20150821171510.38"><vh>Colors for headlines that *are* being edited</vh> <v t="tbrown.20150821171510.39"><vh>Head foreground</vh></v> <v t="tbrown.20150821171510.40"><vh>Head background</vh></v> <v t="tbrown.20150821171510.41"><vh>Head select foreground</vh></v> <v t="tbrown.20150821171510.42"><vh>Head select background</vh></v> </v> <v t="tbrown.20150821171510.43"><vh>Colors for headlines that are *not* being edited</vh> <v t="tbrown.20150821171510.44"><vh>Edit label border</vh></v> <v t="tbrown.20150821171510.45"><vh>Edit label margin</vh></v> <v t="tbrown.20150821171510.46"><vh>Edit label background</vh></v> <v t="tbrown.20150821171510.47"><vh>Edit label foreground</vh></v> </v> </v> <v t="tbrown.20150821171510.48"><vh>Plugin colors (deprecated)</vh> <v t="tbrown.20150821171510.49"><vh>Text foreground</vh></v> <v t="tbrown.20150821171510.50"><vh>Text foreground body</vh></v> <v t="tbrown.20150821171510.51"><vh>Text foreground tree</vh></v> <v t="tbrown.20150821171510.52"><vh>Text foreground log</vh></v> </v> <v t="tbrown.20150821171510.53"><vh>Render pane colors</vh> <v t="tbrown.20150821171510.54"><vh>Render background</vh></v> <v t="tbrown.20150821171510.55"><vh>Render foreground</vh></v> </v> <v t="tbrown.20150821171510.56"><vh>Scroll area colors</vh> <v t="tbrown.20150821171510.57"><vh>Scroll area background</vh></v> </v> <v t="tbrown.20150821171510.58"><vh>Splitter colors</vh> <v t="tbrown.20150821171510.59"><vh>Splitter background</vh></v> <v t="tbrown.20150821171510.60"><vh>Splitter handle background</vh></v> <v t="tbrown.20150821171510.61"><vh>Splitter border foreground</vh></v> <v t="tbrown.20150821171510.62"><vh>Splitter border style</vh></v> </v> <v t="tbrown.20150821171510.63"><vh>Status area colors</vh> <v t="tbrown.20150821171510.64"><vh>Status background</vh></v> <v t="tbrown.20150821171510.65"><vh>Status foreground</vh></v> <v t="tbrown.20150821171510.66"><vh>Status border style</vh></v> <v t="tbrown.20150821171510.67"><vh>Status border color</vh></v> </v> <v t="tbrown.20150821171510.68"><vh>Status area colors for searches</vh> <v t="tbrown.20150821171510.69"><vh>Found background</vh></v> <v t="tbrown.20150821171510.70"><vh>Found foreground</vh></v> <v t="tbrown.20150821171510.71"><vh>Not found background</vh></v> <v t="tbrown.20150821171510.72"><vh>Not found foreground</vh></v> </v> <v t="tbrown.20150821171510.73"><vh>Widget colors (simple widgets)</vh> <v t="tbrown.20150821171510.74"><vh>Frame background</vh></v> <v t="tbrown.20150821171510.75"><vh>Stacked widget border color</vh></v> <v t="tbrown.20150821171510.76"><vh>Stacked widget background</vh></v> <v t="tbrown.20150821171510.77"><vh>Tabbed widget background</vh></v> </v> </v> <v t="tbrown.20150821171510.78"><vh>Fonts</vh> <v t="tbrown.20150821171510.79"><vh>Basic Fonts (change these first)</vh> <v t="tbrown.20150821171510.80"><vh>Family</vh></v> <v t="tbrown.20150821171510.81"><vh>Size</vh></v> <v t="tbrown.20150821171510.82"><vh>Medium size</vh></v> <v t="tbrown.20150821171510.83"><vh>Small size</vh></v> <v t="tbrown.20150821171510.84"><vh>Style</vh></v> <v t="tbrown.20150821171510.85"><vh>Weight</vh></v> </v> <v t="tbrown.20150821171510.86"><vh>Body Fonts</vh> <v t="tbrown.20150821171510.87"><vh>Family</vh></v> <v t="tbrown.20150821171510.88"><vh>Size</vh></v> <v t="tbrown.20150821171510.89"><vh>Style</vh></v> <v t="tbrown.20150821171510.90"><vh>Weight</vh></v> </v> <v t="tbrown.20150821171510.92"><vh>Dialog fonts</vh> <v t="tbrown.20150821171510.93"><vh>Family</vh></v> <v t="tbrown.20150821171510.94"><vh>Size</vh></v> <v t="tbrown.20150821171510.95"><vh>Weight</vh></v> <v t="tbrown.20150821171510.96"><vh>Style</vh></v> </v> <v t="tbrown.20150821171510.97"><vh>Find Panel Fonts</vh> <v t="tbrown.20150821171510.98"><vh>Checkbox family</vh></v> <v t="tbrown.20150821171510.99"><vh>Checkbox size</vh></v> <v t="tbrown.20150821171510.100"><vh>Family</vh></v> <v t="tbrown.20150821171510.101"><vh>Size</vh></v> <v t="tbrown.20150821171510.102"><vh>Style</vh></v> <v t="tbrown.20150821171510.103"><vh>Weight</vh></v> <v t="tbrown.20150821171510.104"><vh>Pattern font family</vh></v> </v> <v t="tbrown.20150821171510.105"><vh>Gutter Fonts</vh> <v t="tbrown.20150821171510.106"><vh>Family</vh></v> <v t="tbrown.20150821171510.107"><vh>Size</vh></v> <v t="tbrown.20150821171510.108"><vh>Style</vh></v> <v t="tbrown.20150821171510.109"><vh>Weight</vh></v> </v> <v t="tbrown.20150821171510.110"><vh>Log pane fonts</vh> <v t="tbrown.20150821171510.111"><vh>Selection foreground</vh></v> <v t="tbrown.20150821171510.112"><vh>Selection background</vh></v> <v t="tbrown.20150821171510.113"><vh>Family</vh></v> <v t="tbrown.20150821171510.114"><vh>Size</vh></v> <v t="tbrown.20150821171510.115"><vh>Weight</vh></v> <v t="tbrown.20150821171510.116"><vh>Style</vh></v> </v> <v t="tbrown.20150821171510.117"><vh>Minibuffer fonts</vh> <v t="tbrown.20150821171510.118"><vh>Family</vh></v> <v t="tbrown.20150821171510.119"><vh>Size</vh></v> <v t="tbrown.20150821171510.120"><vh>Weight</vh></v> <v t="tbrown.20150821171510.121"><vh>Style</vh></v> </v> <v t="tbrown.20150821171510.122"><vh>Outline pane fonts</vh> <v t="tbrown.20150821171510.123"><vh>Basic outline fonts</vh> <v t="tbrown.20150821171510.124"><vh>Family</vh></v> <v t="tbrown.20150821171510.125"><vh>Size</vh></v> <v t="tbrown.20150821171510.126"><vh>Weight</vh></v> <v t="tbrown.20150821171510.127"><vh>Style</vh></v> </v> <v t="tbrown.20150821171510.128"><vh>Fonts for headlines that *are* being edited</vh> <v t="tbrown.20150821171510.129"><vh>Family</vh></v> <v t="tbrown.20150821171510.130"><vh>Size</vh></v> <v t="tbrown.20150821171510.131"><vh>Weight</vh></v> <v t="tbrown.20150821171510.132"><vh>Style</vh></v> </v> <v t="tbrown.20150821171510.133"><vh>Fonts for headlines that are *not* being edited</vh> <v t="tbrown.20150821171510.134"><vh>Family</vh></v> <v t="tbrown.20150821171510.135"><vh>Size</vh></v> <v t="tbrown.20150821171510.136"><vh>Weight</vh></v> <v t="tbrown.20150821171510.137"><vh>Style</vh></v> </v> </v> <v t="tbrown.20150821171510.138"><vh>Status area fonts</vh> <v t="tbrown.20150821171510.139"><vh>Family</vh></v> <v t="tbrown.20150821171510.140"><vh>Size</vh></v> <v t="tbrown.20150821171510.141"><vh>Weight</vh></v> <v t="tbrown.20150821171510.142"><vh>Style</vh></v> </v> </v> <v t="tbrown.20150821171510.143"><vh>Margins And borders</vh> <v t="tbrown.20150821171510.144"><vh>Dialogs styles</vh> <v t="tbrown.20150821171510.145"><vh>Border</vh></v> <v t="tbrown.20150821171510.146"><vh>Margin</vh></v> </v> <v t="tbrown.20150821171510.147"><vh>Focus border styles</vh> <v t="tbrown.20150821171510.148"><vh>Style</vh></v> <v t="tbrown.20150821171510.149"><vh>Width</vh></v> </v> <v t="tbrown.20150821171510.150"><vh>Gutter</vh> <v t="tbrown.20150821171510.151"><vh>Use gutter</vh></v> <v t="tbrown.20150821171510.152"><vh>Gutter w adjust</vh></v> <v t="tbrown.20150821171510.153"><vh>Gutter y adjust</vh></v> </v> <v t="tbrown.20150821171510.154"><vh>Minibuffer styles</vh> <v t="tbrown.20150821171510.155"><vh>Border</vh></v> <v t="tbrown.20150821171510.156"><vh>Margin</vh></v> </v> <v t="tbrown.20150821171510.157"><vh>Stacked widgets styles</vh> <v t="tbrown.20150821171510.158"><vh>Padding</vh></v> </v> <v t="tbrown.20150821171510.159"><vh>Status area styles</vh> <v t="tbrown.20150821171510.160"><vh>Border width</vh></v> </v> <v t="tbrown.20150821171510.161"><vh>Vim mode borders/colors</vh> <v t="tbrown.20150821171510.162"><vh>Normal border</vh></v> <v t="tbrown.20150821171510.163"><vh>Insert border</vh></v> <v t="tbrown.20150821171510.164"><vh>Visual border</vh></v> </v> </v> <v t="tbrown.20150821171510.165"><vh>Outline indicators</vh> <v t="tbrown.20150821171510.166"><vh>Tree image closed</vh></v> <v t="tbrown.20150821171510.167"><vh>Tree image open</vh></v> <v t="tbrown.20150821171510.168"><vh>Tree icon separation</vh></v> </v> <v t="tbrown.20150821171510.169"><vh>Misc. plugins</vh> <v t="tbrown.20150821171510.170"><vh>Bookmarks plugin</vh> <v t="tbrown.20150821171510.171"><vh>Bookmarks base</vh> <v t="tbrown.20150821171510.172"><vh>Color</vh></v> <v t="tbrown.20150821171510.173"><vh>Border</vh></v> <v t="tbrown.20150821171510.174"><vh>Decoration</vh></v> <v t="tbrown.20150821171510.175"><vh>Family</vh></v> <v t="tbrown.20150821171510.176"><vh>Margin</vh></v> <v t="tbrown.20150821171510.177"><vh>Padding</vh></v> <v t="tbrown.20150821171510.178"><vh>Size</vh></v> <v t="tbrown.20150821171510.179"><vh>Style</vh></v> <v t="tbrown.20150821171510.180"><vh>Weight</vh></v> </v> <v t="tbrown.20150821171510.181"><vh>Bookmarks children</vh> <v t="tbrown.20150821171510.182"><vh>Color</vh></v> <v t="tbrown.20150821171510.183"><vh>Decoration</vh></v> <v t="tbrown.20150821171510.184"><vh>Family</vh></v> <v t="tbrown.20150821171510.185"><vh>Size</vh></v> <v t="tbrown.20150821171510.186"><vh>Style</vh></v> <v t="tbrown.20150821171510.187"><vh>Weight</vh></v> </v> <v t="tbrown.20150821171510.188"><vh>Bookmarks current</vh> <v t="tbrown.20150821171510.189"><vh>Color</vh></v> <v t="tbrown.20150821171510.190"><vh>Decoration</vh></v> <v t="tbrown.20150821171510.191"><vh>Size</vh></v> <v t="tbrown.20150821171510.192"><vh>Style</vh></v> <v t="tbrown.20150821171510.193"><vh>Weight</vh></v> </v> <v t="tbrown.20150821171510.194"><vh>Bookmarks expanded</vh> <v t="tbrown.20150821171510.195"><vh>Color</vh></v> <v t="tbrown.20150821171510.196"><vh>Decoration</vh></v> <v t="tbrown.20150821171510.197"><vh>Size</vh></v> <v t="tbrown.20150821171510.198"><vh>Style</vh></v> <v t="tbrown.20150821171510.199"><vh>Weight</vh></v> <v t="tbrown.20150821171510.200"><vh>Size</vh></v> </v> </v> <v t="tbrown.20150821171510.201"><vh>Screencast plugin</vh> <v t="tbrown.20150821171510.202"><vh>Background</vh></v> <v t="tbrown.20150821171510.203"><vh>Font-family</vh></v> <v t="tbrown.20150821171510.204"><vh>Font-size</vh></v> <v t="tbrown.20150821171510.205"><vh>Font-weight</vh></v> <v t="tbrown.20150821171510.206"><vh>Font-style</vh></v> </v> </v> </v> </vnodes> <tnodes> <t tx="tbrown.20150821171510.1">This data is used by SettingsFinder.build_menu() to build the `Edit settings` submenu of the `Settings` menu.  You should *not* need to copy this to your personal settings.  If this data doesn't reference settings that should be findable under the `Edit settings` submenu, please report[1] them for addition in the distributed version of Leo.  [1] leo-editor@googlegroups.com or https://github.com/leo-editor/leo-editor/issues </t> <t tx="tbrown.20150821171510.10">focused-border-focus-color</t> <t tx="tbrown.20150821171510.100">find-font-family</t> <t tx="tbrown.20150821171510.101">find-font-size</t> <t tx="tbrown.20150821171510.102">find-font-style</t> <t tx="tbrown.20150821171510.103">find-font-weight</t> <t tx="tbrown.20150821171510.104">find-pattern-font-family</t> <t tx="tbrown.20150821171510.105"></t> <t tx="tbrown.20150821171510.106">gutter-font-family</t> <t tx="tbrown.20150821171510.107">gutter-font-size</t> <t tx="tbrown.20150821171510.108">gutter-font-style</t> <t tx="tbrown.20150821171510.109">gutter-font-weight</t> <t tx="tbrown.20150821171510.11">focused-border-unfocus-color</t> <t tx="tbrown.20150821171510.110"></t> <t tx="tbrown.20150821171510.111">log-sel-fg</t> <t tx="tbrown.20150821171510.112">log-sel-bg</t> <t tx="tbrown.20150821171510.113">log-font-family</t> <t tx="tbrown.20150821171510.114">log-font-size</t> <t tx="tbrown.20150821171510.115">log-font-weight</t> <t tx="tbrown.20150821171510.116">log-font-style</t> <t tx="tbrown.20150821171510.117"></t> <t tx="tbrown.20150821171510.118">minibuffer-font-family</t> <t tx="tbrown.20150821171510.119">minibuffer-font-size</t> <t tx="tbrown.20150821171510.12"></t> <t tx="tbrown.20150821171510.120">minibuffer-font-weight</t> <t tx="tbrown.20150821171510.121">minibuffer-font-style</t> <t tx="tbrown.20150821171510.122"></t> <t tx="tbrown.20150821171510.123"></t> <t tx="tbrown.20150821171510.124">tree-font-family</t> <t tx="tbrown.20150821171510.125">tree-font-size</t> <t tx="tbrown.20150821171510.126">tree-font-weight</t> <t tx="tbrown.20150821171510.127">tree-font-style</t> <t tx="tbrown.20150821171510.128"></t> <t tx="tbrown.20150821171510.129">head-font-family</t> <t tx="tbrown.20150821171510.13">run-script-btn-bg</t> <t tx="tbrown.20150821171510.130">head-font-size</t> <t tx="tbrown.20150821171510.131">head-font-weight</t> <t tx="tbrown.20150821171510.132">head-font-style</t> <t tx="tbrown.20150821171510.133"></t> <t tx="tbrown.20150821171510.134">edit-label-font-family</t> <t tx="tbrown.20150821171510.135">edit-label-font-size</t> <t tx="tbrown.20150821171510.136">edit-label-font-weight</t> <t tx="tbrown.20150821171510.137">edit-label-font-style</t> <t tx="tbrown.20150821171510.138"></t> <t tx="tbrown.20150821171510.139">status-font-family</t> <t tx="tbrown.20150821171510.14">debug-script-btn-bg</t> <t tx="tbrown.20150821171510.140">status-font-size</t> <t tx="tbrown.20150821171510.141">status-font-weight</t> <t tx="tbrown.20150821171510.142">status-font-style</t> <t tx="tbrown.20150821171510.143"># These control such things as margin width and style. # The most important settings are the Focused border styles.</t> <t tx="tbrown.20150821171510.144"></t> <t tx="tbrown.20150821171510.145">dialog-border</t> <t tx="tbrown.20150821171510.146">dialog-margin</t> <t tx="tbrown.20150821171510.147">These give the width and style of the border surrounding the active pane. </t> <t tx="tbrown.20150821171510.148">focused-border-style</t> <t tx="tbrown.20150821171510.149">focused-border-width</t> <t tx="tbrown.20150821171510.15">script-button-button-btn-bg</t> <t tx="tbrown.20150821171510.150"></t> <t tx="tbrown.20150821171510.151">use-gutter</t> <t tx="tbrown.20150821171510.152">gutter-w-adjust</t> <t tx="tbrown.20150821171510.153">gutter-y-adjust</t> <t tx="tbrown.20150821171510.154"></t> <t tx="tbrown.20150821171510.155">minibuffer-border</t> <t tx="tbrown.20150821171510.156">minibuffer-margin</t> <t tx="tbrown.20150821171510.157"></t> <t tx="tbrown.20150821171510.158">stacked-widget-padding</t> <t tx="tbrown.20150821171510.159"></t> <t tx="tbrown.20150821171510.16">script-button-btn-bg</t> <t tx="tbrown.20150821171510.160">status-border-width</t> <t tx="tbrown.20150821171510.161">These must be @string settings, even though they do affect colors.</t> <t tx="tbrown.20150821171510.162">vim-mode-normal-border</t> <t tx="tbrown.20150821171510.163">vim-mode-insert-border</t> <t tx="tbrown.20150821171510.164">vim-mode-visual-border</t> <t tx="tbrown.20150821171510.165"></t> <t tx="tbrown.20150821171510.166">tree-image-closed</t> <t tx="tbrown.20150821171510.167">tree-image-open</t> <t tx="tbrown.20150821171510.168">tree-icon-separation</t> <t tx="tbrown.20150821171510.169">odd headline just to not clash with regular plugins menu</t> <t tx="tbrown.20150821171510.17">generic-button-btn-bg</t> <t tx="tbrown.20150821171510.170"></t> <t tx="tbrown.20150821171510.171"></t> <t tx="tbrown.20150821171510.172">bookmarks_base_color</t> <t tx="tbrown.20150821171510.173">bookmarks_base_border</t> <t tx="tbrown.20150821171510.174">bookmarks_base_decoration</t> <t tx="tbrown.20150821171510.175">bookmarks_base_family</t> <t tx="tbrown.20150821171510.176">bookmarks_base_margin</t> <t tx="tbrown.20150821171510.177">bookmarks_base_padding</t> <t tx="tbrown.20150821171510.178">bookmarks_base_size</t> <t tx="tbrown.20150821171510.179">bookmarks_base_style</t> <t tx="tbrown.20150821171510.18">quick-move-btn-bg</t> <t tx="tbrown.20150821171510.180">bookmarks_base_weight</t> <t tx="tbrown.20150821171510.181"></t> <t tx="tbrown.20150821171510.182">bookmarks_children_color</t> <t tx="tbrown.20150821171510.183">bookmarks_children_decoration</t> <t tx="tbrown.20150821171510.184">bookmarks_children_family</t> <t tx="tbrown.20150821171510.185">bookmarks_children_size</t> <t tx="tbrown.20150821171510.186">bookmarks_children_style</t> <t tx="tbrown.20150821171510.187">bookmarks_children_weight</t> <t tx="tbrown.20150821171510.188"></t> <t tx="tbrown.20150821171510.189">bookmarks_current_color</t> <t tx="tbrown.20150821171510.19">interact-btn-bg</t> <t tx="tbrown.20150821171510.190">bookmarks_current_decoration</t> <t tx="tbrown.20150821171510.191">bookmarks_current_size</t> <t tx="tbrown.20150821171510.192">bookmarks_current_style</t> <t tx="tbrown.20150821171510.193">bookmarks_current_weight</t> <t tx="tbrown.20150821171510.194"></t> <t tx="tbrown.20150821171510.195">bookmarks_expanded_color</t> <t tx="tbrown.20150821171510.196">bookmarks_expanded_decoration</t> <t tx="tbrown.20150821171510.197">bookmarks_expanded_size</t> <t tx="tbrown.20150821171510.198">bookmarks_expanded_style</t> <t tx="tbrown.20150821171510.199">bookmarks_expanded_weight</t> <t tx="tbrown.20150821171510.2"></t> <t tx="tbrown.20150821171510.20">at-button-btn-bg</t> <t tx="tbrown.20150821171510.200">bookmarks_font_size</t> <t tx="tbrown.20150821171510.201"></t> <t tx="tbrown.20150821171510.202">screencast-bg</t> <t tx="tbrown.20150821171510.203">screencast-font-family</t> <t tx="tbrown.20150821171510.204">screencast-font-size</t> <t tx="tbrown.20150821171510.205">screencast-font-weight</t> <t tx="tbrown.20150821171510.206">screencast-font-style</t> <t tx="tbrown.20150821171510.21"></t> <t tx="tbrown.20150821171510.22">find-tab-bg</t> <t tx="tbrown.20150821171510.23"></t> <t tx="tbrown.20150821171510.24">gutter-bg</t> <t tx="tbrown.20150821171510.25">gutter-fg</t> <t tx="tbrown.20150821171510.26"></t> <t tx="tbrown.20150821171510.27">log-fg</t> <t tx="tbrown.20150821171510.28">log-bg</t> <t tx="tbrown.20150821171510.29"></t> <t tx="tbrown.20150821171510.3"></t> <t tx="tbrown.20150821171510.30">minibuffer-fg</t> <t tx="tbrown.20150821171510.31">minibuffer-bg</t> <t tx="tbrown.20150821171510.32">minibuffer-sel-fg</t> <t tx="tbrown.20150821171510.33">minibuffer-sel-bg</t> <t tx="tbrown.20150821171510.34"></t> <t tx="tbrown.20150821171510.35"></t> <t tx="tbrown.20150821171510.36">tree-fg</t> <t tx="tbrown.20150821171510.37">tree-bg</t> <t tx="tbrown.20150821171510.38"></t> <t tx="tbrown.20150821171510.39">head-fg</t> <t tx="tbrown.20150821171510.4">body-bg</t> <t tx="tbrown.20150821171510.40">head-bg</t> <t tx="tbrown.20150821171510.41">head-sel-fg</t> <t tx="tbrown.20150821171510.42">head-sel-bg</t> <t tx="tbrown.20150821171510.43"></t> <t tx="tbrown.20150821171510.44">edit-label-border</t> <t tx="tbrown.20150821171510.45">edit-label-margin</t> <t tx="tbrown.20150821171510.46">edit-label-bg</t> <t tx="tbrown.20150821171510.47">edit-label-fg</t> <t tx="tbrown.20150821171510.48"># These are provided for compatibility with old settings. </t> <t tx="tbrown.20150821171510.49">text-foreground</t> <t tx="tbrown.20150821171510.5">body-fg</t> <t tx="tbrown.20150821171510.50">text-foreground-body</t> <t tx="tbrown.20150821171510.51">text-foreground-tree</t> <t tx="tbrown.20150821171510.52">text-foreground-log</t> <t tx="tbrown.20150821171510.53"></t> <t tx="tbrown.20150821171510.54">render-bg</t> <t tx="tbrown.20150821171510.55">render-fg</t> <t tx="tbrown.20150821171510.56"></t> <t tx="tbrown.20150821171510.57">scroll-area-bg</t> <t tx="tbrown.20150821171510.58"></t> <t tx="tbrown.20150821171510.59">splitter-bg</t> <t tx="tbrown.20150821171510.6">body-sel-fg</t> <t tx="tbrown.20150821171510.60">splitter-handle-bg</t> <t tx="tbrown.20150821171510.61">splitter-border-fg</t> <t tx="tbrown.20150821171510.62">splitter-border-style</t> <t tx="tbrown.20150821171510.63"></t> <t tx="tbrown.20150821171510.64">status-bg</t> <t tx="tbrown.20150821171510.65">status-fg</t> <t tx="tbrown.20150821171510.66">status-border-style</t> <t tx="tbrown.20150821171510.67">status-border-color</t> <t tx="tbrown.20150821171510.68"></t> <t tx="tbrown.20150821171510.69">find-found-bg</t> <t tx="tbrown.20150821171510.7">body-sel-bg</t> <t tx="tbrown.20150821171510.70">find-found-fg</t> <t tx="tbrown.20150821171510.71">find-not-found-bg</t> <t tx="tbrown.20150821171510.72">find-not-found-fg</t> <t tx="tbrown.20150821171510.73"></t> <t tx="tbrown.20150821171510.74">frame-bg</t> <t tx="tbrown.20150821171510.75">stacked-widget-border-color</t> <t tx="tbrown.20150821171510.76">stacked-widget-bg</t> <t tx="tbrown.20150821171510.77">tabbed-widget-bg</t> <t tx="tbrown.20150821171510.78">Important: changing the Basic Font settings below should be all you need to do at first. All other font settings are defined in terms of the basic fonts.</t> <t tx="tbrown.20150821171510.79"># All other fonts are defined in terms of these basic fonts. # Changing the basic fonts are all that most users will want to do.</t> <t tx="tbrown.20150821171510.80">font-family</t> <t tx="tbrown.20150821171510.81">font-size</t> <t tx="tbrown.20150821171510.82">medium-font-size</t> <t tx="tbrown.20150821171510.83">small-font-size</t> <t tx="tbrown.20150821171510.84">font-style</t> <t tx="tbrown.20150821171510.85">font-weight</t> <t tx="tbrown.20150821171510.86"></t> <t tx="tbrown.20150821171510.87">body-font-family</t> <t tx="tbrown.20150821171510.88">body-font-size</t> <t tx="tbrown.20150821171510.89">body-font-style</t> <t tx="tbrown.20150821171510.9"></t> <t tx="tbrown.20150821171510.90">body-font-weight</t> <t tx="tbrown.20150821171510.92">Warning: These affect system dialogs.  Don't change these unless you are aware of the consequences</t> <t tx="tbrown.20150821171510.93">dialog-font-family</t> <t tx="tbrown.20150821171510.94">dialog-font-size</t> <t tx="tbrown.20150821171510.95">dialog-font-weight</t> <t tx="tbrown.20150821171510.96">dialog-font-style</t> <t tx="tbrown.20150821171510.97"></t> <t tx="tbrown.20150821171510.98">checkbox-font-family</t> <t tx="tbrown.20150821171510.99">checkbox-font-size</t> </tnodes> </leo_file>
sftpcachecredentials : GS: path: leoSettings.leo source: @bool sftp-cache-credentials = True kind: bool val: True
shadowinhomedir : GS: path: leoSettings.leo source: @bool shadow-in-home-dir = False kind: bool val: False
shadowprefix : GS: path: leoSettings.leo source: @string shadow-prefix = x kind: string val: x
shadowsubdir : GS: path: leoSettings.leo source: @string shadow-subdir = .leo_shadow kind: string val: .leo_shadow
showfindresultinstatus : GS: path: leoSettings.leo source: @bool show-find-result-in-status = True kind: bool val: True
showfulltracebacksinscripts : GS: path: myLeoSettings.leo source: @bool show_full_tracebacks_in_scripts = True kind: bool val: True
showhelpwhenenteringmodes : GS: path: leoSettings.leo source: @bool showHelpWhenEnteringModes = False kind: bool val: False
showiconbar : GS: path: leoSettings.leo source: @bool show-iconbar = True kind: bool val: True
showinvisiblesbydefault : GS: path: leoSettings.leo source: @bool show-invisibles-by-default = False kind: bool val: False
showinvisiblesspacecolor : GS: path: leoSettings.leo source: @color show-invisibles-space-color = #E5E5E5 kind: color val: #E5E5E5
showinvisiblestabcolor : GS: path: leoSettings.leo source: @color show-invisibles-tab-color = #CCCCCC kind: color val: #CCCCCC
showtips : GS: path: myLeoSettings.leo source: @bool show-tips = False kind: bool val: False
singleclickautoeditsheadline : GS: path: leoSettings.leo source: @bool single-click-auto-edits-headline = False kind: bool val: False
smallfontsize : GS: path: leoSettings.leo source: @string small-font-size = 10pt kind: string val: 10pt
smartautoindent : GS: path: leoSettings.leo source: @bool smart-auto-indent = False kind: bool val: False
smartquotes : GS: path: leoSettings.leo source: @bool smart-quotes = False kind: bool val: False
smarttab : GS: path: leoSettings.leo source: @bool smart-tab = True kind: bool val: True
solarizedbase0 : GS: path: leoSettings.leo source: @color solarized-base0 = #839496 kind: color val: #839496
solarizedbase00 : GS: path: leoSettings.leo source: @color solarized-base00 = #657b83 kind: color val: #657b83
solarizedbase01 : GS: path: leoSettings.leo source: @color solarized-base01 = #586e75 kind: color val: #586e75
solarizedbase02 : GS: path: leoSettings.leo source: @color solarized-base02 = #073642 kind: color val: #073642
solarizedbase03 : GS: path: leoSettings.leo source: @color solarized-base03 = #002b36 kind: color val: #002b36
solarizedbase1 : GS: path: leoSettings.leo source: @color solarized-base1 = #93a1a1 kind: color val: #93a1a1
solarizedbase2 : GS: path: leoSettings.leo source: @color solarized-base2 = #eee8d5 kind: color val: #eee8d5
solarizedbase3 : GS: path: leoSettings.leo source: @color solarized-base3 = #fdf6e3 kind: color val: #fdf6e3
solarizedblack : GS: path: leoSettings.leo source: @color solarized-black = #000005 kind: color val: #000005
solarizedblue : GS: path: leoSettings.leo source: @color solarized-blue = #268bd2 kind: color val: #268bd2
solarizedcyan : GS: path: leoSettings.leo source: @color solarized-cyan = #2aa198 kind: color val: #2aa198
solarizedgreen : GS: path: leoSettings.leo source: @color solarized-green = #859900 kind: color val: #859900
solarizedmagenta : GS: path: leoSettings.leo source: @color solarized-magenta = #d33682 kind: color val: #d33682
solarizedorange : GS: path: leoSettings.leo source: @color solarized-orange = #cb4b16 kind: color val: #cb4b16
solarizedred : GS: path: leoSettings.leo source: @color solarized-red = #dc322f kind: color val: #dc322f
solarizedviolet : GS: path: leoSettings.leo source: @color solarized-violet = #6c71c4 kind: color val: #6c71c4
solarizedwhite : GS: path: leoSettings.leo source: @color solarized-white = #fdf6e3  kind: color val: #fdf6e3
solarizedyellow : GS: path: leoSettings.leo source: @color solarized-yellow = #b58900 kind: color val: #b58900
sparsemoveoutlineleft : GS: path: leoSettings.leo source: @bool sparse-move-outline-left = False kind: bool val: False
sphinxcommanddirectory : GS: path: leoSettings.leo source: @string sphinx-command-directory = None kind: string val: None
sphinxdefaultcommand : GS: path: leoSettings.leo source: @string sphinx-default-command = make html kind: string val: make html
sphinxinputdirectory : GS: path: leoSettings.leo source: @string sphinx-input-directory = None kind: string val: None
sphinxoutputdirectory : GS: path: leoSettings.leo source: @string sphinx-output-directory = None kind: string val: None
splitbarcolor : GS: path: leoSettings.leo source: @color split-bar-color = LightSteelBlue2 kind: color val: LightSteelBlue2
splitbarrelief : GS: path: leoSettings.leo source: @string split-bar-relief = groove kind: string val: groove
splitbarwidth : GS: path: leoSettings.leo source: @int split-bar-width = 6 kind: int val: 6
splitterbg : GS: path: myLeoSettings.leo source: @color splitter-bg = white kind: color val: white
splitterborderfg : GS: path: myLeoSettings.leo source: @color splitter-border-fg = white kind: color val: white
splitterborderstyle : GS: path: leoSettings.leo source: @string splitter-border-style = solid kind: string val: solid
splitterhandlebg : GS: path: leoSettings.leo source: @color splitter-handle-bg = @LightSteelBlue1 kind: color val: @LightSteelBlue1
splitterhoverbg : GS: path: myLeoSettings.leo source: @color splitter-hover-bg = green kind: color val: green
stackedwidgetbg : GS: path: myLeoSettings.leo source: @color stacked-widget-bg = yellow kind: color val: yellow
stackedwidgetbordercolor : GS: path: myLeoSettings.leo source: @color stacked-widget-border-color = red kind: color val: red
stackedwidgetpadding : GS: path: myLeoSettings.leo source: @string stacked-widget-padding = 1px kind: string val: 1px
statusbg : GS: path: leoSettings.leo source: @color status-bg = lightgrey kind: color val: lightgrey
statusbordercolor : GS: path: leoSettings.leo source: @color status-border-color = darkgrey kind: color val: darkgrey
statusborderstyle : GS: path: leoSettings.leo source: @string status-border-style = solid kind: string val: solid
statusborderwidth : GS: path: leoSettings.leo source: @string status-border-width = 1px kind: string val: 1px
statusfg : GS: path: leoSettings.leo source: @color status-fg = black kind: color val: black
statusfontfamily : GS: path: leoSettings.leo source: @string status-font-family = @font-family kind: string val: @font-family
statusfontsize : GS: path: leoSettings.leo source: @string status-font-size = @small-font-size kind: string val: @small-font-size
statusfontstyle : GS: path: leoSettings.leo source: @string status-font-style = @font-style kind: string val: @font-style
statusfontweight : GS: path: leoSettings.leo source: @string status-font-weight = @font-weight kind: string val: @font-weight
statuslinesplitsizes : GS: path: myLeoSettings.leo source: @string status_line_split_sizes = 1 5 kind: string val: 1 5
stayintreeafterselect : GS: path: leoSettings.leo source: @bool stayInTreeAfterSelect = True kind: bool val: True
string : GS: path: leoSettings.leo source: @color string = alt-solarized-green kind: color val: alt-solarized-green
string.doc : GS: path: leoSettings.leo source: @color string.doc = solarized-orange kind: color val: solarized-orange
string.double : GS: path: leoSettings.leo source: @color string.double = alt-solarized-green kind: color val: alt-solarized-green
string.interpol : GS: path: leoSettings.leo source: @color string.interpol = alt-solarized-green kind: color val: alt-solarized-green
string.single : GS: path: leoSettings.leo source: @color string.single = alt-solarized-green kind: color val: alt-solarized-green
stubdefnamepatterns : GS: path: leoSettings.leo source: @data stub-def-name-patterns kind: data val: ['AstFormatter.*: str\n', 'Pattern.all_matches: Sequence\n', 'Pattern.full_balanced_match: Optional[int]\n', 'Pattern.match_balanced: int\n', 'Pattern.match_entire_string: bool\n', 'StandAloneMakeStubFile.scan_types: Dict[str, str]\n', 'StubFormatter.do_.*: str\n', 'StubTraverser.format_returns: str\n', 'StubTraverser.match_return_patterns: Tuple[bool,str]\n', 'StubTraverser.match_return_pattern: Optional[str]\n', 'StubTraverser.match_balanced: int']
stubgeneralpatterns : GS: path: leoSettings.leo source: @data stub-general-patterns kind: data val: ['# Patterns to be applied to argument lists and return expressions.\n', '\n', 'aList: Sequence\n', 'controller: StandAloneMakeStubFile\n', 'fn: str\n', 'i[0-3]*: int\n', 'node: Node\n', 'parser: optparse.OptionParser\n', 'repr(*): str\n', 's[0-3]*: str\n', 'str%(*): str\n', 'str%str: str\n', 'str.join(*): str\n', 'str.replace(*): str\n', '\n', '# Leo patterns:\n', '\n', 'aList: Sequence\n', 'aList1: Sequence\n', 'aList2: Sequence\n', 'c: C\n', 'c1: C\n', 'c2: C\n', 'i: int\n', 'j: int\n', 'k: int\n', 'node: ast.Ast\n', 'p: P\n', 'p1: P\n', 'p2: P\n', 's: str\n', 's2: str\n', 'strict: bool\n', 'v: V\n', 'v1: V\n', 'v2: V']
stuboutputdirectory : GS: path: leoSettings.leo source: @string stub-output-directory = ~/stubs kind: string val: ~/stubs
stuboverwrite : GS: path: leoSettings.leo source: @bool stub-overwrite = False kind: bool val: False
stubprefixlines : GS: path: leoSettings.leo source: @data stub-prefix-lines kind: data val: ['# Lines to be inserted at the start of each stub file.\n', '\n', 'from typing import Any, Dict, Optional, Sequence, Tuple, Union\n', '\n', "# At present, I don't understand how to tell mypy about ast.Node\n", '# import ast\n', '# Node = ast.Node\n', '\n', 'Node = Any\n']
stubregexpatterns : GS: path: leoSettings.leo source: @data stub-regex-patterns kind: data val: ['# Regular expression patterns.\n', '\n', '.*__name__: str\n']
stubtracematches : GS: path: leoSettings.leo source: @bool stub-trace-matches = False kind: bool val: False
stubtracepatterns : GS: path: leoSettings.leo source: @bool stub-trace-patterns = False kind: bool val: False
stubtracereduce : GS: path: leoSettings.leo source: @bool stub-trace-reduce = False kind: bool val: False
stubtracevisitors : GS: path: leoSettings.leo source: @bool stub-trace-visitors = False kind: bool val: False
stubupdate : GS: path: leoSettings.leo source: @bool stub-update = False kind: bool val: False
stubverbose : GS: path: leoSettings.leo source: @bool stub-verbose = False kind: bool val: False
stubwarn : GS: path: leoSettings.leo source: @bool stub-warn = False kind: bool val: False
stylesheet : GS: path: leoSettings.leo source: @string stylesheet =  kind: string val: None
suboutlineonly : GS: path: leoSettings.leo source: @bool suboutline-only = False kind: bool val: False
suppressdatenodesmenus : GS: path: leoSettings.leo source: @bool suppress-datenodes-menus = False kind: bool val: False
suppressimportparsing : GS: path: leoSettings.leo source: @bool suppress-import-parsing = False kind: bool val: False
syntaxerrorpopup : GS: path: myLeoSettings.leo source: @bool syntax-error-popup = True kind: bool val: True
tabbedwidgetbg : GS: path: leoSettings.leo source: @color tabbed-widget-bg = white kind: color val: white
tabwidth : GS: path: leoSettings.leo source: @int tab-width = -4 kind: int val: -4
targetlanguage : GS: path: leoSettings.leo source: @string target-language = plain kind: string val: plain
textforeground : GS: path: leoSettings.leo source: @color text-foreground = black kind: color val: black
textforegroundbody : GS: path: leoSettings.leo source: @color text-foreground-body = @text-foreground kind: color val: @text-foreground
textforegroundlog : GS: path: leoSettings.leo source: @color text-foreground-log = @text-foreground kind: color val: @text-foreground
textforegroundtree : GS: path: leoSettings.leo source: @color text-foreground-tree = @text-foreground kind: color val: @text-foreground
themename : GS: path: leoSettings.leo source: @string theme-name = None kind: string val: None
toplevelunboundkeyaction : GS: path: leoSettings.leo source: @strings  [command,insert, overwrite] top_level_unbound_key_action = insert kind: strings[command,insert,overwrite] val: insert
tracef.setfocus : GS: path: myLeoSettings.leo source: @bool trace_f.set_focus = True kind: bool val: True
tracefocus : GS: path: myLeoSettings.leo source: @bool trace_focus = True kind: bool val: True
traceg.app.gui.setfocus : GS: path: myLeoSettings.leo source: @bool trace_g.app.gui.set_focus = True kind: bool val: True
treeabbreviations : GS: path: leoSettings.leo source: @outline-data tree-abbreviations kind: outlinedata val: <?xml version="1.0" encoding="utf-8"?> <!-- Created by Leo: https://leo-editor.github.io/leo-editor/leo_toc.html --> <leo_file xmlns:leo="https://leo-editor.github.io/leo-editor/namespaces/leo-python-editor/1.1" > <leo_header file_format="2"/> <vnodes> <v t="ekr.20161121044950.1"><vh>@outline-data tree-abbreviations</vh> <v t="ekr.20170530035032.1"><vh>importer;;</vh> <v t="ekr.20170530035032.2"><vh>@@file importers/{|{x=name}|}.py</vh> <v t="ekr.20170530035032.3"><vh>class {|{x=cap_name}|}_Importer</vh> <v t="ekr.20170530035032.4"><vh>{|{x=name}|}.Overrides</vh> <v t="ekr.20170530035032.5"><vh>{|{x=name}|}.clean_headline</vh></v> <v t="ekr.20170530035032.6"><vh>{|{x=name}|}.clean_nodes</vh></v> </v> </v> <v t="ekr.20170530035032.7"><vh>class class {|{x=cap_name}|}_ScanState</vh> <v t="ekr.20170530035032.8"><vh>{|{x=name}|}_state.level</vh></v> <v t="ekr.20170530035032.9"><vh>{|{x=name}|}_state.update</vh></v> </v> </v> </v> <v t="ekr.20161121044950.2"><vh>per-commander-plugin;;</vh> <v t="ekr.20161121044950.3"><vh>@@file pluginname.py</vh> <v t="ekr.20161121044950.4"><vh>&lt;&lt; docstring &gt;&gt;</vh></v> <v t="ekr.20161121044950.5"><vh>&lt;&lt; version history &gt;&gt;</vh></v> <v t="ekr.20161121044950.6"><vh>&lt;&lt; imports &gt;&gt;</vh></v> <v t="ekr.20161121044950.7"><vh>init</vh></v> <v t="ekr.20161121044950.8"><vh>onCreate</vh></v> <v t="ekr.20161121044950.9"><vh>class pluginController</vh> <v t="ekr.20161121044950.10"><vh>__init__</vh></v> </v> </v> </v> <v t="ekr.20170208063946.1"><vh>demo;;</vh> <v t="ekr.20170208063901.1"><vh>@@button MyDemo @key=Ctrl-9</vh> <v t="ekr.20170208063901.2"><vh>&lt;&lt; imports &gt;&gt;</vh></v> <v t="ekr.20170208063901.3"><vh>script_string</vh></v> <v t="ekr.20170208063901.4"><vh>class myDemo</vh></v> <v t="ekr.20170208063901.5"><vh>wrappers</vh></v> </v> </v> </v> </vnodes> <tnodes> <t tx="ekr.20161121044950.1"># The headline must be: @outline-data tree-abbreviations  # A list tree abbreviation names.  # For each abbreviation name, there should be corresponding child node, # the **abbreviation node** whose headline matches the abbreviation name.  # When a tree abbreviation fires, Leo pastes all the descendants of # the abbreviation node as the last children of the presently selected node.  importer;; per-commander-plugin;; demo;; </t> <t tx="ekr.20161121044950.10">def __init__ (self,c):          self.c = c     # Warning: hook handlers must use keywords.get('c'), NOT self.c.     &lt;|ivars|&gt;</t> <t tx="ekr.20161121044950.2"></t> <t tx="ekr.20161121044950.3">&lt;&lt; docstring &gt;&gt; ### From leoSettings.leo # Created 2017/05/30 @language python @tabwidth -4 __version__ = '0.0' &lt;&lt; version history &gt;&gt; &lt;&lt; imports &gt;&gt; @others</t> <t tx="ekr.20161121044950.4">''' &lt;|docstring|&gt; ''' </t> <t tx="ekr.20161121044950.5">@ Put notes about each version here. &lt;|Initial version notes|&gt;</t> <t tx="ekr.20161121044950.6">import leo.core.leoGlobals as g  &lt;|imports|&gt;</t> <t tx="ekr.20161121044950.7">def init ():              ok = g.app.gui.guiName() in ('qt','qttabs')     if ok:         if 1: # Create the commander class *before* the frame is created.             g.registerHandler('before-create-leo-frame',onCreate)         else: # Create the commander class *after* the frame is created.             g.registerHandler('after-create-leo-frame',onCreate)         g.plugin_signon(__name__)        return ok </t> <t tx="ekr.20161121044950.8">def onCreate (tag, keys):          c = keys.get('c')     if c:         thePluginController = pluginController(c) </t> <t tx="ekr.20161121044950.9">class &lt;|Controller Class Name|&gt;:          @others</t> <t tx="ekr.20170208063901.1">''' A template for demonstrations based on plugins/demo.py. The demo;; abbreviation will create this tree. ''' &lt;&lt; imports &gt;&gt; @others # Use the *same* command/key binding for demo-start and demo.next. try:     if getattr(g.app, 'demo', None):         g.app.demo.next()     else:         g.cls()         print('starting demo')         demo = MyDemo(c, trace=False)         demo.bind('callout', callout)         demo.bind('title', title)         demo.start(script_string=script_string) except Exception:     g.app.demo = None     raise </t> <t tx="ekr.20170208063901.2">if c.isChanged(): c.save() import imp from leo.core.leoQt import QtGui import leo.plugins.demo as demo_module imp.reload(demo_module)</t> <t tx="ekr.20170208063901.3"># A short example. Change as needed. script_string = '''\ callout('Callout 1 centered') title('This is title 1') ### callout('Callout 2 (700, 200)', position=[700, 200]) title('This is title 2') demo.next() ''' </t> <t tx="ekr.20170208063901.4">class MyDemo (demo_module.Demo):          def setup_script(self):         '''Delete all previously shown widgets.'''         self.delete_widgets()</t> <t tx="ekr.20170208063901.5">def callout(text, **keys):     w = demo_module.Callout(text, **keys)      def title(text, **keys):     w = demo_module.Title(text, **keys) </t> <t tx="ekr.20170208063946.1"></t> <t tx="ekr.20170530035032.1"></t> <t tx="ekr.20170530035032.2">''' The @auto importer for the {|{x=get_language()}|} language.  Created {|{x=time.strftime("%Y/%m/%d")}|} by the `importer;;` abbreviation. ''' import leo.plugins.importers.linescanner as linescanner Importer = linescanner.Importer @others importer_dict = {     'class': {|{x=cap_name}|}_Importer,     'extensions': [&lt;|comma-separated lists of extensions|&gt;],         # Example: ['.c', '.cc', '.c++', '.cpp', '.cxx', '.h', '.h++'] } @language python @tabwidth -4   </t> <t tx="ekr.20170530035032.3">class {|{x=cap_name}|}_Importer(Importer):     '''The importer for the {|{x=name}|} lanuage.'''      def __init__(self, importCommands):         '''{|{x=cap_name}|}_Importer.__init__'''         super().__init__(             importCommands,             language = '{|{x=name}|}',             state_class = {|{x=cap_name}|}_ScanState,             strict = &lt;|True leading whitespace is significant. Otherwise False|&gt;,         )              @others </t> <t tx="ekr.20170530035032.4"># These can be overridden in subclasses. </t> <t tx="ekr.20170530035032.5">### Define an override if desired...  if 0: # The base class     def clean_headline(self, s):         '''Return a cleaned up headline s.'''         return s.strip()          # A more complex example, for the C language.  # def clean_headline(self, s):     # '''Return a cleaned up headline s.'''     # import re     # type1 = r'(static|extern)*'     # type2 = r'(void|int|float|double|char)*'     # class_pattern = r'\s*(%s)\s*class\s+(\w+)' % (type1)     # pattern = r'\s*(%s)\s*(%s)\s*(\w+)' % (type1, type2)     # m = re.match(class_pattern, s)     # if m:         # prefix1 = '%s ' % (m.group(1)) if m.group(1) else ''         # return '%sclass %s' % (prefix1, m.group(2))     # m = re.match(pattern, s)     # if m:         # prefix1 = '%s ' % (m.group(1)) if m.group(1) else ''         # prefix2 = '%s ' % (m.group(2)) if m.group(2) else ''         # h = m.group(3) or '&lt;no c function name&gt;'         # return '%s%s%s' % (prefix1, prefix2, h)     # else:         # return s </t> <t tx="ekr.20170530035032.6">def clean_nodes(self, parent):     '''     Clean all nodes in parent's tree.     Subclasses override this as desired.     See perl_i.clean_nodes for an examplle.     '''     pass </t> <t tx="ekr.20170530035032.7">class {|{x=cap_name}|}_ScanState:     '''A class representing the state of the {|{x=name}|} line-oriented scan.'''          def __init__(self, d=None):         '''{|{x=cap_name}|}_ScanState.__init__'''         if d:             prev = d.get('prev')             self.context = prev.context             ### Adjust these by hand.             self.curlies = prev.curlies         else:             self.context = ''             ### Adjust these by hand.             self.curlies = 0      def __repr__(self):         '''{|{x=cap_name}|}_ScanState.__repr__'''         ### Adjust these by hand.         return "{|{x=cap_name}|}_ScanState context: %r curlies: %s" % (             self.context, self.curlies)      __str__ = __repr__      @others  </t> <t tx="ekr.20170530035032.8">def level(self):     '''{|{x=cap_name}|}_ScanState.level.'''     return &lt;|self.curlies|&gt;         ### Examples:         # self.indent # for python, coffeescript.         # self.curlies         # (self, curlies, self.parens) </t> <t tx="ekr.20170530035032.9">def update(self, data):     '''     {|{x=cap_name}|}_ScanState.update      Update the state using the 6-tuple returned by v2_scan_line.     Return i = data[1]     '''     context, i, delta_c, delta_p, delta_s, bs_nl = data     # All ScanState classes must have a context ivar.     self.context = context     self.curlies += delta_c       ### Update {|{x=cap_name}|}_ScanState ivars     # self.bs_nl = bs_nl     # self.parens += delta_p     # self.squares += delta_s     return i </t> </tnodes> </leo_file>
treebg : GS: path: myLeoSettings.leo source: @color tree-bg = #4cf7ec kind: color val: #4cf7ec
treedeclutter : GS: path: leoSettings.leo source: @bool tree-declutter = False kind: bool val: False
treedeclutterpatterns : GS: path: leoSettings.leo source: @data tree-declutter-patterns kind: data val: ['# **Decluttering** replaces controls custom formatting of headlines, including:\n', '\n', '# - Hiding or changing headline text,\n', '# - Adding icons to headlines,\n', '# - Changing the styling of headlines.\n', '\n', '# @bool tree-declutter must be True to enable decluttering.\n', '\n', "# blank lines and lines starting with '#' are ignored.\n", '# See the children of this node for details.\n', '# **Decluttering** replaces controls custom formatting of headlines, including:\n', '\n', '# - Hiding or changing headline text,\n', '# - Adding icons to headlines,\n', '# - Changing the styling of headlines.\n', '\n', '# Decluttering is *inactive* when you are editing a headline.\n', '\n', '# Decluttering is *completely optional*. To enable decluttering, use::\n', '\n', '     # @bool tree-declutter = True\n', '     \n', '# Decluttering is controlled by **decluttering rulesets**.\n', '# You specify decluttering rulesets in the body text of::\n', '     \n', '    # @data tree-declutter-patterns\n', '    \n', '# As usual with @data nodes:\n', '\n', "# - Blank lines and lines starting with '#' are ignored.\n", '# - You may organize the text of the @data node using child nodes.\n', '\n', '# Each ruleset consists of a list of lines:\n', '\n', '# - The first line is a **rule line**, containing a **find pattern**.\n', '# - The second line is a **replacement line**.\n', '# - The ruleset ends with zero or more **style lines**.\n', '\n', '# Find patterns are `regular expressions <https://docs.python.org/2/library/re.html>`_.\n', '# Decluttering affects only those headlines that match a rule pattern. \n', '\n', '# The following section shows some example rulesets. Later sections discuss decluttering commands, patterns and styles in more detail.\n', '# All rulesets start with a **rule line** of the form::\n', '\n', '    # RULE <regular expression>\n', '    \n', "# The ruleset matches a headline if and only if the regular expression matches. Matches can start anywhere in the headline. Leo first attempts to a match using re.match. If that doesn't work, Leo tries re.search.\n", '\n', '# A **replacement line** must follow the rule line. Here are the valid forms::\n', '\n', '    # REPLACE <substitution expression>\n', '    # REPLACE-HEAD\n', '    # REPLACE-TAIL\n', '    # REPLACE-REST\n', '    \n', '# - REPLACE replaces the headline by the value of the substitution expression.  For example::\n', '\n', '    # REPLACE \\1\n', '    \n', '  # matches replaces the headline by the first matched regex group.\n', '\n', '# - REPLACE-HEAD replaces replace the headline by the text that precedes the matched text.\n', '\n', '# - REPLACE-TAIL replaces the headline by the text that follows the matched text.\n', '\n', '# - REPLACE-REST replaces the headline by everything except the matched text.\n', '# Leo applies style lines only if they appear in a ruleset that matches a headline.\n', '# Style lines do the following...\n', '\n', '# Add an icon to the headline::\n', '\n', '    # ICON path/to/icon\n', '    \n', '# Set the background or foreground color to a color number or names::\n', '\n', '    # BG #FF8800\n', '    # FG @solarized-magenta\n', '\n', '# Set the font to a given font name::\n', '\n', '    # Font Times\n', '    \n', '# Set the font size in pixels (PX) or points (PT)::\n', '\n', '    # PX 40\n', '    # PT 16\n', '    \n', '# Enable or disable italics::\n', '\n', '    # ITALIC 0\n', '    # ITALIC 1\n', '\n', '# Set the font weight to one of Light, Normal, DemiBold, Bold, Black::\n', '\n', '    # WEIGHT DemoBold\n', '# Add Icon to folders and remove /-/\n', 'RULE ^/(.*)/$\n', 'REPLACE \\1 \n', 'ICON file_icons/folder.png\n', '\n', '# Add icon to path folders and remove @path\n', 'RULE ^@path (.*)\n', 'REPLACE \\1 \n', 'ICON file_icons/folder_path.png\n', '\n', '# Add Icon to removed folders and remove */-/*\n', 'RULE ^\\*/(.*)/\\*$\n', 'REPLACE \\1 \n', 'ICON file_icons/folder_removed.png\n', '\n', '# Add Icon to removed files and remove *-* but not **-**\n', 'RULE ^\\*([^\\*/]*[^\\*]*[^\\*/]*)\\*$\n', 'REPLACE \\1 \n', 'ICON file_icons/removed.png\n', "# if the node name starts with 'peacock node DEMO', make a mess of it\n", 'RULE ^(peacock node DEMO)\n', 'REPLACE LOOK: \\1\n', 'ICON Tango/16x16/emotes/face-grin.png\n', 'ICON Tango/16x16/emotes/face-wink.png\n', 'FG @solarized-magenta\n', 'BG white\n', 'FONT Times\n', 'PX 40\n', 'ITALIC 1\n', 'WEIGHT Bold\n', '# RULE :([\\w_@]+:)+\\s*$\n', '# REPLACE-HEAD\n', '# remove @clean etc. and use an icon\n', 'RULE ^@clean (.*)\n', 'REPLACE \\1\n', 'ICON file_icons/file_clean.png\n', '\n', 'RULE ^@auto (.*)\n', 'REPLACE \\1\n', 'ICON file_icons/file_auto.png\n', '\n', 'RULE ^@edit (.*)\n', 'REPLACE \\1\n', 'ICON file_icons/file_edit.png\n', '\n', 'RULE ^@asis (.*)\n', 'REPLACE \\1\n', 'ICON file_icons/file_asis.png\n', '\n', 'RULE ^@nosent (.*)\n', 'REPLACE \\1\n', 'ICON file_icons/file_nosent.png\n', '\n', 'RULE ^@file (.*)\n', 'REPLACE \\1\n', 'ICON file_icons/file_file.png\n', '# show the last part of long filenames\n', 'RULE ^.{1,1000}/(.{20})\n', 'REPLACE …/\\1\n']
treefg : GS: path: leoSettings.leo source: @color tree-fg = black kind: color val: black
treefontfamily : GS: path: leoSettings.leo source: @string tree-font-family = @font-family kind: string val: @font-family
treefontsize : GS: path: myLeoSettings.leo source: @string tree-font-size = 8pt kind: string val: 8pt
treefontstyle : GS: path: leoSettings.leo source: @string tree-font-style = @font-style kind: string val: @font-style
treefontweight : GS: path: leoSettings.leo source: @string tree-font-weight = @font-weight kind: string val: @font-weight
treeiconseparation : GS: path: leoSettings.leo source: @int tree-icon-separation = 1 kind: int val: 1
treeimageclosed : GS: path: leoSettings.leo source: @string tree-image-closed = None kind: string val: None
treeimageopen : GS: path: leoSettings.leo source: @string tree-image-open = None kind: string val: None
undefinedsectionnamecolor : GS: path: leoSettings.leo source: @color undefined-section-name-color = red kind: color val: red
underlineundefinedsectionnames : GS: path: leoSettings.leo source: @bool underline-undefined-section-names = True kind: bool val: True
undogranularity : GS: path: myLeoSettings.leo source: @string undo_granularity = word kind: string val: word
unlpathprefixes : GS: path: leoSettings.leo source: @data unl-path-prefixes kind: data val: ['# lines have the form:\n', '# x.leo: <absolute path to x.leo>\n', '\n', '# test.leo:    c:/Repos/leo-editor/leo/test\n', '# LeoDocs.leo: c:/Repos/leo-editor/leo/doc']
unlstatuskind : GS: path: leoSettings.leo source: @string unl-status-kind = gnx kind: string val: gnx
unselectedbodybgcolor : GS: path: leoSettings.leo source: @color unselected-body-bg-color = #ffffef kind: color val: #ffffef
unselectedbodyfgcolor : GS: path: leoSettings.leo source: @color unselected-body-fg-color = black kind: color val: black
unselectedtabbg : GS: path: leoSettings.leo source: @color unselected-tab-bg = lightgrey kind: color val: lightgrey
urlcolor : GS: path: leoSettings.leo source: @color url-color = purple kind: color val: purple
usechapters : GS: path: leoSettings.leo source: @bool use-chapters = True kind: bool val: True
usechaptertabs : GS: path: leoSettings.leo source: @bool use-chapter-tabs = True kind: bool val: True
usefinddialog : GS: path: leoSettings.leo source: @bool use-find-dialog = False kind: bool val: False
usegutter : GS: path: leoSettings.leo source: @bool use-gutter = True kind: bool val: True
usehyperlinks : GS: path: leoSettings.leo source: @bool use-hyperlinks = False kind: bool val: False
usejedi : GS: path: leoSettings.leo source: @bool use-jedi = False kind: bool val: False
usemouseexpandgestures : GS: path: leoSettings.leo source: @bool use-mouse-expand-gestures = False  kind: bool val: False
usepygments : GS: path: leoSettings.leo source: @bool use-pygments = False kind: bool val: False
usepygmentsstyles : GS: path: leoSettings.leo source: @bool use-pygments-styles = True kind: bool val: True
useqcompleter : GS: path: leoSettings.leo source: @bool use-qcompleter = True kind: bool val: True
usesyntaxcoloring : GS: path: leoSettings.leo source: @bool use-syntax-coloring = True kind: bool val: True
usexdbpaneoutputarea : GS: path: leoSettings.leo source: @bool use-xdb-pane-output-area kind: bool val: None
verbosecheckoutline : GS: path: myLeoSettings.leo source: @bool verbose-check-outline = True kind: bool val: True
viewrenderedautocreate : GS: path: leoSettings.leo source: @bool view-rendered-auto-create = False kind: bool val: False
viewrendereddefaultkind : GS: path: leoSettings.leo source: @string view-rendered-default-kind = rst kind: string val: rst
viewrenderedmdextensions : GS: path: leoSettings.leo source: @string view-rendered-md-extensions = extra kind: string val: extra
vimmode : GS: path: leoSettings.leo source: @bool vim-mode = False kind: bool val: False
vimmodeinsertborder : GS: path: leoSettings.leo source: @string vim-mode-insert-border = border: 3px solid red kind: string val: border: 3px solid red
vimmodenormalborder : GS: path: leoSettings.leo source: @string vim-mode-normal-border = border: 3px solid white kind: string val: border: 3px solid white
vimmodeunfocusedborder : GS: path: leoSettings.leo source: @string vim-mode-unfocused-border = border: 3px dashed white kind: string val: border: 3px dashed white
vimmodevisualborder : GS: path: leoSettings.leo source: @string vim-mode-visual-border = border: 3px solid gray kind: string val: border: 3px solid gray
vimpluginopensurlnodes : GS: path: leoSettings.leo source: @bool vim-plugin-opens-url-nodes = False kind: bool val: False
vimplugintrace : GS: path: leoSettings.leo source: @bool vim-plugin-trace = False kind: bool val: False
vr3asciidocpath : GS: path: leoSettings.leo source: @string vr3-asciidoc-path = None kind: string val: None
vr3defaultkind : GS: path: leoSettings.leo source: @string vr3-default-kind = None kind: string val: None
vr3exteditor : GS: path: leoSettings.leo source: @string vr3-ext-editor = NOne kind: string val: NOne
vr3insertheadlinefromnode : GS: path: leoSettings.leo source: @bool vr3-insert-headline-from-node = True kind: bool val: True
vr3mathjaxurl : GS: path: leoSettings.leo source: @string vr3-mathjax-url = None kind: string val: None
vr3mathoutput : GS: path: leoSettings.leo source: @bool vr3-math-output = False kind: bool val: False
vr3mdmathoutput : GS: path: leoSettings.leo source: @bool vr3-md-math-output = False kind: bool val: False
vr3mdstyleauto : GS: path: leoSettings.leo source: @bool vr3-md-style-auto  = True kind: bool val: True
vr3mdstylesheet : GS: path: leoSettings.leo source: @string vr3-md-stylesheet = None kind: string val: None
vr3preferasciidoc3 : GS: path: leoSettings.leo source: @bool vr3-prefer-asciidoc3 = False kind: bool val: False
vr3preferexternal : GS: path: leoSettings.leo source: @string vr3-prefer-external = None kind: string val: None
vr3rststylesheet : GS: path: leoSettings.leo source: @string vr3-rst-stylesheet = None kind: string val: None
vr3rstusedarktheme : GS: path: leoSettings.leo source: @bool vr3-rst-use-dark-theme = False kind: bool val: False
warnaboutmissingsettings : GS: path: leoSettings.leo source: @bool warn-about-missing-settings = False kind: bool val: False
warnaboutredefinedshortcuts : GS: path: leoSettings.leo source: @bool warn-about-redefined-shortcuts = True kind: bool val: True
warnwhenpluginsfailtoload : GS: path: leoSettings.leo source: @bool warn_when_plugins_fail_to_load = True kind: bool val: True
wholeword : GS: path: leoSettings.leo source: @bool whole-word = False kind: bool val: False
wikiviewactive : GS: path: leoSettings.leo source: @bool wikiview-active = True kind: bool val: True
wikiviewlinkpatterns : GS: path: leoSettings.leo source: @data wikiview-link-patterns kind: data val: ['# regex patterns for text to be hidden by the wikiview plugin\n', "# Blanks lines and lines starting with '#' are comment lines.\n", '\n', '# Each non-comment line represents a pattern.\n', "# Use \\b# for patterns starting with '#'\n", '# Only `groups` parts of the pattern in parentheses will be shown.\n', '# The first character of the pattern (not counting \\b) is the leadin character.\n', '# The pattern will be applied only for strings starting with the leadin character.\n', '\n', '# UNLs\n', '\n', '\\bunl:(//.*#.*-->).*\n', '\\bunl:(//.*#).*\n', '\\bunl:(//.*-->).*\n', '\\bunl:(//).*\n', '\\bfile:(//.*-->)\\S+\\b\n', '\\bhttps?:(//.*-->)\\S+\\b\n', '\n', '# regular urls\n', '\n', '\\bhttps?:(//.*/)\\w+\\b\n', '\\bfile:(//.*/)\\w+\\b\n', '\n', '# restructuredText `Visible text <http://invisible.url/here>`\n', '\n', '(`)\\S+(\\s*<https?://\\S+>`_)\n', '(`)\\S+(\\s*<file://\\S+>`_)\n', '\n', '# Test patterns: see http://pythex.org/\n', '\n', '# unl://leoSettings.leo#@settings-->Plugins-->wikiview plugin\n', '# unl://@settings-->Plugins-->wikiview plugin-->@bool wikiview-active = True\n', '# unl://#@settings-->Plugins-->wikiview plugin-->@bool wikiview-active = True\n', '# unl://#@settings-->Plugins-->wikiview plugin-->@bool wikiview-active\n', '# unl://#@settings-->Plugins-->wikiview plugin\n', '# file://#some-->headlines-->mynode\n', '# http://#some-->headlines-->mynode\n', '# https://#some-->headlines-->mynode\n', '# http://www.google.com/search\n', '# https://www.google.com/search\n', '# file://www.google.com/search\n', '# `Python <https://www.python.org/>`_ \n', '# `Python <file://www.python.org/>`_ \n']
wrap : GS: path: leoSettings.leo source: @bool wrap = False kind: bool val: False
writescriptfile : GS: path: leoSettings.leo source: @bool write-script-file = True kind: bool val: True
xemacsexe : GS: path: leoSettings.leo source: @string xemacs-exe = c:\XEmacs\XEmacs-21.4.21\i586-pc-win32\xemacs.exe kind: string val: c:\XEmacs\XEmacs-21.4.21\i586-pc-win32\xemacs.exe
zimnodename : GS: path: leoSettings.leo source: @string zim-node-name = Imported Zim Tree kind: string val: Imported Zim Tree
zimrstlevel : GS: path: leoSettings.leo source: @int zim-rst-level = 0 kind: int val: 0
zimrsttype : GS: path: leoSettings.leo source: @string zim-rst-type = rst kind: string val: rst
zodbstoragefile : GS: path: leoSettings.leo source: @string zodb-storage-file = c:\prog\zopeTemp\leo.fs kind: string val: c:\prog\zopeTemp\leo.fs
#@+node:bob.20240107141729.1: *4* One parameter entry in the Settings Dict
#@@language python

gs = c.config.settingsDict['scriptfilepath']
g.es(f'type(gs)={type(gs)}, gs={gs}')
g.es()
for attrX in [attrX for attrX in dir(gs) if attrX[0] != '_']:
    av  = getattr(gs, attrX)
    ta = type(av)
    g.es(f'type(gs.{attrX})={ta} | gs.{attrX}={av}')
#@+node:bob.20240107141902.1: *5* Output
type(gs)=<class 'leo.core.leoGlobals.GeneralSetting'>, gs=GS: path: myLeoSettings.leo source: @string script_file_path = /sec/tmp/leoScript.py kind: string val: /sec/tmp/leoScript.py

type(gs.dump)=<class 'method'> | gs.dump=<bound method GeneralSetting.__repr__ of GS: path: myLeoSettings.leo source: @string script_file_path = /sec/tmp/leoScript.py kind: string val: /sec/tmp/leoScript.py>
type(gs.encoding)=<class 'NoneType'> | gs.encoding=None
type(gs.ivar)=<class 'NoneType'> | gs.ivar=None
type(gs.kind)=<class 'str'> | gs.kind=string
type(gs.path)=<class 'str'> | gs.path=/home/bob/.leo/myLeoSettings.leo
type(gs.source)=<class 'str'> | gs.source=@string script_file_path = /sec/tmp/leoScript.py
type(gs.tag)=<class 'str'> | gs.tag=setting
type(gs.unl)=<class 'str'> | gs.unl=unl:gnx://myLeoSettings.leo#bob.20101116122932.4008
type(gs.val)=<class 'str'> | gs.val=/sec/tmp/leoScript.py
#@+node:bob.20231229145158.1: *3* The help is displayed as raw markdown.
#@+node:bob.20231229144523.1: *3* Pull Request
This revision does the following:

* Implements a new option "Leo-Babel-Sudo" to run the script using sudo.  The default setting for this option is off.

* Implements a new option "Leo-Babel-Tab-Babel" to use a "Babel" tab in the Log pane for all Leo-Babel output.

* Implements line prefix options to indicate the type of each line in the "Babel" tab of the Log pane.

* Implements a new option "Leo-Babel-Poll-Delay" to specify the output polling delay in milliseconds.  Previously the delay was 1000.  Now the default is 1.

* Inserts a shebang line as the first line in every script file.  This isn't needed by Leo-Babel which specifies the interpreter for the script file, but it allows the user to safely run the script without specifying the interpreter.

* Changes the default color for "Leo-Babel-stdout"

* Changes the default color for "Leo-Babel-stderr"

* Deprecates Babel Parameter "Leo-Babel-Node-Creation-Default" in favor of "Leo-Babel-Node-Creation".

* Deprecates Babel Parameter "Leo-Babel-completion" in favor of "Leo-Babel-information".

* Changes the default color for "Leo-Babel-information"

* Changes the default for Babel Parameter "Leo-Babel-Python".

* Changes the default for Babel Parameter "Leo-Babel-Shell".
#@+node:bob.20170508125827.1: ** Issues
#@+node:bob.20170319141959.1: *3* uA's
I don't understand Terry Brown's attrib_edit.py plugin.  I think it is inadequate anyway.

I might look at it for help coding a Babel specific editing facility.

Jacob Peck's nodetags.py may be useful for classifying nodes into possibly overlapping sets, but I doubt that Babel can use it.
I have never felt a need for tags--unless I could have used them in my application lists.  A tag for each OS under which an application runs would have allowed me to list the applications in strictly alphabetical order.

Peck's UI seems good to me.  I think it includes everything you need.

----
Babel's uA's:

p.v.u['Babel'] = dictionary whose keys and values are strings.
    The keys are the Babel parameter names:
        Key                         Value
        src                         Language name.  Examples:  bash, python
                Currently EKR favors using @language directives for this.
        output                      "function", "stdout", "stderr", "stdout-stderr", "stdout->stderr"
        session                     Session name
        name                        Name of block ???? -- i.e. function name
        variable                    Name of function variable ??? There may be many variables

How would this be implemented as a bash function?
How is session implemented?

#@+node:bob.20170320163045.1: *3* Sessions
For a session start an interpreter (Python or BASH) taking its input from stdin.
Then feed the interpreter code as it becomes available.
Terminate the session with a Ctrl-D (or EOF) to stdin.


Problem:  If the interpreter doesn't terminate after processing a batch of code, how do I tell that the interpreter has finished and is idle?

Possible solution:  Send the interpreter a command that causes it to output a magic number to stdout when it finishes the batch of code.
#@+node:bob.20170311143506.1: *3* Execute in terminal
xfce4-terminal --hold  -e 'ls -la'

Don't use -e or -x because after the command executes, keyboard input is ignored, but mouse input is not ignored.

--working-directory=

Forget this.
#@+node:bob.20170318153557.1: *4* Notes
root      2479  2479  2460  1 14:07 tty7     00:02:18 /usr/lib/xorg/Xorg -core :0 -seat seat0 -auth /var/run/lightdm/root/:0 -nolisten tcp vt7 -novtswitch
root      2875  2875     1  0 14:07 tty1     00:00:00 /sbin/agetty --noclear tty1 linux
bob       8811  8811     1  0 15:36 ?        00:00:01 xfce4-terminal
bob       8816  8816  8811  0 15:36 pts/0    00:00:00 bash
bob      14618 14618  8816  0 17:13 pts/0    00:00:00 ps -Te -f


bob       4600  4600     1  0 14:26 ?        00:00:00 python /pri/bin/leomy /pri/git/leoMySettings/doc.leo

So the Leo-Editor processes started by Thunar are not associated with any terminal.

https://www.digitalocean.com/community/tutorials/how-to-use-bash-s-job-control-to-manage-foreground-and-background-processes

Linux terminals are usually configured to send the "SIGINT" signal (typically signal number 2) to current foreground process when the CTRL-C key combination is pressed. The SIGINT signal tells the program that the user has requested termination using the keyboard.

What is the crucial difference between starting a program from a terminal and starting it from Thunar?

 ps -fe|grep pyqt
bob      16228     1  0 17:40 ?        00:00:00 python3 /pri/git/leoMySettings/pyqtSIGINT.py
bob      16357     1  0 17:42 ?        00:00:00 python3 /pri/git/leoMySettings/pyqtSIGINT.py
bob      16486     1  0 17:43 ?        00:00:00 python3 /pri/git/leoMySettings/pyqtSIGINT.py
bob      16795     1  0 17:49 ?        00:00:00 python3 /pri/git/leoMySettings/pyqtSIGINT.py
All started from Thunar

bob      17232  8816  0 17:54 pts/0    00:00:00 python3 pyqtSIGINT.py
Started from a terminal


XFCE Session acts the same as the i3wm session.

The terminal window has to have focus in order for the grandchild process to see the SIGINT.

terminal window process --> bash process --> Python pqtSIGIN.py process
#@+node:bob.20170313153912.1: *4* Windows
https://msdn.microsoft.com/en-us/library/windows/desktop/ms682541(v=vs.85).aspx

CTRL+C and CTRL+BREAK Signals

The CTRL+C and CTRL+BREAK key combinations receive special handling by console processes. By default, when a console window has the keyboard focus, CTRL+C or CTRL+BREAK is treated as a signal (SIGINT or SIGBREAK) and not as keyboard input. By default, these signals are passed to all console processes that are attached to the console. (Detached processes are not affected.) The system creates a new thread in each client process to handle the event. The thread raises an exception if the process is being debugged. The debugger can handle the exception or continue with the exception unhandled.

CTRL+BREAK is always treated as a signal, but an application can change the default CTRL+C behavior in two ways that prevent the handler functions from being called:

    The SetConsoleMode function can disable the ENABLE_PROCESSED_INPUT input mode for a console's input buffer, so CTRL+C is reported as keyboard input rather than as a signal.
    When SetConsoleCtrlHandler is called with NULL and TRUE values for its parameters, the calling process ignores CTRL+C signals. Normal CTRL+C processing is restored by calling SetConsoleCtrlHandler with NULL and FALSE values. This attribute of ignoring or not ignoring CTRL+C signals is inherited by child processes, but it can be enabled or disabled by any process without affecting existing processes.

#@+node:bob.20170313154400.1: *4* X-Windows
https://groups.google.com/forum/#!topic/fj.mail-lists.x-window/Ln0l_9c98U0

The SIGINT signal that you are referring to is generated by the shell
on the receipt of a Control-C.  When you run your X program in the
foreground, from a shell, this causes it to die.  When a Control-C is
typed while the focus is in your X program's window it receives the
keypress event for the Control-C key.  What it does is up to you.  You
can check for it and exit your program if you wish.  But this is
strictly up to you.
#@+node:bob.20170314132904.1: *3* Current Leo-Editor & Ctrl-C to its terminal
2017-03-14 13:26:33 /pri/git/leoMySettings
$ leomy x.leo
setting leoID from os.getenv('USER'): 'bob'
reading settings in /pri/git/leo-editor/leo/config/leoSettings.leo
reading settings in /pri/git/leoMySettings/myLeoSettings.leo
Found /help

** isPython3: True
Leo 5.4-devel, build 20160722143100, Fri, Jul 22, 2016  2:31:00 PM
Git repo info: branch = master, commit = 4ca08e65fde0
Python 3.5.2, PyQt version 5.5.1
linux
^CTraceback (most recent call last):
  File "/pri/git/leo-editor/leo/plugins/qt_idle_time.py", line 91, in at_idle_time
    def at_idle_time(self):
KeyboardInterrupt

[Ctrl-C entered to the terminal window.  Bash generates the SIGINT. Leo-Editor outputs the trace and keeps running.]
#@+node:bob.20170508114725.1: ** -- Abandoned --
#@@language plain
#@+node:bob.20180113152757.1: *3* Not used by Leo-Babel, but may be worth documenting
Abandoned:  2018-01-13 16:34:49
#@verbatim
#@file%20doc/doc.txt-->To%20Do-->Not%20used%20by%20Leo-Babel,%20but%20may%20be%20worth%20documenting
#@+node:bob.20180113152236.1: *4* leoG.handleUnl()
handleUnl(unl, c)


Returns:
    cmdr:  Commander for UNL not equal to commander c
        None --> unl is for commander c

Side Effects:
    If the UNL specifies another Leo-Editor file, it is opened and brought to the front.
    If the UNL specifies an existing node, then all the ancestors of the node are expanded,
        the node is expanded, and the node is selected.
    If the UNL does not specify an existing node, 'Partial UNL match' may be printed to the Log pane?

This handles the protocol prefix.
This handles the pathname part.

The interface to this function is both too complicated and too restrictive for my use.
#@+node:bob.20180112173658.1: *3* leoG.recursiveUNLSearch()
Abandoned:  2018-01-13 16:34:43
#@verbatim
#@file%20doc/doc.txt-->To%20Do-->leoG.recursiveUNLSearch()
Maybe leoG.recursiveUNLSearch() should replace babel.unl2pos()?

recursiveUNLSearch(unlList, c, depth=0, p=None, maxdepth=0, maxp=None,
                       soft_idx=False, hard_idx=False)

recursiveUNLFind(unlList, c, depth=0, p=None, maxdepth=0, maxp=None,
                     soft_idx=False, hard_idx=False):
    """
    Internal part of recursiveUNLSearch which doesn't change the
    selected position or call c.frame.bringToFront()

    returns found, depth, p, where:

        - found is True if a full match was found
        - depth is the depth of the best match
        - p is the position of the best match

    NOTE: maxdepth is max depth seen in recursion so far, not a limit on
          how far we will recurse.  So it should default to 0 (zero).

    - `unlList`: list of 'headline', 'headline:N', or 'headline:N,M'
      elements, where N is the node's position index and M the zero based
      count of like named nodes, eg. 'foo:2', 'foo:4,1', 'foo:12,3'
    - `c`: outline
    - `soft_idx`: use index when matching name not found
    - `hard_idx`: use only indexes, ignore node names
    - `depth`: part of recursion, don't set explicitly
    - `p`: part of recursion, don't set explicitly
    - `maxdepth`: part of recursion, don't set explicitly
    - `maxp`: part of recursion, don't set explicitly
    """

Side Effects:
    If the UNL specifies another Leo-Editor file, it is opened and brought to the front.
    If the UNL specifies an existing node, then all the ancestors of the node are expanded,
        the node is expanded, and the node is selected.
    If the UNL does not specify an existing node, 'Partial UNL match' may be printed to the Log pane?

This does not handle the protocol prefix.
This does not handle the pathname part.

The interface for this function is both too complicated and too restrictive for my use.
#@+node:bob.20171023082456.1: *3* consider BackgroundProcessManager
Abandoned:  2018-01-08 16:04:27
#@verbatim
#@file%20doc/doc.txt-->To%20Do-->consider%20BackgroundProcessManager
#@+node:bob.20171209090826.1: *3* Leo-Editor process script before and script after
Abandoned:  2018-01-05 12:20:46
#@verbatim
#@file%20doc/doc.txt-->To%20Do-->Leo-Editor%20process%20script%20before%20and%20script%20after
What could the after script be used for?
    Processing babel-script output and updating the Leo-Editor file.
#@+node:bob.20170707141426.3: *3* Scripts as Functions ##
Abandoned:  2018-01-04 15:46:24
#@verbatim
#@file%20doc/doc.txt-->Issues-->Needed%20Further%20Decisions%20#-->Scripts%20as%20Functions%20##
Emacs-Babel allows a script to be used as a function. This makes sense because Emacs Babel is implemented in Emacs Lisp.

Leo-Babel is implemented in Python. Is it worthwhile for Leo-Babel to allow a script to be used as a function?

Treating scripts as functions requires implementing several options.

* Tag: Function name
* Value: function name

* Tag: Variables
* Value: List of variable names

The above is just about all I know about Emacs-Babel scripts as functions. I suspect there are many problems with the idea, and I've no desire to use scripts as functions.

#@+node:bob.20170910153501.1: *3* Scheme for "Interpeter Sessions"
Abandoned:  2018-01-04 12:40:45
#@verbatim
#@file%20doc/doc.txt-->To%20Do-->Scheme%20for%20"Interpeter%20Sessions"
Benefits:

Bash:
    One script can set environment variables that are used by a following script.

Python:
    One script can set global variables that are used by a following script.


But I don't know how to achieve this.
#@+node:bob.20170918103141.1: *3* Scheme for passing information between scripts
Abandoned:  2018-01-04 12:39:58
#@verbatim
#@file%20doc/doc.txt-->To%20Do-->Scheme%20for%20passing%20information%20between%20scripts
Python:
Sending script:
Write a file containing json or Python.
Receiving script:
Read the file as json or read the file and execute it as Python.

Bash:
Sending Script:
Write a file containing Bash.
Receiving script:
dot include the script.
#@+node:bob.20170910152805.1: *3* Scheme for "piping" scripts together
Abandoned:  2018-01-04 12:39:24
#@verbatim
#@file%20doc/doc.txt-->To%20Do-->Scheme%20for%20"piping"%20scripts%20together
If pipe_from is set to a UNL or cmdr, position, then this position must be a "Results root" and the most recent stdout node (that is, child 0 of the "Results root") body is sent to the stdin for the script.
#@+node:bob.20171220144315.1: *3* Piping Facility
Abandoned:  2018-01-04 12:38:03
#@verbatim
#@file%20doc/doc.txt-->To%20Do-->Piping%20Facility
What piping facility?

I'm not interested in this, so I won't do it.
#@+node:bob.20170709115034.1: *3* Option to output to stdout each line before executing it.
Abandoned:  2017-07-09 11:50:37
#@verbatim
#@file%20doc.txt-->To%20Do-->Option%20to%20output%20to%20stdout%20each%20line%20before%20executing%20it.
This may not be practical.  The line may contain redirections.  The line may not be a complete executable.
#@+node:bob.20170705161531.1: *3* Implement @babel-script and @babel-results
Abandoned:  2017-07-06 09:41:39
#@verbatim
#@file%20doc.txt-->To%20Do-->Implement%20@babel-script%20and%20@babel-results
'/pri/git/leo_lib/lib_leo01.py'
    This library provides the UNL and GNX functions I need.

This change is needed to allow source controlling the script.
This change is needed to allow splitting a script into several nodes.
This change is needed to allow source controlling the results.

I could require at least two children with the first child the script and the second the results.
#@+node:bob.20170508130041.1: *3* Terminals
Abandoned:  2017-05-09 11:02:15
#@verbatim
#@file%20doc.txt-->To%20Do-->Terminals
Just start a terminal to execute the script.

http://stackoverflow.com/questions/19308415/execute-terminal-command-from-python-in-new-terminal-window

My preferred terminal emulator is xfce4-terminal
http://docs.xfce.org/apps/terminal/command-line
    Can -e and -x be combined?  Doesn't matter if I can't figure out how to command the terminal to exit.

Shift-Ctrl-Q makes xfce4-terminal terminate.

Can I use subprocess to start xfce4-terminal and stdin to pass the terminal commands?  No.
Or should I pass the terminal all the Bash script lines instead of putting them in a file?
A Python script would have to be put in a file and the terminal told to execute the Python interpreter on the file?
Could an interactive Python interpreter be started and then passed the Python code?
#@+node:bob.20170508165122.1: *4* Terminal branch: Terminal
#@+node:bob.20170509105110.1: *4* --disable-server
Without the --disable-server command line option, Python thinks the subprocess terminates as soon as the terminal starts.
With the --disable-server, Python thinks the subprocess terminates when the terminal terminates.
Unfortuante, the terminal does NOT pass on the Bash/Python script's stdout and stderr output to the terminal's stdout and stderr, so my Python program never sees this output.

The terminal takes keyboard input, but it does NOT take stdin input from my program that started it.  My program hangs in
subPscript.communicate(input=pathScript) till the terminal terminates.  This means that Leo-Editor is so unresponsive that it can't even show its window when its window is brought to the top of the desktop.
#@+node:bob.20170508165225.1: *4* How does a remote terminal work?
I believe the only terminal involved is local.  I believe the program running on the remote CPU is a "remote terminal" program.  The "remote terminal" client running on the local CPU reads stdin and passes it to the remote terminal which uses a subprocess to execute it passing back stdout and stderr to the remote terminal client which passes them to its stdout and stderr which causes the terminal to display them.

None of this suggests any scheme that would do what I want to do.
#@+node:bob.20170508144319.1: *4* Problems
['xfce4-terminal', '-e', '" {intp} -c {psc} ; exec {intp}"'.format(intp=interp, psc=pathScript)]

Causes:

Failed to connect to session manager: Failed to connect to the session manager: SESSION_MANAGER environment variable not defined
----

FileNotFoundError: [Errno 2] No such file or directory: 'xfce4-terminal -e "/bin/bash -c /sec/tmp/leoScript.py ; exec /bin/bash"'

On POSIX, if args is a string, the string is interpreted as the name or path of the program to execute. However, this can only be done if not passing arguments to the program.
----
I can get an xfce4-terminal to execute a Bash script and a Python script.

The xfce4-terminal tab started does NOT allow keyboard input, but it does respond to mouse input.
If there is an error the xfce4-terminal may stay around when the script finishes.
-H is required to make the xfce4-terminal terminal stay around when there is no error.
#@+node:bob.20170429174552.1: *3* asyncio
Abandoned:  2017-05-08 11:47:25
#Root-->To%20Do-->Bob%20--%200%20Babel-->asyncio
https://docs.python.org/3/library/asyncio.html

SubprocessProtocol
https://docs.python.org/3/library/asyncio-subprocess.html
#@+node:bob.20170508114649.1: ** -- Done --
#@@language plain
#@+node:bob.20240101114030.1: *3* Can None be a default for a bool and a color? Yes
Done:  2024-01-02 11:11:36
#@verbatim
#@file%20doc/doc.txt-->To%20Do-->Can%20None%20be%20a%20default%20for%20a%20bool%20and%20a%20color?%20Yes
None is the default for a string parameter

None is the default for a color parameter.  So None is OK for a color.

getBool() returns None if the parameter is not found.

getInt() returns None if the parameter is not found.
#@+node:bob.20231230132436.1: *3* Implement a Leo-Babel tab of the Log pane.
Done:  2023-12-30 15:21:18
#@verbatim
#@file%20doc/doc.txt-->To%20Do-->Implement%20a%20Leo-Babel%20tab%20of%20the%20Log%20pane.
log.selectTab('xxx') creates and selects tab if it does not exist and puts a LeoQTextBrowser widget in it
log.selectTab('Spell') silently fails leaving the tab selection unchanged.
log.deleteTab('xxx') works.  It silently does nothing if the tab does not exist.

g.es('This is sample output', tabName='xxx', color='blue')
#@+node:bob.20170528151922.1: *3* Problem:  All Leo-Editor processes seem to share stderr
Done:  2018-03-24 11:50:50
#@verbatim
#@file%20doc/doc.txt-->To%20Do-->Problem:%20%20All%20Leo-Editor%20processes%20seem%20to%20share%20stderr
2017-05-28 Sun
I started Leo-Editor in workspace 2 on xubuntu.leo.
I used Alt-B to execute a script to backup files.  This ran a long time.
I started Leo-Editor in workspace 3 on /pri/gi/leoMySettings/code.leo.
I used Ctrl-B to execute a script in workspace 3.  This generated some messages to stderr.
These messages were echoed to the log pane in workspace 2.

I can't believe this.
I conjecture that what happened was I started Leo-Editor, I opened a second file in a second tab.  I split this tab off in a new window (right click, detach).  I moved the window to workspace 2.

But I could not reproduce the error without involving Leo-Babel.

Now I need to involve Leo-Babel.
#@+node:bob.20180319163956.1: *3* Insure the stdout and stderr polls are done after the command finishes
Done:  2018-03-20 12:18:28
#@verbatim
#@file%20doc/doc.txt-->To%20Do-->Insure%20the%20stdout%20and%20stderr%20polls%20are%20done%20after%20the%20command%20finishes
Flags in babelCmdr
    cmdDoneStdPolled
    cmdDoneErrPolled
    cmdDoneFlag
#@+node:bob.20180128085205.1: *3* I could implement IdleTime() and monkey patch.
Done:  2018-03-17 10:04:58
#@verbatim
#@file%20doc/doc.txt-->To%20Do-->I%20could%20implement%20IdleTime()%20and%20monkey%20patch.
Just a loop using sleep.

Can I monkey patch leoG before calling LeoBridge?
Yes, see '/pri/git/leo_babel/experiments/monkeyPatchIdleTime.py'
#@+node:bob.20180109135343.1: *3* Reconsider babel.unl2pos()
Done:  2018-01-12 17:29:13
#@verbatim
#@file%20doc/doc.txt-->To%20Do-->Reconsider%20babel.unl2pos()
If the UNL has no pathname part, then the commander is needed.
If the UNL has a pathname part, then the commander is ignored.

Maybe I should require that a UNL always has a pathname part?
Maybe I should error out if the UNL has no pathname part, and the cmdr is None?
Maybe I should error out if the UNL has a pathname part and the cmdr is not None?

pathname part and cmdr --> Error
no pathname part and no cmdr --> Error
#@+node:bob.20180105121601.1: *3* Major Options Increase
Done:  2018-01-08 16:03:20
#@verbatim
#@file%20doc/doc.txt-->To%20Do-->Major%20Options%20Increase
#@+node:bob.20180105121645.1: *4* Settings
Leo-Babel-Node-Creation-Default

Leo-Babel-Python

Leo-Babel-Shell
#@+node:bob.20180105121835.1: *4* Babel Parameters Script
babel_node_creation

babel_python

babel_shell

babel_redirect_stdout
#@+node:bob.20171220153056.1: *3* Make a table of contents again
Done:  2017-12-28 14:05:17
#@verbatim
#@file%20doc.txt-->To%20Do-->Make%20a%20table%20of%20contents%20again
https://github.com/jgm/pandoc/wiki/Pandoc-Tricks#toc-generation
This is how I did it.  2017-12-28 Thu
#@+node:bob.20170921103803.1: *3* is leo-babel pseudo-installed
Done:  2017-09-21 10:38:48
#@verbatim
#@file%20doc.txt-->To%20Do-->is%20leo-babel%20pseudo-installed
Yes, in that '/pri/git/leo-editor/leo/plugins/leo_babel' points to /pri/git/leo-editor/leo/plugins.

But the includes

    from leo_babel import babel_api
    from leo_babel import babel_lib

Do not work for installation:

$ echo $PYTHONPATH
/pri/git:/pri/git/leo-editor

There is no __init__.py in leo-editor, there is in leo-editor/leo, and none in leo-editor/leo/plugins.

But the __init__.py in leo-editor/leo is the only one needed.  It makes it's whole subtree a package.

2017-09-21 Thu 10:38:17 fixed
#@+node:bob.20170713153133.1: *3* UNL's
Done:  2017-08-16 14:57:52
#@verbatim
#@file%20doc.txt-->To%20Do-->Next-->Separate%20files%20for%20scripts%20and%20for%20results?-->UNL%27s
I need to go from a UNL to a position.  I think I must provide my own function.  The Leo-Editor code does not contain such a function.
------
Can you Ctrl-Right-Click on a UNL to go to the node?
unl:///pri/git/leo_babel/doc.leo#@file doc.txt-->To Do-->What benefits do script-function parameters provide?
Yes, the above UNL can be right clicked to go to the position.

Can you copy a UNL to the clipboard?
No.  But you can copy the UNL in the status line.  You need to add the protocol.
I should make this available:
p.get_UNL(with_file=False, with_proto=True, with_index=False)


The UNL's of the script and result nodes can be parameters in the Python code in the Babel node.

UNL commands:

double-click-icon-box
    goes to UNL in headline beginning with @url or the UNL in the first line of the body.
    The UNL in the body takes priority.

Ctrl-left-click on a URL including a UNL
    Tries if the URL begins file:/.  Doesn't work if there are any spaces in the UNL.  Doesn't work if the spaces in the UNL are replaced with %20's.
------

p.get_UNL(with_proto=verbose, with_index=verbose)
def get_UNL(self, with_file=True, with_proto=False, with_index=True):
    """
    with_file=True - include path to Leo file
    with_proto=False - include 'file://'
    """

def recursiveUNLSearch(unlList, c, depth=0, p=None, maxdepth=0, maxp=None,
                       soft_idx=False, hard_idx=False):
    """try and move to unl in the commander c

    All parameters passed on to recursiveUNLFind(), see that for docs.

    NOTE: maxdepth is max depth seen in recursion so far, not a limit on
          how far we will recurse.  So it should default to 0 (zero).
    """

g.recursiveUNLFind()
def recursiveUNLFind(unlList, c, depth=0, p=None, maxdepth=0, maxp=None,
                     soft_idx=False, hard_idx=False):
    """
    Internal part of recursiveUNLSearch which doesn't change the
    selected position or call c.frame.bringToFront()

    returns found, depth, p, where:

        - found is True if a full match was found
        - depth is the depth of the best match
        - p is the position of the best match

    NOTE: maxdepth is max depth seen in recursion so far, not a limit on
          how far we will recurse.  So it should default to 0 (zero).

    - `unlList`: list of 'headline', 'headline:N', or 'headline:N,M'
      elements, where N is the node's position index and M the zero based
      count of like named nodes, eg. 'foo:2', 'foo:4,1', 'foo:12,3'
    - `c`: outline
    - `soft_idx`: use index when matching name not found
    - `hard_idx`: use only indexes, ignore node names
    - `depth`: part of recursion, don't set explicitly
    - `p`: part of recursion, don't set explicitly
    - `maxdepth`: part of recursion, don't set explicitly
    - `maxp`: part of recursion, don't set explicitly
    """

url = g.getUrlFromNode(p)
g.handleUrl(url, c=c, p=p)
def handleUrl(url, c=None, p=None):
    Reopens the Leo-Editor file
def handleUnl(unl, c):
    Just goes to the target node.
def isValidUrl(url):
def handleUrlHelper(url, c, p):
    '''Open a url.  Most browsers should handle:
        ftp://ftp.uu.net/public/whatever
        http://localhost/MySiteUnderDevelopment/index.html
        file:///home/me/todolist.html
    '''
#@+node:bob.20170706094149.1: *3* 1st child is script, 2nd child is results
Done:  2017-07-06 10:41:53
#@verbatim
#@file%20doc.txt-->To%20Do-->1st%20child%20is%20script,%202nd%20child%20is%20results
#@+node:bob.20170509113745.1: *3* Problem:  If the script doesn't flush() stdout and stderr, then output isn't seen till process termination.
Done:  2017-05-09 14:24:36
#@verbatim
#@file%20doc.txt-->To%20Do-->Problem:%20%20If%20the%20script%20doesn%27t%20flush()%20stdout%20and%20stderr,%20then%20output%20isn%27t%20seen%20till%20process%20termination.
Having Babel call flush() on its read and write file descriptors does NOT help.  Babel's file descriptors do not buffer.  But the target script's file descriptors do buffer.

This is an issue only for Python scripts.  The Bash interpreter never buffers stdout or stderr.

xfce-teminal gets around this problem.  How?

https://unix.stackexchange.com/questions/25372/turn-off-buffering-in-pipe

Note: On debian systems, this is called expect_unbuffer and is in the expect-dev package, not the expect package – bdonlan Jan 24 '11 at 11:14
---
unbuffer applied to the interpreter eliminates all buffering--but it redirects stderr to stdout.
I can't find anything about the unbuffer problem.
---

https://www.turnkeylinux.org/blog/unix-buffering
Fortunately, in most recent Linux distributions (including TKL 11 / Ubuntu Lucid / Debian Squeeze) there's a new command called stdbuf which allows you to configure the default Unix buffering for an arbitrary program.

http://www.pixelbeat.org/programming/stdio_buffering/

http://stackoverflow.com/questions/3465619/how-to-make-output-of-any-shell-command-unbuffered



Try stdbuf, included in GNU coreutils and thus virtually any Linux distro. This sets the buffer length for input, output and error to zero:

stdbuf -i0 -o0 -e0 command

---
stdbuf applied to the interpreter does nothing.
stdbuf doesn't work for me.
---

http://stackoverflow.com/questions/107705/disable-output-buffering

The Python interpreter command line option -u causes it to unbuffer.

https://docs.python.org/3/using/cmdline.html
-u

    Force the binary layer of the stdout and stderr streams (which is available as their buffer attribute) to be unbuffered. The text I/O layer will still be line-buffered if writing to the console, or block-buffered if redirected to a non-interactive file.

    See also PYTHONUNBUFFERED.
----
https://docs.python.org/3/library/subprocess.html

 class subprocess.Popen(args, bufsize=-1, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=True, shell=False, cwd=None, env=None, universal_newlines=False, startupinfo=None, creationflags=0, restore_signals=True, start_new_session=False, pass_fds=(), *, encoding=None, errors=None)



Popen.stdout

    If the stdout argument was PIPE, this attribute is a readable stream object as returned by open(). Reading from the stream provides output from the child process. If the encoding or errors arguments were specified or the universal_newlines argument was True, the stream is a text stream, otherwise it is a byte stream. If the stdout argument was not PIPE, this attribute is None.
---
So the default is binary.
---


Popen.stderr

    If the stderr argument was PIPE, this attribute is a readable stream object as returned by open(). Reading from the stream provides error output from the child process. If the encoding or errors arguments were specified or the universal_newlines argument was True, the stream is a text stream, otherwise it is a byte stream. If the stderr argument was not PIPE, this attribute is None.
---
So the default is binary.
---

So I tried just using PIPE, and the first read hangs till the process terminates.
#@+node:bob.20170428171335.1: *3* How do I get the current language from Leo-Editor?
Done:  2017-05-08 11:48:02
#Root-->To%20Do-->Bob%20--%200%20Babel-->How%20do%20I%20get%20the%20current%20language%20from%20Leo-Editor?
    if g.scanForAtLanguage(c, c.p) == "python":
        pp.prettyPrintNode(c.p)
#@+node:bob.20170429091318.1: *3* Problem:  readline() hangs till it has a line.
Done:  2017-05-08 11:47:15
#Root-->To%20Do-->Bob%20--%200%20Babel-->Problem:%20%20readline()%20hangs%20till%20it%20has%20a%20line.
Consequently, there needs to be 4 processes:
    1) The Leo-Editor process
    2) The Babel process executing shell or Python.
    3) A process to call readline on the Babel process's stdout.
    4) A process to call readline on the Babel process's stderr.

I need a FIFO queue of lines for 3 to pass lines to 1.
I need a FIFO queue of lines for 4 to pass lines to 1.

http://semanchuk.com/philip/posix_ipc/

https://docs.python.org/2/library/ipc.html

https://docs.python.org/3.5/library/ipc.html

http://stackoverflow.com/questions/6920858/interprocess-communication-in-python
https://docs.python.org/3/library/multiprocessing.html

https://docs.python.org/3/library/threading.html#module-threading

http://rpyc.readthedocs.io/en/latest/

https://kevinmccarthy.org/2016/07/25/streaming-subprocess-stdin-and-stdout-with-asyncio-in-python/

http://stackoverflow.com/questions/18421757/live-output-from-subprocess-command
1) creating an iterator from the read or readline functions
or
2) create a reader and a writer file. Pass the writer to the Popen and read from the reader.

The only advantage of the file approach is that your code doesn't block. So you can do whatever you want in the meantime and read whenever you want from the reader in a non-blocking way. When you use PIPE, read and readline functions will block until either one character is written to the pipe or a line is written to the pipe respectively.

http://stackoverflow.com/questions/25750468/displaying-subprocess-output-to-stdout-and-redirecting-it
This looks somewhat promising StringIO  or asyncio offered.
The StringIO "solution" is  bullshit.  It accomplishes nothing.
#@+node:bob.20170502161625.1: *4* Solution: Redirect stdout and stderr to disk files.
#@+node:bob.20170430140201.1: *4* StringIO
You can't pass a StringIO buffer to Popen as stdout or stderr:

io.UnsupportedOperation: fileno
#@+node:bob.20170502161644.1: *3* Problem:  A shell script is not terminated by SIGTERM
Done:  2017-05-08 11:46:49
#Root-->To%20Do-->Bob%20--%200%20Babel-->Problem:%20%20A%20shell%20script%20is%20not%20terminated%20by%20SIGTERM
Maybe a Python script with no exception handlers would not be terminated either?

Bash signals

Kill bash running in a subprocess

https://www.gnu.org/software/bash/manual/html_node/Signals.html

When Bash is interactive, in the absence of any traps, it ignores SIGTERM (so that ‘kill 0’ does not kill an interactive shell), and SIGINT is caught and handled (so that the wait builtin is interruptible). When Bash receives a SIGINT, it breaks out of any executing loops. In all cases, Bash ignores SIGQUIT. If job control is in effect (see Job Control), Bash ignores SIGTTIN, SIGTTOU, and SIGTSTP.

Non-builtin commands started by Bash have signal handlers set to the values inherited by the shell from its parent. When job control is not in effect, asynchronous commands ignore SIGINT and SIGQUIT in addition to these inherited handlers. Commands run as a result of command substitution ignore the keyboard-generated job control signals SIGTTIN, SIGTTOU, and SIGTSTP.

The shell exits by default upon receipt of a SIGHUP. Before exiting, an interactive shell resends the SIGHUP to all jobs, running or stopped. Stopped jobs are sent SIGCONT to ensure that they receive the SIGHUP. To prevent the shell from sending the SIGHUP signal to a particular job, it should be removed from the jobs table with the disown builtin (see Job Control Builtins) or marked to not receive SIGHUP using disown -h.

If the huponexit shell option has been set with shopt (see The Shopt Builtin), Bash sends a SIGHUP to all jobs when an interactive login shell exits.

---
Solution:

If the Bash script does not handle SIGHUP, then SIGHUP terminates the Bash interpreter.
If the Python script does not handle SIGHUP, then SIGHUP terminates the Python interpreter.
#@-others
#@-leo
