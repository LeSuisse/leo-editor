<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2"/>
<globals/>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="ekr.20070417092935"><vh>Startup</vh>
<v t="ekr.20140716121225.4354"><vh>@@button print-gnx</vh></v>
<v t="ekr.20161123080832.1"><vh>@button make-table</vh></v>
<v t="ekr.20111112092813.4154"><vh>@command cls</vh></v>
<v t="ekr.20101220161557.6011"><vh>@file unitTestStartup.txt</vh></v>
<v t="ekr.20150216110251.11"><vh>@persistence</vh></v>
<v t="ekr.20041121151002"><vh>@settings</vh>
<v t="ekr.20190113122443.1"><vh>@bool add-context-to-headlines = False</vh></v>
<v t="ekr.20080324133327.2"><vh>@bool allow-middle-button-paste = True</vh></v>
<v t="ekr.20161011095551.1"><vh>@bool allow-section-references-in-at-auto = True</vh></v>
<v t="ekr.20140902101931.4478"><vh>@bool qt-use-scintilla = False</vh></v>
<v t="ekr.20161129030232.1"><vh>@bool run-pyflakes-on-write = False</vh></v>
<v t="ekr.20140217055617.4231"><vh>@bool scriptingatscriptnodes = True</vh></v>
<v t="ekr.20180214042153.1"><vh>@bool select-next-after-delete = False</vh></v>
<v t="ekr.20051013162226"><vh>@bool test-setting = True</vh></v>
<v t="ekr.20150602215639.1"><vh>@bool tidy-autobeautify = False</vh></v>
<v t="ekr.20070503064257"><vh>@bool use-chapters = True</vh></v>
<v t="ekr.20150321155210.11"><vh>@bool verbose-check-outline = False</vh></v>
<v t="ekr.20181031152556.1"><vh>@bool write-script-file = True</vh></v>
<v t="ekr.20070528100318"><vh>@bool write-strips-blank-lines = False</vh></v>
<v t="ekr.20170415084531.1"><vh>@data import-html-tags</vh></v>
<v t="ekr.20111026111009.3972"><vh>@data import-xml-tags</vh></v>
<v t="ekr.20111123042627.6654"><vh>@enabled-plugins</vh></v>
<v t="ekr.20050328101834"><vh>@page http plugin</vh>
<v t="ekr.20050328101834.1"><vh>@bool http-active = False</vh></v>
<v t="ekr.20050328101834.2"><vh>@int port = 8080</vh></v>
<v t="ekr.20050328101834.3"><vh>@string rst-http-attributename = ''</vh></v>
</v>
<v t="ekr.20111112093605.4679"><vh>@shortcuts</vh></v>
<v t="ekr.20110521073115.3494"><vh>colorizer colors</vh>
<v t="ekr.20110521073115.3495"><vh>@@color keyword3-color = orange</vh></v>
<v t="ekr.20110521073115.3496"><vh>@@color keyword4-color = pink</vh></v>
</v>
<v t="ekr.20111124094121.3941"><vh>Empty @buttons and @commands nodes</vh>
<v t="ekr.20111124094121.3942"><vh>@buttons</vh></v>
<v t="ekr.20111124094121.3943"><vh>@commands</vh></v>
</v>
<v t="ekr.20171126153138.1"><vh>Required for reformat-paragraph tests</vh>
<v t="ekr.20171126152936.1"><vh>@int page-width = 80</vh></v>
<v t="ekr.20171126153044.1"><vh>@int tab-width = -4</vh></v>
</v>
<v t="ekr.20131111155830.4249"><vh>Vim settings</vh>
<v t="ekr.20131111155830.4250"><vh>@@@data vim-control-character-commands</vh></v>
<v t="ekr.20131111155830.4251"><vh>@data vim-command-tails</vh></v>
<v t="ekr.20131111155830.4252"><vh>@data vim-commands</vh></v>
<v t="ekr.20131111155830.4253"><vh>@data vim-motions</vh></v>
<v t="ekr.20131111155830.4254"><vh>@data vim-motion-tails</vh></v>
</v>
</v>
<v t="ekr.20100123172713.5114"><vh>Scripts</vh>
<v t="ekr.20100102164959.5088"><vh>Count pages</vh></v>
<v t="ekr.20100123172713.5116"><vh>Clean all tnodeLists</vh></v>
<v t="ekr.20070217065840"><vh>Scripts that make unit tests</vh>
<v t="ekr.20070217065840.1"><vh>@@command make-test @key = Alt-5</vh></v>
<v t="ekr.20070217065840.2"><vh>@@command do-before @key = Alt-6</vh>
<v t="ekr.20070217065840.3"><vh>getSel</vh></v>
<v t="ekr.20070217065840.4"><vh>findNodes</vh></v>
<v t="ekr.20070217065840.5"><vh>putSelectionInHeadline</vh></v>
</v>
<v t="ekr.20070217065840.6"><vh>@@command do-after @key = Alt-7</vh>
<v t="ekr.20070217072822"><vh>getSel</vh></v>
<v t="ekr.20070217065840.8"><vh>findNodes</vh></v>
<v t="ekr.20070217065840.9"><vh>putSelectionInHeadline</vh></v>
</v>
</v>
<v t="ekr.20070113145100"><vh>Create chinese folder</vh></v>
<v t="ekr.20071113140035"><vh>Find unique @ test nodes</vh></v>
<v t="ekr.20091206090247.5060"><vh>Clear all uA's, tnodeLists, etc.</vh>
<v t="ekr.20091206090247.5061"><vh>Clean unused tnodeLists</vh></v>
<v t="ekr.20091206090247.5062"><vh>Clear all timestamps</vh></v>
<v t="ekr.20091206090247.5063"><vh>Clear all uAs (unknown attributes)</vh></v>
</v>
</v>
</v>
<v t="ekr.20191215093835.9"><vh>data</vh>
<v t="ekr.20191215093835.15"><vh>a</vh>
<v t="ekr.20191215093835.16"><vh>b</vh></v>
</v>
<v t="ekr.20191215093835.12"><vh>c</vh></v>
<v t="ekr.20191215093835.13"><vh>d</vh></v>
<v t="ekr.20191215093835.14"><vh>e</vh>
<v t="ekr.20191215093835.15"></v>
</v>
</v>
<v t="ekr.20051012104957"><vh>@ignore Docs</vh>
<v t="bwmulder.20050108100437.1"><vh>How to run unit tests</vh></v>
<v t="ekr.20050618061835"><vh>How to use the @test directive, by Roger Erens</vh>
<v t="ekr.20050618061835.1"><vh>Intro</vh>
<v t="ekr.20050618061835.2"><vh>@url http://www.onlamp.com/pub/a/python/2005/02/03/tdd_pyunit2.html</vh></v>
</v>
<v t="ekr.20050618061835.3"><vh>Preparations: adding a button</vh>
<v t="ekr.20050618061835.4"><vh>@@button Do @test</vh></v>
</v>
<v t="ekr.20050618061835.5"><vh>Alpha</vh>
<v t="ekr.20050618061835.6"><vh>@test my first Leo test</vh></v>
<v t="ekr.20050618061835.7"><vh>output on the console</vh></v>
</v>
<v t="ekr.20050618061835.8"><vh>Bravo</vh>
<v t="ekr.20050618061835.9"><vh>@@test my second Leo test</vh></v>
<v t="ekr.20050618061835.10"><vh>output on the console</vh></v>
</v>
<v t="ekr.20050618061835.11"><vh>It takes two to tango</vh>
<v t="ekr.20050618061835.6"></v>
<v t="ekr.20050618061835.9"></v>
<v t="ekr.20050618061835.12"><vh>output on the console</vh></v>
</v>
<v t="ekr.20050618061835.13"><vh>Life gets more interesting</vh>
<v t="ekr.20050618061835.14"><vh>@@test koekiemonster.wants()</vh>
<v t="ekr.20050618061835.15"><vh>input data</vh></v>
<v t="ekr.20050618061835.16"><vh>expected result</vh></v>
</v>
<v t="ekr.20050618061835.17"><vh>output on the console</vh></v>
<v t="ekr.20050618061835.18"><vh>output on the console using print statements</vh></v>
</v>
<v t="ekr.20050618061835.19"><vh>How about @suite?</vh></v>
<v t="ekr.20050618061835.20"><vh>Final remarks</vh></v>
</v>
<v t="ekr.20111211094936.3970"><vh>@ignore To do</vh>
<v t="ekr.20111115080347.3872"><vh>To do: tests of the high-level interface</vh>
<v t="ekr.20100131171342.5478"><vh>@@@test that log and body implements high-level interface</vh></v>
</v>
<v t="ekr.20100131171342.5473"><vh>Tk gui tests</vh>
<v t="ekr.20100131171342.5474"><vh>@test leoBody is subset of leoTkBody</vh></v>
<v t="ekr.20100131171342.5475"><vh>@test leoFrame is subset of leoTkFrame</vh></v>
<v t="ekr.20100131171342.5476"><vh>@test leoGui is subset of leoTkGui</vh></v>
<v t="ekr.20100131171342.5477"><vh>@test leoTree is subset of leoTkTree</vh></v>
</v>
<v t="ekr.20111125183140.3952"><vh>@test ic.createOutline changes back-slashes to slashes</vh></v>
<v t="ekr.20111125182408.3947"><vh>@test ic.createImportParent changes back-slashes to slashes</vh></v>
</v>
</v>
<v t="ekr.20190113120618.1"><vh>Files</vh>
<v t="ekr.20190113120734.1"><vh>@asis unittest/at-asis-test.py</vh>
<v t="ekr.20190113120734.2"><vh>spam</vh></v>
<v t="ekr.20190113120734.3"><vh>eggs</vh></v>
</v>
<v t="ekr.20200205065723.1"><vh>@asis unittest/at-asis-test2.txt</vh>
<v t="ekr.20200205065723.2"><vh>spam</vh></v>
<v t="ekr.20200205065723.3"><vh>@@eggs</vh></v>
</v>
<v t="ekr.20190113123439.5"><vh>@auto unittest/at-auto-line-number-test.py</vh></v>
<v t="ekr.20190113123439.7"><vh>@auto unittest/at-auto-md-line-number-test.md</vh></v>
<v t="ekr.20190113123439.11"><vh>@auto unittest/at-auto-section-ref-test.py</vh></v>
<v t="ekr.20190113121550.1"><vh>@auto unittest/at-auto-test.py</vh></v>
<v t="ekr.20190113123439.16"><vh>@auto unittest/at-auto-unit-test.py</vh></v>
<v t="ekr.20190113123635.2"><vh>@auto-org unittest/at-auto-org-line-number-test.org</vh></v>
<v t="ekr.20190113123635.5"><vh>@auto-otl unittest/at-auto-otl-line-number-test.otl</vh></v>
<v t="ekr.20190113123822.1"><vh>@clean unittest/at-clean-line-number-test.c</vh>
<v t="ekr.20190113123822.2"><vh>spam</vh></v>
<v t="ekr.20190113123822.3"><vh>eggs</vh></v>
</v>
<v t="ekr.20190113123853.1"><vh>@clean unittest/at-clean-line-number-test.py</vh>
<v t="ekr.20190113123853.2"><vh>spam</vh></v>
<v t="ekr.20190113123853.3"><vh>eggs</vh></v>
</v>
<v t="ekr.20191207060251.1"><vh>@clean unittest/at-clean-write-test.py</vh>
<v t="ekr.20191207060251.2"><vh>spam</vh></v>
<v t="ekr.20191207060251.3"><vh>eggs</vh></v>
</v>
<v t="ekr.20160403123754.1"><vh>@file unittest/at-file-line-number-test.c</vh></v>
<v t="ekr.20080904102243.2"><vh>@file unittest/at-file-line-number-test.py</vh></v>
<v t="ekr.20111021115306.3697"><vh>@file unittest/tex-error.tex</vh></v>
<v t="ekr.20130912092638.4150"><vh>@file unittest/utf-16-test.txt</vh></v>
<v t="ekr.20190113124135.1"><vh>@nosent unittest/at-nosent-line-number-test.py</vh>
<v t="ekr.20190113124135.2"><vh>spam</vh></v>
<v t="ekr.20190113124135.3"><vh>eggs</vh></v>
</v>
<v t="ekr.20100731163237.5782"><vh>@thin unittest/at-thin-html-test.html</vh></v>
<v t="ekr.20090704085350.5022"><vh>@thin unittest/at-thin-test.py</vh></v>
</v>
<v t="ekr.20210829054801.1"><vh>===== No longer needed</vh>
<v t="ekr.20210829055819.1"><vh>Commands A-B</vh>
<v t="ekr.20061101121602.78"><vh>@test add-space-to-lines</vh>
<v t="ekr.20061101121602.79"><vh>work</vh></v>
<v t="ekr.20061101121602.80"><vh>before sel=2.0,4.6</vh></v>
<v t="ekr.20061101121602.81"><vh>after sel=2.0,4.7</vh></v>
</v>
<v t="ekr.20061101121602.82"><vh>@test add-tab-to-lines</vh>
<v t="ekr.20061101121602.83"><vh>work</vh></v>
<v t="ekr.20061101121602.84"><vh>before sel=2.0,5.6</vh></v>
<v t="ekr.20061101121602.85"><vh>after sel=2.0,5.10</vh></v>
</v>
<v t="ekr.20061101121602.86"><vh>@test back-char</vh>
<v t="ekr.20061101121602.87"><vh>work</vh></v>
<v t="ekr.20061101121602.88"><vh>before sel=3.8,3.8</vh></v>
<v t="ekr.20061101121602.89"><vh>after sel=3.7,3.7</vh></v>
</v>
<v t="ekr.20061101121602.90"><vh>@test back-char-extend-selection</vh>
<v t="ekr.20061101121602.91"><vh>work</vh></v>
<v t="ekr.20061101121602.92"><vh>before sel=4.12,4.12</vh></v>
<v t="ekr.20061101121602.93"><vh>after sel=4.11,4.12</vh></v>
</v>
<v t="ekr.20061101121602.94"><vh>@test back-paragraph</vh>
<v t="ekr.20061101121602.95"><vh>work</vh></v>
<v t="ekr.20061101121602.96"><vh>before sel=9.0,9.0</vh></v>
<v t="ekr.20061101121602.97"><vh>after sel=6.7,6.7</vh></v>
</v>
<v t="ekr.20061101121602.98"><vh>@test back-paragraph-extend-selection</vh>
<v t="ekr.20061101121602.99"><vh>work</vh></v>
<v t="ekr.20061101121602.100"><vh>before sel=9.0,9.5</vh></v>
<v t="ekr.20061101121602.101"><vh>after sel=6.7,9.5</vh></v>
</v>
<v t="ekr.20061101121602.102"><vh>@test back-sentence</vh>
<v t="ekr.20061101121602.103"><vh>work</vh></v>
<v t="ekr.20061101121602.104"><vh>before sel=3.169,3.169</vh></v>
<v t="ekr.20061101121602.105"><vh>after sel=3.143,3.143</vh></v>
</v>
<v t="ekr.20061101121602.106"><vh>@test back-sentence-extend-selection</vh>
<v t="ekr.20061101121602.107"><vh>work</vh></v>
<v t="ekr.20061101121602.108"><vh>before sel=3.208,3.208</vh></v>
<v t="ekr.20061101121602.109"><vh>after sel=3.143,3.208</vh></v>
</v>
<v t="ekr.20061101121602.110"><vh>@test back-to-indentation</vh>
<v t="ekr.20061101121602.111"><vh>work</vh></v>
<v t="ekr.20061101121602.112"><vh>before sel=4.13,4.13</vh></v>
<v t="ekr.20061101121602.113"><vh>after sel=4.8,4.8</vh></v>
</v>
<v t="ekr.20090427104851.7"><vh>@test back-to-home (at start of line)</vh>
<v t="ekr.20090427104851.8"><vh>work</vh></v>
<v t="ekr.20090427104851.9"><vh>before sel=2.0,2.0</vh></v>
<v t="ekr.20090427104851.10"><vh>after sel=2.4,2.4</vh></v>
</v>
<v t="ekr.20090427104851.15"><vh>@test back-to-home (at indentation</vh>
<v t="ekr.20090427104851.16"><vh>work</vh></v>
<v t="ekr.20090427104851.17"><vh>before sel=2.4,2.4</vh></v>
<v t="ekr.20090427104851.18"><vh>after sel=2.0,2.0</vh></v>
</v>
<v t="ekr.20090427104851.11"><vh>@test back-to-home (at end of line)</vh>
<v t="ekr.20090427104851.12"><vh>work</vh></v>
<v t="ekr.20090427104851.13"><vh>before sel=2.12,2.12</vh></v>
<v t="ekr.20090427104851.14"><vh>after sel=2.4,2.4</vh></v>
</v>
<v t="ekr.20061101121602.114"><vh>@test back-word</vh>
<v t="ekr.20061101121602.115"><vh>work</vh></v>
<v t="ekr.20061101121602.116"><vh>before sel=1.183,1.183</vh></v>
<v t="ekr.20061101121602.117"><vh>after sel=1.178,1.178</vh></v>
</v>
<v t="ekr.20061101121602.118"><vh>@test back-word-extend-selection</vh>
<v t="ekr.20061101121602.119"><vh>work</vh></v>
<v t="ekr.20061101121602.120"><vh>before sel=3.342,3.342</vh></v>
<v t="ekr.20061101121602.121"><vh>after sel=3.332,3.342</vh></v>
</v>
<v t="ekr.20061101121602.122"><vh>@test backward-delete-char</vh>
<v t="ekr.20061101121602.123"><vh>work</vh></v>
<v t="ekr.20061101121602.124"><vh>before sel=1.9,1.9</vh></v>
<v t="ekr.20061101121602.125"><vh>after sel=1.8,1.8</vh></v>
</v>
<v t="ekr.20071007121529"><vh>@test backward-delete-char  (middle of line)</vh>
<v t="ekr.20071007121529.1"><vh>work</vh></v>
<v t="ekr.20071007121529.2"><vh>before sel=1.6,1.6</vh></v>
<v t="ekr.20071007121529.3"><vh>after sel=1.5,1.5</vh></v>
</v>
<v t="ekr.20071007120947"><vh>@test backward-delete-char (last char)</vh>
<v t="ekr.20071007120947.6"><vh>work</vh></v>
<v t="ekr.20071007120947.7"><vh>before sel=2.9,2.9</vh></v>
<v t="ekr.20071007120947.8"><vh>after sel=2.8,2.8</vh></v>
</v>
<v t="ekr.20100817131738.5886"><vh>@test backward-delete-word (no selection)</vh>
<v t="ekr.20100817131738.5887"><vh>work</vh></v>
<v t="ekr.20100817131738.5888"><vh>before sel=1.10,1.10</vh></v>
<v t="ekr.20100817131738.5889"><vh>after sel=1.5,1.5</vh></v>
</v>
<v t="ekr.20100817131738.5894"><vh>@test backward-delete-word (selection)</vh>
<v t="ekr.20100817131738.5895"><vh>work</vh></v>
<v t="ekr.20100817131738.5896"><vh>before sel=1.7,1.12</vh></v>
<v t="ekr.20100817131738.5897"><vh>after sel=1.7,1.7</vh></v>
</v>
<v t="ekr.20061101121602.126"><vh>@test backward-kill-paragraph</vh>
<v t="ekr.20061101121602.127"><vh>work</vh></v>
<v t="ekr.20061101121602.128"><vh>before sel=9.0,9.0</vh></v>
<v t="ekr.20061101121602.129"><vh>after sel=7.0,7.0</vh></v>
</v>
<v t="ekr.20070131173932"><vh>@test backward-kill-sentence</vh>
<v t="ekr.20070131173932.1"><vh>work</vh></v>
<v t="ekr.20070131173932.2"><vh>before sel=3.2,3.2</vh></v>
<v t="ekr.20070131173932.3"><vh>after sel=2.23,2.23</vh></v>
</v>
<v t="ekr.20081215084144.2"><vh>@test backward-kill-word</vh>
<v t="ekr.20081215084144.3"><vh>work</vh></v>
<v t="ekr.20081215084144.4"><vh>before sel=3.7,3.7</vh></v>
<v t="ekr.20081215084144.5"><vh>after sel=3.5,3.5</vh></v>
</v>
<v t="ekr.20061101121602.130"><vh>@test beginning-of-buffer</vh>
<v t="ekr.20061101121602.131"><vh>work</vh></v>
<v t="ekr.20061101121602.132"><vh>before sel=5.56,5.56</vh></v>
<v t="ekr.20061101121602.133"><vh>after sel=1.0,1.0</vh></v>
</v>
<v t="ekr.20061101121602.134"><vh>@test beginning-of-buffer-extend-selection</vh>
<v t="ekr.20061101121602.135"><vh>work</vh></v>
<v t="ekr.20061101121602.136"><vh>before sel=3.423,3.423</vh></v>
<v t="ekr.20061101121602.137"><vh>after sel=1.0,3.423</vh></v>
</v>
<v t="ekr.20061101121602.138"><vh>@test beginning-of-line</vh>
<v t="ekr.20061101121602.139"><vh>work</vh></v>
<v t="ekr.20061101121602.140"><vh>before sel=3.10,3.10</vh></v>
<v t="ekr.20061101121602.141"><vh>after sel=3.0,3.0</vh></v>
</v>
<v t="ekr.20061101121602.142"><vh>@test beginning-of-line-extend-selection</vh>
<v t="ekr.20061101121602.143"><vh>work</vh></v>
<v t="ekr.20061101121602.144"><vh>before sel=4.10,4.10</vh></v>
<v t="ekr.20061101121602.145"><vh>after sel=4.0,4.10</vh></v>
</v>
</v>
<v t="ekr.20081111084046.2"><vh>Commands C-E</vh>
<v t="ekr.20061101121602.146"><vh>@test capitalize-word</vh>
<v t="ekr.20061101121602.147"><vh>work</vh></v>
<v t="ekr.20061101121602.148"><vh>before sel=3.6,3.6</vh></v>
<v t="ekr.20061101121602.149"><vh>after sel=3.6,3.6</vh></v>
</v>
<v t="ekr.20061101121602.150"><vh>@test center-line</vh>
<v t="ekr.20061101121602.151"><vh>work</vh></v>
<v t="ekr.20061101121602.152"><vh>before sel=3.0,9.0</vh></v>
<v t="ekr.20061101121602.153"><vh>after sel=3.0,9.0</vh></v>
</v>
<v t="ekr.20061101121602.154"><vh>@test center-region</vh>
<v t="ekr.20061101121602.155"><vh>work</vh></v>
<v t="ekr.20061101121602.156"><vh>before sel=1.0,7.0</vh></v>
<v t="ekr.20061101121602.157"><vh>after sel=1.0,7.0</vh></v>
</v>
<v t="ekr.20120525072421.3889"><vh>@test clean-lines</vh>
<v t="ekr.20120525072421.3890"><vh>work</vh></v>
<v t="ekr.20120525072421.3891"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20120525072421.3892"><vh>after sel=1.0,1.0</vh></v>
</v>
<v t="ekr.20061101121602.158"><vh>@test clear-selected-text</vh>
<v t="ekr.20061101121602.159"><vh>work</vh></v>
<v t="ekr.20061101121602.160"><vh>before sel=2.4,4.4</vh></v>
<v t="ekr.20061101121602.161"><vh>after sel=2.4,2.4</vh></v>
</v>
<v t="ekr.20061101121602.162"><vh>@test count-region</vh>
<v t="ekr.20061101121602.163"><vh>work</vh></v>
<v t="ekr.20061101121602.164"><vh>before sel=2.4,4.8</vh></v>
<v t="ekr.20061101121602.165"><vh>after sel=2.4,4.8</vh></v>
</v>
<v t="ekr.20061101121602.166"><vh>@test delete-char</vh>
<v t="ekr.20061101121602.167"><vh>work</vh></v>
<v t="ekr.20061101121602.168"><vh>before sel=1.5,1.5</vh></v>
<v t="ekr.20061101121602.169"><vh>after sel=1.5,1.5</vh></v>
</v>
<v t="ekr.20071007120750.3"><vh>@test delete-indentation</vh>
<v t="ekr.20071007121115.1"><vh>work</vh></v>
<v t="ekr.20071007121115.2"><vh>before sel=2.8,2.8</vh></v>
<v t="ekr.20071007121115.3"><vh>after sel=2.4,2.4</vh></v>
</v>
<v t="ekr.20070131162935"><vh>@test delete-spaces</vh>
<v t="ekr.20070131162935.1"><vh>work</vh></v>
<v t="ekr.20070131162935.2"><vh>before sel=3.2,3.2</vh></v>
<v t="ekr.20070131162935.3"><vh>after sel=3.0,3.0</vh></v>
</v>
<v t="ekr.20061101121602.170"><vh>@test do-nothing</vh>
<v t="ekr.20061101121602.171"><vh>work</vh></v>
<v t="ekr.20061101121602.172"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20061101121602.173"><vh>after sel=1.0,1.0</vh></v>
</v>
<v t="ekr.20061101121602.174"><vh>@test downcase-region</vh>
<v t="ekr.20061101121602.175"><vh>work</vh></v>
<v t="ekr.20061101121602.176"><vh>before sel=3.0,4.0</vh></v>
<v t="ekr.20061101121602.177"><vh>after sel=3.0,4.0</vh></v>
</v>
<v t="ekr.20061101121602.178"><vh>@test downcase-word</vh>
<v t="ekr.20061101121602.179"><vh>work</vh></v>
<v t="ekr.20061101121602.180"><vh>before sel=1.4,1.4</vh></v>
<v t="ekr.20061101121602.181"><vh>after sel=1.4,1.4</vh></v>
</v>
<v t="ekr.20061101121602.182"><vh>@test end-of-buffer</vh>
<v t="ekr.20061101121602.183"><vh>work</vh></v>
<v t="ekr.20061101121602.184"><vh>before sel=1.3,1.3</vh></v>
<v t="ekr.20061101121602.185"><vh>after sel=7.0,7.0</vh></v>
</v>
<v t="ekr.20061101121602.186"><vh>@test end-of-buffer-extend-selection</vh>
<v t="ekr.20061101121602.187"><vh>work</vh></v>
<v t="ekr.20061101121602.188"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20061101121602.189"><vh>after sel=1.0,7.0</vh></v>
</v>
<v t="ekr.20061101121602.190"><vh>@test end-of-line</vh>
<v t="ekr.20061101121602.191"><vh>work</vh></v>
<v t="ekr.20061101121602.192"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20061101121602.193"><vh>after sel=1.10,1.10</vh></v>
</v>
<v t="btheado.20190926182937.1"><vh>@test end-of-line (blank last line)</vh>
<v t="btheado.20190926182937.2"><vh>work</vh></v>
<v t="btheado.20190926182937.3"><vh>before sel=7.0,7.0</vh></v>
<v t="btheado.20190926182937.4"><vh>after sel=7.0,7.0</vh></v>
</v>
<v t="btheado.20190926223006.1"><vh>@test end-of-line (internal blank line)</vh>
<v t="btheado.20190926223006.2"><vh>work</vh></v>
<v t="btheado.20190926223006.3"><vh>before sel=2.0,2.0</vh></v>
<v t="btheado.20190926223006.4"><vh>after sel=2.0,2.0</vh></v>
</v>
<v t="btheado.20190926224744.1"><vh>@test end-of-line (single char last line)</vh>
<v t="btheado.20190926224744.2"><vh>work</vh></v>
<v t="btheado.20190926224744.3"><vh>before sel=7.0,7.0</vh></v>
<v t="btheado.20190926224744.4"><vh>after sel=7.1,7.1</vh></v>
</v>
<v t="ekr.20061128082002"><vh>@test end-of-line 2</vh>
<v t="ekr.20061128082002.1"><vh>work</vh></v>
<v t="ekr.20061128082002.2"><vh>before sel=6.0,6.0</vh></v>
<v t="ekr.20061128082002.3"><vh>after sel=6.9,6.9</vh></v>
</v>
<v t="ekr.20061101121602.194"><vh>@test end-of-line-extend-selection</vh>
<v t="ekr.20061101121602.195"><vh>work</vh></v>
<v t="ekr.20061101121602.196"><vh>before sel=3.0,3.0</vh></v>
<v t="ekr.20061101121602.197"><vh>after sel=3.0,3.10</vh></v>
</v>
<v t="btheado.20190927201634.1"><vh>@test end-of-line-extend-selection (blank last line)</vh>
<v t="btheado.20190927201634.2"><vh>work</vh></v>
<v t="btheado.20190927201634.3"><vh>before sel=7.0,7.0</vh></v>
<v t="btheado.20190927201634.4"><vh>after sel=7.0,7.0</vh></v>
</v>
<v t="ekr.20061101121602.198"><vh>@test exchange-point-mark</vh>
<v t="ekr.20061101121602.199"><vh>work</vh></v>
<v t="ekr.20061101121602.200"><vh>before sel=1.0,1.10</vh></v>
<v t="ekr.20061101121602.201"><vh>after sel=1.0,1.10</vh></v>
</v>
<v t="ekr.20120303054735.3931"><vh>@test expand-and-go-right</vh>
<v t="ekr.20120303054735.3932"><vh>child</vh></v>
</v>
<v t="ekr.20061101121602.202"><vh>@test extend-to-line</vh>
<v t="ekr.20061101121602.203"><vh>work</vh></v>
<v t="ekr.20061101121602.204"><vh>before sel=3.3,3.3</vh></v>
<v t="ekr.20061101121602.205"><vh>after sel=3.0,3.10</vh></v>
</v>
<v t="ekr.20061101121602.206"><vh>@test extend-to-paragraph</vh>
<v t="ekr.20061101121602.207"><vh>work</vh></v>
<v t="ekr.20061101121602.208"><vh>before sel=9.0,9.0</vh></v>
<v t="ekr.20061101121602.209"><vh>after sel=8.0,13.33</vh></v>
</v>
<v t="ekr.20061101121602.210"><vh>@test extend-to-sentence</vh>
<v t="ekr.20061101121602.211"><vh>work</vh></v>
<v t="ekr.20061101121602.212"><vh>before sel=3.5,3.5</vh></v>
<v t="ekr.20061101121602.213"><vh>after sel=1.395,3.142</vh></v>
</v>
<v t="ekr.20061101121602.214"><vh>@test extend-to-word</vh>
<v t="ekr.20061101121602.215"><vh>work</vh></v>
<v t="ekr.20061101121602.216"><vh>before sel=3.10,3.10</vh></v>
<v t="ekr.20061101121602.217"><vh>after sel=3.4,3.12</vh></v>
</v>
</v>
<v t="ekr.20070131175538.1"><vh>Commands F-L</vh>
<v t="ekr.20061101121602.218"><vh>@test fill-paragraph</vh>
<v t="ekr.20061101121602.219"><vh>work</vh></v>
<v t="ekr.20061101121602.220"><vh>before sel=3.0,3.7</vh></v>
<v t="ekr.20201123190854.1"><vh>after sel=10.0, 10.0</vh></v>
</v>
<v t="ekr.20170707091311.1"><vh>@test finish-of-line</vh>
<v t="ekr.20170707091311.2"><vh>work</vh></v>
<v t="ekr.20170707091311.3"><vh>before sel=3.12,3.12</vh></v>
<v t="ekr.20170707091311.4"><vh>after sel=3.9,3.9</vh></v>
</v>
<v t="ekr.20170707091730.1"><vh>@test finish-of-line (2)</vh>
<v t="ekr.20170707091730.2"><vh>work</vh></v>
<v t="ekr.20170707091730.3"><vh>before sel=3.1,3.1</vh></v>
<v t="ekr.20170707091730.4"><vh>after sel=3.9,3.9</vh></v>
</v>
<v t="ekr.20170707092257.1"><vh>@test finish-of-line-extend-selection</vh>
<v t="ekr.20170707092257.2"><vh>work</vh></v>
<v t="ekr.20170707092257.3"><vh>before sel=3.1,3.1</vh></v>
<v t="ekr.20170707092257.4"><vh>after sel=3.1,3.9</vh></v>
</v>
<v t="ekr.20061101121602.222"><vh>@test forward-char</vh>
<v t="ekr.20061101121602.223"><vh>work</vh></v>
<v t="ekr.20061101121602.224"><vh>before sel=1.2,1.2</vh></v>
<v t="ekr.20061101121602.225"><vh>after sel=1.3,1.3</vh></v>
</v>
<v t="ekr.20061101121602.226"><vh>@test forward-char-extend-selection</vh>
<v t="ekr.20061101121602.227"><vh>work</vh></v>
<v t="ekr.20061101121602.228"><vh>before sel=1.1,1.1</vh></v>
<v t="ekr.20061101121602.229"><vh>after sel=1.1,1.2</vh></v>
</v>
<v t="ekr.20061101121602.230"><vh>@test forward-end-word (end of line)</vh>
<v t="ekr.20061101121602.231"><vh>work</vh></v>
<v t="ekr.20061101121602.232"><vh>before sel=1.395,1.395</vh></v>
<v t="ekr.20061101121602.233"><vh>after sel=3.4,3.4</vh></v>
</v>
<v t="ekr.20061101121602.234"><vh>@test forward-end-word (start of word)</vh>
<v t="ekr.20061101121602.235"><vh>work</vh></v>
<v t="ekr.20061101121602.236"><vh>before sel=1.310,1.310</vh></v>
<v t="ekr.20061101121602.237"><vh>after sel=1.317,1.317</vh></v>
</v>
<v t="ekr.20061101121602.238"><vh>@test forward-end-word-extend-selection</vh>
<v t="ekr.20061101121602.239"><vh>work</vh></v>
<v t="ekr.20061101121602.240"><vh>before sel=3.20,3.20</vh></v>
<v t="ekr.20061101121602.241"><vh>after sel=3.20,3.30</vh></v>
</v>
<v t="ekr.20061101121602.242"><vh>@test forward-paragraph</vh>
<v t="ekr.20061101121602.243"><vh>work</vh></v>
<v t="ekr.20061101121602.244"><vh>before sel=9.0,9.0</vh></v>
<v t="ekr.20061101121602.245"><vh>after sel=15.0,15.0</vh></v>
</v>
<v t="ekr.20061101121602.246"><vh>@test forward-paragraph-extend-selection</vh>
<v t="ekr.20061101121602.247"><vh>work</vh></v>
<v t="ekr.20061101121602.248"><vh>before sel=10.0,10.0</vh></v>
<v t="ekr.20061101121602.249"><vh>after sel=10.0,15.0</vh></v>
</v>
<v t="ekr.20061101121602.250"><vh>@test forward-sentence</vh>
<v t="ekr.20061101121602.251"><vh>work</vh></v>
<v t="ekr.20061101121602.252"><vh>before sel=3.17,3.17</vh></v>
<v t="ekr.20061101121602.253"><vh>after sel=3.142,3.142</vh></v>
</v>
<v t="ekr.20061101121602.254"><vh>@test forward-sentence-extend-selection</vh>
<v t="ekr.20061101121602.255"><vh>work</vh></v>
<v t="ekr.20061101121602.256"><vh>before sel=1.264,1.264</vh></v>
<v t="ekr.20061101121602.257"><vh>after sel=1.264,1.395</vh></v>
</v>
<v t="ekr.20061101121602.258"><vh>@test forward-word</vh>
<v t="ekr.20061101121602.259"><vh>work</vh></v>
<v t="ekr.20061101121602.260"><vh>before sel=1.261,1.261</vh></v>
<v t="ekr.20061101121602.261"><vh>after sel=1.272,1.272</vh></v>
</v>
<v t="ekr.20061101121602.262"><vh>@test forward-word-extend-selection</vh>
<v t="ekr.20061101121602.263"><vh>work</vh></v>
<v t="ekr.20061101121602.264"><vh>before sel=1.395,1.395</vh></v>
<v t="ekr.20061101121602.265"><vh>after sel=1.395,3.4</vh></v>
</v>
<v t="ekr.20100212104817.5351"><vh>@test help-for-command</vh></v>
<v t="ekr.20061101121602.266"><vh>@test indent-relative</vh>
<v t="ekr.20061101121602.267"><vh>work</vh></v>
<v t="ekr.20061101121602.268"><vh>before sel=5.0,5.0</vh></v>
<v t="ekr.20061101121602.269"><vh>after sel=5.8,5.8</vh></v>
</v>
<v t="ekr.20061101121602.270"><vh>@test indent-rigidly</vh>
<v t="ekr.20061101121602.271"><vh>work</vh></v>
<v t="ekr.20061101121602.272"><vh>before sel=2.0,5.0</vh></v>
<v t="ekr.20061101121602.273"><vh>after sel=2.0,5.1</vh></v>
</v>
<v t="ekr.20071007120750.5"><vh>@test indent-to-comment-column</vh>
<v t="ekr.20071007121312.5"><vh>work</vh></v>
<v t="ekr.20071007121312.6"><vh>before sel=2.0,2.0</vh></v>
<v t="ekr.20071007121312.7"><vh>after sel=2.4,2.4</vh></v>
</v>
<v t="ekr.20061101121602.274"><vh>@test insert-newline</vh>
<v t="ekr.20061101121602.275"><vh>work</vh></v>
<v t="ekr.20061101121602.276"><vh>before sel=1.8,1.8</vh></v>
<v t="ekr.20061101121602.277"><vh>after sel=2.0,2.0</vh></v>
</v>
<v t="ekr.20061101121602.278"><vh>@test insert-parentheses</vh>
<v t="ekr.20061101121602.279"><vh>work</vh></v>
<v t="ekr.20061101121602.280"><vh>before sel=1.5,1.5</vh></v>
<v t="ekr.20061101121602.281"><vh>after sel=1.6,1.6</vh></v>
</v>
<v t="ekr.20130918051958.4176"><vh>@test kill-line end-body-text</vh>
<v t="ekr.20130918051958.4177"><vh>work</vh></v>
<v t="ekr.20130918051958.4178"><vh>before sel=4.1,4.1</vh></v>
<v t="ekr.20130918051958.4179"><vh>after sel=3.6,3.6</vh></v>
</v>
<v t="ekr.20061128090338"><vh>@test kill-line end-line-text</vh>
<v t="ekr.20061128090338.1"><vh>work</vh></v>
<v t="ekr.20061128090338.2"><vh>before sel=3.5,3.5</vh></v>
<v t="ekr.20061128090338.3"><vh>after sel=3.0,3.0</vh></v>
</v>
<v t="ekr.20061128090147"><vh>@test kill-line start-blank-line</vh>
<v t="ekr.20061128090147.1"><vh>work</vh></v>
<v t="ekr.20061128090147.2"><vh>before sel=3.0,3.0</vh></v>
<v t="ekr.20061128090147.3"><vh>after sel=3.0,3.0</vh></v>
</v>
<v t="ekr.20061128090021"><vh>@test kill-line start-line</vh>
<v t="ekr.20061128090021.1"><vh>work</vh></v>
<v t="ekr.20061128090021.2"><vh>before sel=3.0,3.0</vh></v>
<v t="ekr.20061128090021.3"><vh>after sel=3.0,3.0</vh></v>
</v>
<v t="ekr.20061101121602.282"><vh>@test kill-paragraph</vh>
<v t="ekr.20061101121602.283"><vh>work</vh></v>
<v t="ekr.20061101121602.285"><vh>before sel=9.0,9.0</vh></v>
<v t="ekr.20061101121602.284"><vh>after sel=8.0,8.0</vh></v>
</v>
<v t="ekr.20070131172706"><vh>@test kill-sentence</vh>
<v t="ekr.20070131172706.1"><vh>work</vh></v>
<v t="ekr.20070131172706.2"><vh>before sel=2.2,2.2</vh></v>
<v t="ekr.20070131172706.3"><vh>after sel=1.27,1.27</vh></v>
</v>
<v t="ekr.20130918052416.4180"><vh>@test kill-to-end-of-line after last visible char</vh>
<v t="ekr.20130918052416.4181"><vh>work</vh></v>
<v t="ekr.20130918052416.4182"><vh>before sel=3.6,3.6</vh></v>
<v t="ekr.20130918052416.4183"><vh>after sel=3.6,3.6</vh></v>
</v>
<v t="ekr.20130918043621.4195"><vh>@test kill-to-end-of-line end-body-text</vh>
<v t="ekr.20130918043621.4196"><vh>work</vh></v>
<v t="ekr.20130918043621.4197"><vh>before sel=4.1,4.1</vh></v>
<v t="ekr.20130918043621.4198"><vh>after sel=3.6,3.6</vh></v>
</v>
<v t="ekr.20130918050446.4202"><vh>@test kill-to-end-of-line end-line</vh>
<v t="ekr.20130918050446.4203"><vh>work</vh></v>
<v t="ekr.20130918050446.4204"><vh>before sel=2.6,2.6</vh></v>
<v t="ekr.20130918050446.4205"><vh>after sel=2.6,2.6</vh></v>
</v>
<v t="ekr.20130918043621.4203"><vh>@test kill-to-end-of-line middle-line</vh>
<v t="ekr.20130918043621.4204"><vh>work</vh></v>
<v t="ekr.20130918043621.4205"><vh>before sel=2.2,2.2</vh></v>
<v t="ekr.20130918043621.4206"><vh>after sel=2.2,2.2</vh></v>
</v>
<v t="ekr.20130918050446.4210"><vh>@test kill-to-end-of-line start-blank-line</vh>
<v t="ekr.20130918050446.4211"><vh>work</vh></v>
<v t="ekr.20130918050446.4212"><vh>before sel=3.0,3.0</vh></v>
<v t="ekr.20130918050446.4213"><vh>after sel=3.0,3.0</vh></v>
</v>
<v t="ekr.20130918043621.4199"><vh>@test kill-to-end-of-line start-line</vh>
<v t="ekr.20130918043621.4200"><vh>work</vh></v>
<v t="ekr.20130918043621.4201"><vh>before sel=3.0,3.0</vh></v>
<v t="ekr.20130918043621.4202"><vh>after sel=3.0,3.0</vh></v>
</v>
<v t="ekr.20081215084144.7"><vh>@test kill-word</vh>
<v t="ekr.20081215084144.8"><vh>work</vh></v>
<v t="ekr.20081215084144.9"><vh>before sel=2.6,2.6</vh></v>
<v t="ekr.20081215084144.10"><vh>after sel=2.7,2.7</vh></v>
</v>
</v>
<v t="ekr.20070131175646"><vh> Commands M-Z</vh>
<v t="ekr.20061101121602.286"><vh>@test move-lines-down</vh>
<v t="ekr.20061101121602.287"><vh>work</vh></v>
<v t="ekr.20061101121602.288"><vh>before sel=3.3,4.3</vh></v>
<v t="ekr.20061101121602.289"><vh>after sel=4.3,5.3</vh></v>
</v>
<v t="ekr.20061101121602.290"><vh>@test move-lines-up</vh>
<v t="ekr.20061101121602.291"><vh>work</vh></v>
<v t="ekr.20061101121602.292"><vh>before sel=2.2,2.2</vh></v>
<v t="ekr.20061101121602.293"><vh>after sel=1.2,1.2</vh></v>
</v>
<v t="ekr.20120306201833.3942"><vh>@test move-lines-up (into docstring)</vh>
<v t="ekr.20120306201833.3943"><vh>work</vh></v>
<v t="ekr.20120306201833.3944"><vh>before sel=7.1,7.1</vh></v>
<v t="ekr.20120306201833.3945"><vh>after sel=6.1,6.1</vh></v>
</v>
<v t="ekr.20061101121602.294"><vh>@test move-past-close</vh>
<v t="ekr.20061101121602.295"><vh>work</vh></v>
<v t="ekr.20061101121602.296"><vh>before sel=1.10,1.10</vh></v>
<v t="ekr.20061101121602.297"><vh>after sel=1.12,1.12</vh></v>
</v>
<v t="ekr.20061101121602.298"><vh>@test move-past-close-extend-selection</vh>
<v t="ekr.20061101121602.299"><vh>work</vh></v>
<v t="ekr.20061101121602.300"><vh>before sel=3.7,3.7</vh></v>
<v t="ekr.20061101121602.301"><vh>after sel=3.7,3.11</vh></v>
</v>
<v t="ekr.20061101121602.302"><vh>@test newline-and-indent</vh>
<v t="ekr.20061101121602.303"><vh>work</vh></v>
<v t="ekr.20061101121602.304"><vh>before sel=2.6,2.6</vh></v>
<v t="ekr.20061101121602.305"><vh>after sel=3.4,3.4</vh></v>
</v>
<v t="ekr.20070315065720"><vh>@test next-line</vh>
<v t="ekr.20070315065720.1"><vh>work</vh></v>
<v t="ekr.20070315065720.2"><vh>before sel=1.1,1.1</vh></v>
<v t="ekr.20070315065720.3"><vh>after sel=2.0,2.0</vh></v>
</v>
<v t="ekr.20070315065849"><vh>@test previous-line</vh>
<v t="ekr.20070315065849.1"><vh>work</vh></v>
<v t="ekr.20070315065849.2"><vh>before sel=3.0,3.0</vh></v>
<v t="ekr.20070315065849.3"><vh>after sel=2.0,2.0</vh></v>
</v>
<v t="ekr.20070217071121.1"><vh>@test rectangle-clear</vh>
<v t="ekr.20070217071121.2"><vh>work</vh></v>
<v t="ekr.20070217071121.3"><vh>before sel=2.3,5.6</vh></v>
<v t="ekr.20070217071121.4"><vh>after sel=2.3,5.6</vh></v>
</v>
<v t="ekr.20070217071121.5"><vh>@test rectangle-close</vh>
<v t="ekr.20070217071121.6"><vh>work</vh></v>
<v t="ekr.20070217071121.7"><vh>before sel=2.3,5.6</vh></v>
<v t="ekr.20070217071121.8"><vh>after sel=2.3,5.3</vh></v>
</v>
<v t="ekr.20070217071121.9"><vh>@test rectangle-delete</vh>
<v t="ekr.20070217071121.10"><vh>work</vh></v>
<v t="ekr.20070217071121.11"><vh>before sel=2.3,5.6</vh></v>
<v t="ekr.20070217071121.12"><vh>after sel=2.3,5.3</vh></v>
</v>
<v t="ekr.20070217071121.17"><vh>@test rectangle-kill</vh>
<v t="ekr.20070217071121.18"><vh>work</vh></v>
<v t="ekr.20070217071121.19"><vh>before sel=2.3,5.6</vh></v>
<v t="ekr.20070217071121.20"><vh>after sel=5.3,5.3</vh></v>
</v>
<v t="ekr.20070217071121.13"><vh>@test rectangle-open</vh>
<v t="ekr.20070217071121.14"><vh>work</vh></v>
<v t="ekr.20070217071121.15"><vh>before sel=2.3,5.6</vh></v>
<v t="ekr.20070217071121.16"><vh>after sel=2.3,5.6</vh></v>
</v>
<v t="ekr.20070217071121.21"><vh>@test rectangle-string</vh>
<v t="ekr.20070217071121.22"><vh>work</vh></v>
<v t="ekr.20070217071121.23"><vh>before sel=2.3,5.6</vh></v>
<v t="ekr.20070217071121.24"><vh>after sel=2.3,5.8</vh></v>
</v>
<v t="ekr.20070217071121.25"><vh>@test rectangle-yank</vh>
<v t="ekr.20070217071121.26"><vh>work</vh></v>
<v t="ekr.20070217071121.28"><vh>before sel=2.3,5.6</vh></v>
<v t="ekr.20070217071121.27"><vh>after sel=2.3,5.6</vh></v>
</v>
<v t="ekr.20061101121602.306"><vh>@test remove-blank-lines</vh>
<v t="ekr.20061101121602.307"><vh>work</vh></v>
<v t="ekr.20061101121602.308"><vh>before sel=1.0,9.0</vh></v>
<v t="ekr.20061101121602.309"><vh>after sel=1.0,6.9</vh></v>
</v>
<v t="ekr.20061101121602.310"><vh>@test remove-space-from-lines</vh>
<v t="ekr.20061101121602.311"><vh>work</vh></v>
<v t="ekr.20061101121602.312"><vh>before sel=1.0,9.0</vh></v>
<v t="ekr.20061101121602.313"><vh>after sel=1.0,9.0</vh></v>
</v>
<v t="ekr.20061101121602.314"><vh>@test remove-tab-from-lines</vh>
<v t="ekr.20061101121602.315"><vh>work</vh></v>
<v t="ekr.20061101121602.316"><vh>before sel=1.0,7.0</vh></v>
<v t="ekr.20061101121602.317"><vh>after sel=1.0,7.0</vh></v>
</v>
<v t="ekr.20061101121602.318"><vh>@test reverse-region</vh>
<v t="ekr.20061101121602.319"><vh>work</vh></v>
<v t="ekr.20061101121602.320"><vh>before sel=1.0,7.0</vh></v>
<v t="ekr.20061101121602.321"><vh>after sel=7.10,7.10</vh></v>
</v>
<v t="ekr.20071113081247"><vh>@test reverse-sort-lines</vh>
<v t="ekr.20071113081247.1"><vh>work</vh></v>
<v t="ekr.20071113081247.2"><vh>before sel=1.0,5.1</vh></v>
<v t="ekr.20071113081247.3"><vh>after sel=1.0,5.1</vh></v>
</v>
<v t="ekr.20071113082531"><vh>@test reverse-sort-lines-ignoring-case</vh>
<v t="ekr.20071113082531.1"><vh>work</vh></v>
<v t="ekr.20071113082531.2"><vh>before sel=1.0,6.1</vh></v>
<v t="ekr.20071113082531.3"><vh>after sel=1.0,6.1</vh></v>
</v>
<v t="ekr.20061101121602.322"><vh>@test sort-columns</vh>
<v t="ekr.20061101121602.323"><vh>work</vh></v>
<v t="ekr.20061101121602.324"><vh>before sel=1.0,6.2</vh></v>
<v t="ekr.20061101121602.325"><vh>after sel=1.0,7.0</vh></v>
</v>
<v t="ekr.20061101121602.326"><vh>@test sort-lines</vh>
<v t="ekr.20061101121602.327"><vh>work</vh></v>
<v t="ekr.20061101121602.328"><vh>before sel=2.0,5.6</vh></v>
<v t="ekr.20061101121602.329"><vh>after sel=2.0,5.6</vh></v>
</v>
<v t="ekr.20071113081247.8"><vh>@test sort-lines-ignoring-case</vh>
<v t="ekr.20071113081247.9"><vh>work</vh></v>
<v t="ekr.20071113081247.10"><vh>before sel=1.0,5.1</vh></v>
<v t="ekr.20071113081247.11"><vh>after sel=1.0,5.1</vh></v>
</v>
<v t="ekr.20061101121602.330"><vh>@test split-line</vh>
<v t="ekr.20061101121602.331"><vh>work</vh></v>
<v t="ekr.20061101121602.332"><vh>before sel=1.5,1.5</vh></v>
<v t="ekr.20061101121602.333"><vh>after sel=2.0,2.0</vh></v>
</v>
<v t="ekr.20170707085217.1"><vh>@test start-of-line</vh>
<v t="ekr.20170707085217.2"><vh>work</vh></v>
<v t="ekr.20170707085217.3"><vh>before sel=3.10,3.10</vh></v>
<v t="ekr.20170707085217.4"><vh>after sel=3.4,3.4</vh></v>
</v>
<v t="ekr.20170707091358.1"><vh>@test start-of-line (2)</vh>
<v t="ekr.20170707091358.2"><vh>work</vh></v>
<v t="ekr.20170707091358.3"><vh>before sel=3.1,3.1</vh></v>
<v t="ekr.20170707091358.4"><vh>after sel=3.4,3.4</vh></v>
</v>
<v t="ekr.20170707085319.1"><vh>@test start-of-line-extend-selection</vh>
<v t="ekr.20170707085319.2"><vh>work</vh></v>
<v t="ekr.20170707085319.3"><vh>before sel=3.10,3.10</vh></v>
<v t="ekr.20170707085319.4"><vh>after sel=3.4,3.10</vh></v>
</v>
<v t="ekr.20170707091814.1"><vh>@test start-of-line-extend-selection (2)</vh>
<v t="ekr.20170707091814.2"><vh>work</vh></v>
<v t="ekr.20170707091814.3"><vh>before sel=3.1,3.1</vh></v>
<v t="ekr.20170707091814.4"><vh>after sel=3.1,3.4</vh></v>
</v>
<v t="ekr.20061101121602.334"><vh>@test tabify</vh>
<v t="ekr.20061101121602.335"><vh>work</vh></v>
<v t="ekr.20061101121602.336"><vh>before sel=1.0,7.0</vh></v>
<v t="ekr.20061101121602.337"><vh>after sel=7.0,7.0</vh></v>
</v>
<v t="ekr.20061101121602.338"><vh>@test transpose-chars</vh>
<v t="ekr.20061101121602.339"><vh>work</vh></v>
<v t="ekr.20061101121602.340"><vh>before sel=1.2,1.2</vh></v>
<v t="ekr.20061101121602.341"><vh>after sel=1.2,1.2</vh></v>
</v>
<v t="ekr.20061101121602.342"><vh>@test transpose-lines</vh>
<v t="ekr.20061101121602.343"><vh>work</vh></v>
<v t="ekr.20061101121602.344"><vh>before sel=2.2,2.2</vh></v>
<v t="ekr.20061101121602.345"><vh>after sel=2.10,2.10</vh></v>
</v>
<v t="ekr.20160314133351.1"><vh>@test transpose-words</vh>
<v t="ekr.20160314133351.2"><vh>work</vh></v>
<v t="ekr.20160314133351.3"><vh>before sel=2.9,2.9</vh></v>
<v t="ekr.20160314133351.4"><vh>after sel=2.11,2.11</vh></v>
</v>
<v t="ekr.20121016134831.3906"><vh>@test typescript-to-python</vh>
<v t="ekr.20121016134831.3907"><vh>typescript tokenize test</vh></v>
</v>
<v t="ekr.20061101121602.346"><vh>@test untabify</vh>
<v t="ekr.20061101121602.347"><vh>work</vh></v>
<v t="ekr.20061101121602.348"><vh>before sel=1.0,7.0</vh></v>
<v t="ekr.20061101121602.349"><vh>after sel=7.0,7.0</vh></v>
</v>
<v t="ekr.20061101121602.350"><vh>@test upcase-region</vh>
<v t="ekr.20061101121602.351"><vh>work</vh></v>
<v t="ekr.20061101121602.352"><vh>before sel=3.0,4.0</vh></v>
<v t="ekr.20061101121602.353"><vh>after sel=3.0,4.0</vh></v>
</v>
<v t="ekr.20061101121602.354"><vh>@test upcase-word</vh>
<v t="ekr.20061101121602.355"><vh>work</vh></v>
<v t="ekr.20061101121602.356"><vh>before sel=3.7,3.7</vh></v>
<v t="ekr.20061101121602.357"><vh>after sel=3.7,3.7</vh></v>
</v>
<v t="ekr.20110118082508.3729"><vh>reformat-paragraph tests</vh>
<v t="ekr.20110118082508.3793"><vh>@test reformat-paragraph list 1 of 5</vh>
<v t="ekr.20110118082508.3799"><vh>work</vh></v>
<v t="ekr.20110118082508.3800"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20110118082508.3803"><vh>after sel=4.0,4.0</vh></v>
</v>
<v t="ekr.20110118082508.3808"><vh>@test reformat-paragraph list 2 of 5</vh>
<v t="ekr.20110118082508.3809"><vh>work</vh></v>
<v t="ekr.20110118082508.3810"><vh>before sel=4.0,4.0</vh></v>
<v t="ekr.20110118082508.3811"><vh>after sel=7.0,7.0</vh></v>
</v>
<v t="ekr.20110118082508.3816"><vh>@test reformat-paragraph list 3 of 5</vh>
<v t="ekr.20110118082508.3817"><vh>work</vh></v>
<v t="ekr.20110118082508.3818"><vh>before sel=7.0,7.0</vh></v>
<v t="ekr.20110118082508.3819"><vh>after sel=10.0,10.0</vh></v>
</v>
<v t="ekr.20110118082508.3824"><vh>@test reformat-paragraph list 4 of 5</vh>
<v t="ekr.20110118082508.3825"><vh>work</vh></v>
<v t="ekr.20110118082508.3826"><vh>before sel=10.0,10.0</vh></v>
<v t="ekr.20201123191334.1"><vh>after sel=13.0,13.0</vh></v>
</v>
<v t="ekr.20110118082508.3832"><vh>@test reformat-paragraph list 5 of 5</vh>
<v t="ekr.20110118082508.3833"><vh>work</vh></v>
<v t="ekr.20110118082508.3834"><vh>before sel=13.0,13.0</vh></v>
<v t="ekr.20110118082508.3835"><vh>after sel=15.1,15.1</vh></v>
</v>
<v t="ekr.20131103084038.4274"><vh>@test reformat-paragraph new code 1 of 8</vh>
<v t="ekr.20131103084038.4275"><vh>work</vh></v>
<v t="ekr.20131103084038.4276"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20131103084038.4277"><vh>after sel=2.0,2.0</vh></v>
</v>
<v t="ekr.20131103084038.4282"><vh>@test reformat-paragraph new code 2 of 8</vh>
<v t="ekr.20131103084038.4283"><vh>work</vh></v>
<v t="ekr.20131103084038.4284"><vh>before sel=2.0,2.0</vh></v>
<v t="ekr.20131103084038.4285"><vh>after sel=3.0,3.0</vh></v>
</v>
<v t="ekr.20131103084038.4290"><vh>@test reformat-paragraph new code 3 of 8</vh>
<v t="ekr.20131103084038.4291"><vh>work</vh></v>
<v t="ekr.20131103084038.4292"><vh>before sel=3.1,4.1</vh></v>
<v t="ekr.20131103084038.4293"><vh>after sel=4.0,4.0</vh></v>
</v>
<v t="ekr.20131103084038.4298"><vh>@test reformat-paragraph new code 4 of 8</vh>
<v t="ekr.20131103084038.4299"><vh>work</vh></v>
<v t="ekr.20131103084038.4300"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20131103084038.4301"><vh>after sel=3.0,3.0</vh></v>
</v>
<v t="ekr.20131103084038.4306"><vh>@test reformat-paragraph new code 5 of 8</vh>
<v t="ekr.20131103084038.4307"><vh>work</vh></v>
<v t="ekr.20131103084038.4308"><vh>before sel=1.0,2.0</vh></v>
<v t="ekr.20131103084038.4309"><vh>after sel=3.0,3.0</vh></v>
</v>
<v t="ekr.20131103084038.4314"><vh>@test reformat-paragraph new code 6 of 8</vh>
<v t="ekr.20131103084038.4315"><vh>work</vh></v>
<v t="ekr.20131103084038.4316"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20131103084038.4317"><vh>after sel=4.0,4.0</vh></v>
</v>
<v t="ekr.20131103084038.4322"><vh>@test reformat-paragraph new code 7 of 8</vh>
<v t="ekr.20131103084038.4323"><vh>work</vh></v>
<v t="ekr.20131103084038.4324"><vh>before sel=2.11,2.11</vh></v>
<v t="ekr.20131103084038.4325"><vh>after sel=3.1,3.1</vh></v>
</v>
<v t="ekr.20131103084038.4330"><vh>@test reformat-paragraph new code 8 of 8</vh>
<v t="ekr.20131103084038.4331"><vh>work</vh></v>
<v t="ekr.20131103084038.4332"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20131103084038.4333"><vh>after sel=3.0,3.0</vh></v>
</v>
<v t="ekr.20110118082508.3766"><vh>@test reformat-paragraph paragraph 1 of 3</vh>
<v t="ekr.20110118082508.3772"><vh>work</vh></v>
<v t="ekr.20110118082508.3773"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20110118082508.3792"><vh>after sel=13.0,13.0</vh></v>
</v>
<v t="ekr.20110118082508.3779"><vh>@test reformat-paragraph paragraph 2 of 3</vh>
<v t="ekr.20110118082508.3780"><vh>work</vh></v>
<v t="ekr.20110118082508.3781"><vh>before sel=13.0,13.0</vh></v>
<v t="ekr.20110118082508.3782"><vh>after sel=25.0,25.0</vh></v>
</v>
<v t="ekr.20110118082508.3787"><vh>@test reformat-paragraph paragraph 3 of 3</vh>
<v t="ekr.20110118082508.3788"><vh>work</vh></v>
<v t="ekr.20110118082508.3789"><vh>before sel=25.10,25.10</vh></v>
<v t="ekr.20110118082508.3790"><vh>after sel=34.0,34.0</vh></v>
</v>
<v t="ekr.20110118082508.3730"><vh>@test reformat-paragraph simple hanging indent</vh>
<v t="ekr.20110118082508.3745"><vh>work</vh></v>
<v t="ekr.20110118082508.3746"><vh>before sel= 1.0,1.0</vh></v>
<v t="ekr.20110118082508.3747"><vh>after sel= 7.0,7.0</vh></v>
</v>
<v t="ekr.20110118082508.3748"><vh>@test reformat-paragraph simple hanging indent 2</vh>
<v t="ekr.20110118082508.3754"><vh>work</vh></v>
<v t="ekr.20110118082508.3755"><vh>before sel=2.0,2.0</vh></v>
<v t="ekr.20110118082508.3756"><vh>after sel=7.0,7.0</vh></v>
</v>
<v t="ekr.20110118082508.3757"><vh>@test reformat-paragraph simple hanging indent 3</vh>
<v t="ekr.20110118082508.3763"><vh>work</vh></v>
<v t="ekr.20110118082508.3764"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20110118082508.3765"><vh>after sel=7.0,7.0</vh></v>
</v>
</v>
</v>
</v>
<v t="ekr.20101220161557.6016"><vh>Active Unit Tests</vh>
<v t="edward.20160314170027.56" descendentVnodeUnknownAttributes="7d7100285808000000302e332e31322e3371017d71025809000000756e69745f7465737471035804000000616263647104735809000000302e332e31382e333571057d710658090000006d795f706c7567696e7107580300000076616c710873752e"><vh>@file activeUnitTests.txt</vh></v>
</v>
<v t="ekr.20071113192611"><vh>leoEditCommands</vh>
<v t="ekr.20210829055149.1"><vh> Edit command tests: still needed</vh>
<v t="ekr.20071113145804.16"><vh>@test helpForbindings</vh></v>
<v t="ekr.20071113145804.17"><vh>@test helpForFindCommands</vh></v>
<v t="ekr.20111104171708.3847"><vh>@test c-to-python</vh>
<v t="ekr.20111104171708.3848"><vh>c tokenize test</vh></v>
</v>
<v t="ekr.20191215093835.1"><vh>data</vh>
<v t="ekr.20191215093835.7"><vh>a</vh>
<v t="ekr.20191215093835.8"><vh>b</vh></v>
</v>
<v t="ekr.20191215093835.4"><vh>c</vh></v>
<v t="ekr.20191215093835.5"><vh>d</vh></v>
<v t="ekr.20191215093835.6"><vh>e</vh>
<v t="ekr.20191215093835.7"></v>
</v>
</v>
<v t="ekr.20111006105711.3544"><vh>@test clone-marked-nodes</vh></v>
<v t="ekr.20150414144103.1"><vh>@test dabbrev-completion</vh></v>
<v t="ekr.20150414144038.1"><vh>@test dabbrev-expand</vh></v>
<v t="ekr.20111006064419.3491"><vh>@test delete-marked-nodes</vh></v>
<v t="ekr.20120212130242.3942"><vh>data</vh>
<v t="ekr.20120212130242.3948"><vh>a</vh>
<v t="ekr.20120212130242.3949"><vh>b</vh></v>
</v>
<v t="ekr.20120212130242.3945"><vh>c</vh></v>
<v t="ekr.20120212130242.3946"><vh>d</vh></v>
<v t="ekr.20120212130242.3947"><vh>e</vh>
<v t="ekr.20120212130242.3948"></v>
</v>
</v>
<v t="ekr.20070305095401"><vh>@test goNext/PrevVisitedNode</vh></v>
<v t="ekr.20170401123840.1"><vh>goto-global-line tests</vh>
<v t="ekr.20170401123840.2"><vh>@test c.goToScriptLineNumber</vh>
<v t="ekr.20170401123840.3"><vh>syntax-error</vh></v>
</v>
<v t="ekr.20170401123840.4"><vh>@test find_file_line: @auto-md</vh></v>
<v t="ekr.20170401123840.5"><vh>@test find_file_line: @auto-org</vh></v>
<v t="ekr.20170401123840.6"><vh>@test find_file_line: @auto-otl</vh></v>
<v t="ekr.20170401123840.7"><vh>@test find_file_line: @auto-py</vh></v>
<v t="ekr.20170401123840.9"><vh>@test find_file_line: @clean-c</vh></v>
<v t="ekr.20170401123840.10"><vh>@test find_file_line: @clean-python</vh></v>
<v t="ekr.20170401123840.11"><vh>@test find_file_line: @file-c</vh></v>
<v t="ekr.20170401123840.12"><vh>@test find_file_line: @file-python</vh></v>
<v t="ekr.20170401123840.13"><vh>@test find_file_line: @nosent-python</vh></v>
<v t="ekr.20170401123840.14"><vh>@test find_gnx @file</vh></v>
<v t="ekr.20170401123840.15"><vh>@test goto_show_results not found</vh></v>
</v>
<v t="ekr.20071113145804.4"><vh>@test selfInsertCommand-1</vh></v>
<v t="ekr.20071113145804.5"><vh>@test selfInsertCommand-2 (replacing tabs)</vh></v>
<v t="ekr.20071007120750.6"><vh>@test set-fill-prefix</vh></v>
<v t="ekr.20100212104817.5347"><vh>@test sort-siblings (new)</vh>
<v t="ekr.20100212104817.5348"><vh>b</vh></v>
<v t="ekr.20100212104817.5349"><vh>a</vh></v>
<v t="ekr.20100212104817.5350"><vh>c</vh></v>
</v>
<v t="ekr.20100212104817.5346"><vh>@test sort-recent-files (new)</vh></v>
</v>
<v t="ekr.20061104172236.1"><vh> Function tests</vh>
<v t="ekr.20150430053825.1"><vh>@test abbrevCommands.next_place</vh>
<v t="ekr.20150430061225.1"><vh>child</vh></v>
</v>
<v t="ekr.20100902074747.5970"><vh>@test addAbbrevHelper</vh></v>
<v t="ekr.20061104172236.3"><vh>@test capitalizeHelper</vh></v>
<v t="ekr.20100131180007.5453"><vh>@test dynamicExpandHelper</vh></v>
<v t="ekr.20061104172236.5"><vh>@test extendHelper</vh></v>
<v t="ekr.20080408094623.1"><vh>@test findWord</vh></v>
<v t="ekr.20061104172236.2"><vh>@test findWordInLine</vh></v>
<v t="ekr.20071113145804.15"><vh>@test helpForMinibuffer</vh></v>
<v t="ekr.20061104172236.6"><vh>@test moveToHelper</vh></v>
<v t="ekr.20061110094226"><vh>@test moveUpOrDownHelper</vh></v>
<v t="ekr.20061104172236.7"><vh>@test scrollHelper</vh></v>
<v t="ekr.20061104172236.4"><vh>@test setMoveCol</vh></v>
</v>
<v t="ekr.20100204165850.5371"><vh>Toggle commands</vh>
<v t="ekr.20100119102849.5108"><vh>@test toggle-extend-mode</vh>
<v t="ekr.20100119102849.5109"><vh>&lt;&lt; define table &gt;&gt;</vh></v>
<v t="ekr.20100119102849.5110"><vh>work</vh></v>
</v>
<v t="ekr.20100204165850.5373"><vh>@test most toggle commands</vh></v>
</v>
<v t="ekr.20051107115231"><vh> Typing</vh>
<v t="ekr.20060208072415"><vh>@test Delete key sticks in body</vh></v>
<v t="ekr.20051125170139"><vh>@test Delete key sticks in headline</vh></v>
<v t="ekr.20051120110335"><vh>@test insert-node can be undone and redone</vh></v>
<v t="ekr.20130923090601.4178"><vh>@test insert-node-before node can be undone and redone</vh></v>
<v t="ekr.20051125155134"><vh>@test inserting a new node draws the screen exactly once</vh></v>
<v t="ekr.20051107115231.18"><vh>@test paste and undo in headline - at end</vh></v>
<v t="ekr.20051107115231.20"><vh>@test paste and undo in headline - with selection</vh></v>
<v t="ekr.20051107115231.16"><vh>@test paste at end of headline</vh></v>
<v t="ekr.20060208072331"><vh>@test paste from menu into headline sticks</vh></v>
<v t="ekr.20051107115231.14"><vh>@test return ends editing of headline</vh></v>
<v t="ekr.20051107115231.28"><vh>@test selecting new node retains paste in headline</vh></v>
<v t="ekr.20051107115231.21"><vh>@test selecting new node retains typing in headline</vh></v>
<v t="ekr.20051107115231.17"><vh>@test typing and undo in headline - at end</vh></v>
<v t="ekr.20051109091731"><vh>@test typing in non-empty body text does not redraw the screen</vh></v>
<v t="ekr.20051120115046"><vh>@test undoing insert node restores previous node's body text</vh></v>
<v t="ekr.20060131102450"><vh>@test zz print end of typing tests</vh></v>
</v>
<v t="ekr.20070306091949"><vh>@test zz end of leoEditCommands tests</vh></v>
</v>
</vnodes>
<tnodes>
<t tx="btheado.20190926182937.1">c.testManager.runEditCommandTest(p)
</t>
<t tx="btheado.20190926182937.2">first line
line 1
    line a
        line b
line c
last non-blank line
</t>
<t tx="btheado.20190926182937.3">first line
line 1
    line a
        line b
line c
last non-blank line
</t>
<t tx="btheado.20190926182937.4">first line
line 1
    line a
        line b
line c
last non-blank line
</t>
<t tx="btheado.20190926223006.1">c.testManager.runEditCommandTest(p)
</t>
<t tx="btheado.20190926223006.2">first line

line 1
    line a
        line b
line c
last line
</t>
<t tx="btheado.20190926223006.3">first line

line 1
    line a
        line b
line c
last line
</t>
<t tx="btheado.20190926223006.4">first line

line 1
    line a
        line b
line c
last line
</t>
<t tx="btheado.20190926224744.1">c.testManager.runEditCommandTest(p)
</t>
<t tx="btheado.20190926224744.2">first line
line 1
    line a
        line b
line c
last non-blank line
 
</t>
<t tx="btheado.20190926224744.3">first line
line 1
    line a
        line b
line c
last non-blank line
 
</t>
<t tx="btheado.20190926224744.4">first line
line 1
    line a
        line b
line c
last non-blank line
 
</t>
<t tx="btheado.20190927201634.1">c.testManager.runEditCommandTest(p)
</t>
<t tx="btheado.20190927201634.2">first line
line 1
    line a
        line b
line c
last non-blank line
</t>
<t tx="btheado.20190927201634.3">first line
line 1
    line a
        line b
line c
last non-blank line
</t>
<t tx="btheado.20190927201634.4">first line
line 1
    line a
        line b
line c
last non-blank line
</t>
<t tx="bwmulder.20050108100437.1">@killcolor

Running unit tests from test.leo is easy, provided you have enabled the
Scripting plugin. When this plugin is enabled Leo will create a blue 'script
button' in the icon bar called 'unit test'. 

- To run all unit tests, select the node in test.leo called 'Unit tests...',
then do &lt;alt-4&gt; 

- To run a single test, select an @test node and do &lt;alt-4&gt;.

- To run a suite of tests, select an @suite node and do &lt;alt-4&gt;.

- To run any other collection of tests, create an outline containing those @test
or @suite nodes, select the root of that tree and do &lt;alt-4&gt; .

Several nodes in the tree @thin ../src/leoTest.py (in test.leo) contain support
code for @test, @suite, etc. so if you want all the gory details you can read
the code. It's not complicated: Leo creates UnitTest classes automatically whose
run method is the body of the @suite or @test node.
</t>
<t tx="ekr.20041121151002"># Many of these are required for unit tests.
# Do not change them without running all unit tests.</t>
<t tx="ekr.20050328101834"></t>
<t tx="ekr.20050328101834.1"></t>
<t tx="ekr.20050328101834.2"></t>
<t tx="ekr.20050328101834.3"></t>
<t tx="ekr.20050618061835">@killcolor

Here is a tutorial written by Roger Erens.

Version Date        LeoID       Remarks
------- ----        -----       -------
0.1     20050519    rogererens  Initial version</t>
<t tx="ekr.20050618061835.1">So you think "Well, since I've written this piece of funky Python software, and everybody keeps saying how useful unit testing is, I really ought to start using unit tests." And since Leo's creator has said countless times in the Leo forums how easy unit testing in Leo is, a few uncomplicated examples might help convince you that he's not spamming.

Beware: this How-To should be the last time that you write tests AFTER having written your funky software! Test Driven Development dictates that tests have to be prepared BEFORE you get down to writing your actual code. See a nice tutorial on O'Reilly's website (url given in the descendant node).</t>
<t tx="ekr.20050618061835.10">Start of Do @test
F
======================================================================
FAIL: @test my second Leo test

----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\Documents and Settings\re1705\My Documents\PythonStuff\leo\src\leoTes
t.py", line 148, in runTest
    exec script + '\n' in {'c':c,'g':g,'p':p}
  File "&lt;string&gt;", line 3, in ?
AssertionError

----------------------------------------------------------------------
Ran 1 test in 0.010s

FAILED (failures=1)
End of Do @test</t>
<t tx="ekr.20050618061835.11">A real fun feature of Leo is that Leo saves you from having to select each and single @test node and press the 'Do @test' button to obtain testing results. Just collecting the @test nodes under an organizing node, selecting that organizing node, and pressing the 'Do @test' button will suffice.
Of course, this was one of the key ideas of unit testing, but it's nice to see it being implemented by Leo so smoothly!

So, press the button while having this node selected, and see if your console's output matches the third child node more or less. </t>
<t tx="ekr.20050618061835.12">Start of Do @test
.F
======================================================================
FAIL: @test my second Leo test

----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\leo\src\leoTest.py", line 148, in runTest
    exec script + '\n' in {'c':c,'g':g,'p':p}
  File "&lt;string&gt;", line 3, in ?
AssertionError

----------------------------------------------------------------------
Ran 2 tests in 0.040s

FAILED (failures=1)
End of Do @test</t>
<t tx="ekr.20050618061835.13">Okay: so you've seen now some simple stand-alone tests to get your toes wet.
Now, we get to the 'grande finale' and see real-life usage of the @test nodes.

The @test child node below illustrates the following points:

1.  The node imports the module to test (and keeps it up to date by reloading it).
2.  It also obtains data to use as input and referral. This is what you might call
    the setUp methods in traditional unit tests. If more tests need the same data,
    you can put the nodes in a central place where all the @test nodes can find
    them. Likewise, common code for several unit tests might be collected in a
    central place.
3.  Comparable with the traditional unit tests' tearDown method, some statements
    can follow the test itself, if neccessary. You might also consider using a
    try/finally construct.
4.  I have used g.es() statements instead of print statements, since the latter
    clutter the console. Try replacing the g.es() statements by corresponding
    print statements to see what I mean. With more than one @test node being tested,
    this will give quite a dreadful look.</t>
<t tx="ekr.20050618061835.14">@color

try:
    # SETUP
    import koekiemonster # this module defines a function want() which we want to test
    reload(koekiemonster) # changes in koekiemonster need to propagate to the test

    # obtaining the input parameter for the function
    inputNode = p.firstChild()
    inputData = inputNode.b
    
    # obtaining the expected result from the function with above input parameter
    expectedResultNode = inputNode.next()
    expected = expectedResultNode.b
    
    # execute the function with above input parameter
    result = koekiemonster.wants(inputData)
    
    # TEST
    assert(result == expected)
    
    # TEARDOWN
    g.es("Now it's time to clean up")

except AssertionError:
    # TEARDOWN
    g.es("Oh oh! %s failed:" % p.h.strip())
    g.es("koekiemonster.wants(%s)==%s" % (inputData, result))
    g.es("Expected: %s" % expected)
    raise # pass the exception on to the unit test machinery</t>
<t tx="ekr.20050618061835.15">vegetables</t>
<t tx="ekr.20050618061835.16">Yuck!</t>
<t tx="ekr.20050618061835.17">Start of Do @test
F
======================================================================
FAIL: @test koekiemonster.wants()

----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\leo\src\leoTest.py", line 148, in runTest
    exec script + '\n' in {'c':c,'g':g,'p':p}
  File "&lt;string&gt;", line 22, in ?
AssertionError

----------------------------------------------------------------------
Ran 1 test in 0.070s

FAILED (failures=1)
End of Do @test</t>
<t tx="ekr.20050618061835.18">Start of Do @test
Oh oh: @test koekiemonster.wants() failed:
koekiemonster.wants(vegetables)=Yack!
Expected: Yuck!
F
======================================================================
FAIL: @test koekiemonster.wants()

----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\leo\src\leoTest.py", line 148, in runTest
    exec script + '\n' in {'c':c,'g':g,'p':p}
  File "&lt;string&gt;", line 22, in ?
AssertionError

----------------------------------------------------------------------
Ran 1 test in 0.051s

FAILED (failures=1)
End of Do @test</t>
<t tx="ekr.20050618061835.19">With the aforementioned possibilities of running all @test nodes in a subtree
with a single click on a button, the sharing of input/expected data, and the
sharing of setUp/tearDown code, there hardly seems a need for the @suite nodes.

On Leo's website
(http://webpages.charter.net/edreamleo/scripting.html#unit-testing-with-test-and-suite)
I could still find some extra info on @suite nodes, not found in LeoDocs.leo:

&lt;quote&gt;

Using @suite nodes

Such nodes create a suite of tests. Leo executes the script in these nodes similar to @test nodes, but Leo assumes that the script in an @suite node will do the following:

    * Create a suite of unit tests
    * Put the suite in g.app.scriptDict["suite"]

The difference between @test and @suite is:

    * Leo creates a unit test from script in an @test node by creating an instance of generalTestCase, a subclass of unittest.TestCase.
    * The script in an @suite node creates the test suite.

An @suite nodes allows us to create "legacy" unit tests simply. For example,
rather than rewriting all the reformatParagraph unit tests to use @test nodes, I
simply wrote an @suite node with the following body.

    suite = c.testManager.makeReformatParagraphSuite()
    g.app.scriptDict['suite'] = suite

&lt;/quote&gt;

Well, that's almost, but not quite completely, totally incomprehensible to me.
Fortunately, since Leo's creator removed most of this quote from LeoDocs.leo and
test.leo, this information appears to be outdated
.</t>
<t tx="ekr.20050618061835.2"></t>
<t tx="ekr.20050618061835.20">Don't forget to read the node
Users Guide--&gt;Chapter 7: Scripting Leo with Python--&gt;Unit testing with @test, @suite
in LeoDocs.leo, especially the final notes. Also investigate a little further in test.leo to see some heavy weight lifting.

This concludes my How-To on using @test. It was not written by an expert on (unit) testing;
it is more or less the result of keeping notes on my way to find out how I could get started
with unit tests in Leo. Maybe it's useful for other newbies as well.

Please post any remarks on one of the Leo Fora, and if deemed helpful, I'll be glad to incorporate them into a next version.

Happy testing!</t>
<t tx="ekr.20050618061835.3">Comment by EKR: There is no need to do this if you use test.leo for your unit tests:  just use the unit test button.

From the console, start up a Leo instance. On MS Windows: go to the folder in which you installed Leo 4.3, open up the 'src' folder and double click the 'leo.py' file. Opening a command window, and typing "python leo.py" may be another way.

Use the File--&gt;Open... menu item to open the outline containing your code.

Choose a good-looking position to insert a new node called 'Test zone'. Copy the child node of the node you're reading right now, and paste it as a child node of 'Test zone'. The code it contains is essentially the same as found in the node
Unit tests...--&gt;Do @test
in the file 'test.leo' in the 'test' folder. I just added my 0.2 cents by adding some starting and finishing remarks. Remove them if they clutter your console too much.

Also, make sure that you have an entry 'Scripting' in the 'Plugins' menu (enable the plugin if neccessary). Now is a good time to save your leo file.

With the 'Scripting' plugin (also known as the 'mod_scripting' plugin) enabled, the net effect will be that the next time you open your outline, a blue button with the caption 'Do @test' shows up in the tool bar of Leo, if your screen is wide enough.
To get the button right away in the tool bar, I have to assume that you started Leo with the scripting plugin enabled. In this case, a yellow button with the caption 'script Button' can be pressed while having the node '@button Do @test' selected. Note: the resulting button will not be blue, but pink. Removing a button from the tool bar can be done by right-clicking it.

We'll see the use of this added button soon, but before that, read up on the 'assert' function in the Python manuals, since it is used a lot in testing. It won't be long before you're back here!</t>
<t tx="ekr.20050618061835.4">@color

g.pr("\nStart of Do @test")
c.testManager.doTests(all=False)
g.pr("End of Do @test")</t>
<t tx="ekr.20050618061835.5">The first child node of the node you're reading right now, contains the simplest succeeding test possible.
Select it, and press the button 'Do @test'.
You can find the verbatim result as it got sent to my console in the second child node.

A few things are worth noting here:

1.  The node containing the test must have its headline start with '@test'.
2.  Whenever the 'assert' statement finds out that the expression given to it
    is 'True', a test passes successfully. There are more ways to pass a test, but
    for now, let us stick to the use of assert functions.
3.  A passed test is denoted with a single dot in the output. See the line between
    'Start of Do @test' and the line filled with dashes. This is compatible with the
    way traditional unit testing shows its progress.
4.  Below the dashed line in the output, a summary is printed. This one surely gives
    us a reason to lean back for a moment, and congratualate ourselves with another
    piece of robust, funky code!</t>
<t tx="ekr.20050618061835.6">@color
assert(True)</t>
<t tx="ekr.20050618061835.7">Start of Do @test
.
----------------------------------------------------------------------
Ran 1 test in 0.010s

OK
End of Do @test</t>
<t tx="ekr.20050618061835.8">Now that you've seen a passing test, it should be obvious to imagine how a failing test would look like. See the first child node, and then run it by pressing the 'Do @test' button as before.

Instead of a dot denoting success, we get an 'F' denoting a failure on the line following 'Start of Do @test'. When running a lot of tests, the next part, following the lines filled with '='s, helps to identify which test failed.
It also includes a trace back, but for AssertionErrors, it does not seem to offer much added value to me right now. On second thought: when you have multiple asserts in a test, the trace back can tell you which assert function failed. Still, I would choose for only one assert function per test and get rid of this trace back altogether. This would keep the console much cleaner, IMHO.</t>
<t tx="ekr.20050618061835.9">@color
assert('Spam' == 'Ham')</t>
<t tx="ekr.20051012104957">@nosearch</t>
<t tx="ekr.20051013162226"></t>
<t tx="ekr.20051107115231"># These are mysteriously fragile tests, so they go first
</t>
<t tx="ekr.20051107115231.14">h = '@test return ends editing of headline'
p = c.testManager.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.redraw(p) # To make node visible
c.frame.tree.editLabel(p)
w = c.edit_widget(p)
guiName = g.app.gui.guiName()
wName = g.app.gui.widget_name(w)
assert wName.startswith('head'),'w.name:%s' % wName
g.app.gui.event_generate(c,'\n','Return',w)
c.outerUpdate()
assert w != c.get_focus(),'oops2: focus in headline'
</t>
<t tx="ekr.20051107115231.16">import sys
if sys.platform.startswith('linux'):
    self.skipTest('Not for Linux')

k = c.keyHandler
frame = c.frame ; tree = frame.tree ; canvas = tree.canvas
h = 'Test headline abc'
p = c.testManager.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.redrawAndEdit(p) # To make node visible
w = c.edit_widget(p)
g.app.gui.set_focus(c,w)
w2 = g.app.gui.get_focus(c)
try:
    assert w
    paste = 'ABC'
    g.app.gui.replaceClipboardWith(paste)
    g.app.gui.set_focus(c,w)
    w2 = g.app.gui.get_focus(c)
    w.setSelectionRange('end','end')
    if g.app.gui.guiName() == 'curses':
        c.frame.pasteText(event=g.Bunch(widget=w))
    else:
        stroke = k.getStrokeForCommandName('paste-text')
        if stroke is None:
            self.skipTest('no binding for paste-text') # #1345
        k.manufactureKeyPressForCommandName(w,'paste-text')
        g.app.gui.event_generate(c,'\n','Return',w)
    assert p.h == h + paste,'Expected: %s, got %s' % (
        h + paste,p.h)
finally:
    if 1:
        c.setHeadString(p,h) # Essential
        c.redraw(p)
</t>
<t tx="ekr.20051107115231.17">import sys
if sys.platform.startswith('linux'):
    self.skipTest('skip headline test')
if g.app.gui.guiName() == 'curses':
    # This could be adapted, but not now.
    self.skipTest('Not for curses gui')
k = c.k
if k.defaultUnboundKeyAction != 'insert':
    self.skipTest('defaultUnboundKeyAction != insert')
if not k.getStrokeForCommandName('undo'):
    self.skipTest('no settings')

frame = c.frame ; tree = frame.tree ; canvas = tree.canvas
h = 'Test headline abc'
p = c.testManager.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.redrawAndEdit(p) # To make the node visible.
w = c.edit_widget(p)
try:
    assert w, 'oops1'
    wName = g.app.gui.widget_name(w)
    assert wName.startswith('head'),'w.name:%s' % wName
    w.setSelectionRange('end','end')
    g.app.gui.event_generate(c,'X','Shift+X',w)
    g.app.gui.event_generate(c,'Y','Shift+Y',w)
    g.app.gui.event_generate(c,'Z','Shift+Z',w)
    g.app.gui.event_generate(c,'\n','Return',w)
    assert p.h == h + 'XYZ',(
        'oops2: expected: %s, got: %s' % (
            h + 'XYZ',p.h))
    if g.app.gui.guiName() != 'nullGui':
        assert c.undoer.undoMenuLabel == 'Undo Typing','oops3: %s' % (
            c.undoer.undoMenuLabel)
    k.manufactureKeyPressForCommandName(w,'undo')
    if g.app.gui.guiName() != 'nullGui':
        assert c.undoer.redoMenuLabel == 'Redo Typing','oops4'
    assert p.h == h,'oops5 got: %s, expected: %s' % (
        p.h,h)
finally:
    if 1:
        c.setHeadString(p,h) # Essential
        c.redraw(p)
</t>
<t tx="ekr.20051107115231.18">import sys
if sys.platform.startswith('linux'):
    self.skipTest('Not for Linux')

k = c.keyHandler
h = 'Test headline abc'
p = c.testManager.findNodeAnywhere(h)
assert p,'node not found: %s' % h
frame = c.frame
tree = frame.tree
canvas = tree.canvas
c.redrawAndEdit(p) # To make node visible
w = c.edit_widget(p)
try:
    assert w,'oops1'
    w.setSelectionRange('end','end')
    paste = 'ABC'
    g.app.gui.replaceClipboardWith(paste)
    w.setSelectionRange('end','end')
    if g.app.gui.guiName() == 'curses':
        c.frame.pasteText(event=g.Bunch(widget=w))
    else:
        stroke = k.getStrokeForCommandName('paste-text')
        if stroke is None:
            self.skipTest('no binding for paste-text') # #1345
        k.manufactureKeyPressForCommandName(w, 'paste-text')
        g.app.gui.event_generate(c,'\n','Return',w)
    assert p.h == h + paste, 'oops2 got: %s' % p.h
    k.manufactureKeyPressForCommandName(w,'undo')
    assert p.h == h, f"oops3 expected {h} got: {p.h}"
finally:
    if 1:
        c.setHeadString(p,h) # Essential
        c.redraw(p)
</t>
<t tx="ekr.20051107115231.20">import sys
if sys.platform.startswith('linux'):
    self.skipTest('skip headline test')
else:
    k = c.keyHandler
    frame = c.frame ; tree = frame.tree ; canvas = tree.canvas
    h = 'Test headline abc'
    p = c.testManager.findNodeAnywhere(h)
    assert p,'node not found: %s' % h
    c.redraw(p) # To make node visible
    tree.editLabel(p)
    w = c.edit_widget(p)
    try:
        assert w, 'Null w'
        paste = 'ABC'
        g.app.gui.replaceClipboardWith(paste)
        w.setSelectionRange('1.1','1.2')
        if g.app.gui.guiName() == 'curses':
            c.frame.pasteText(event=g.Bunch(widget=w))
        else:
            stroke = k.getStrokeForCommandName('paste-text')
            if stroke is None:
                self.skipTest('no binding for paste-text') # #1345
            k.manufactureKeyPressForCommandName(w,'paste-text')
            g.app.gui.event_generate(c,'\n','Return',w)
        assert p.h == h[0] + paste + h[2:]
        k.manufactureKeyPressForCommandName(w,'undo')
        assert p.h == h, 'head mismatch'
    finally:
        if 1:
            c.setHeadString(p,h) # Essential
            c.redraw(p)
</t>
<t tx="ekr.20051107115231.21">if g.in_bridge:
    self.skipTest('Not for TravisCI')
import sys
if sys.platform.startswith('linux'):
    self.skipTest('Not for Linux')
if g.app.gui.guiName() == 'curses':
    self.skipTest('Not for curses gui')

k = c.k
if k.defaultUnboundKeyAction == 'insert':
    frame = c.frame ; tree = frame.tree ; canvas = tree.canvas
    h = 'Test headline abc'
    p = c.testManager.findNodeAnywhere(h)
    assert p,'node not found: %s' % h
    c.redraw(p) # To make node visible
    tree.editLabel(p)
    w = c.edit_widget(p)
    try:
        assert w
        w.setSelectionRange('end','end')
        # char, shortcut.
        g.app.gui.event_generate(c,'X','Shift+X',w)
        g.app.gui.event_generate(c,'Y','Shift+Y',w)
        g.app.gui.event_generate(c,'Z','Shift+Z',w)
        g.app.gui.event_generate(c,'\n','Return',w)
        expected = h + 'XYZ'
        assert p.h == expected, f"oops 1: expected {expected!r} got {p.h!r}"
        k.manufactureKeyPressForCommandName(w,'undo')
        assert p.h == h, f"oops 2: expected {h!r} got {p.h!r}"
    finally:
        if 1:
            c.setHeadString(p, h) # Essential
            c.redraw(p)
</t>
<t tx="ekr.20051107115231.28">if g.in_bridge:
    self.skipTest('Not for TravisCI')
import sys
if sys.platform.startswith('linux'):
    self.skipTest('Not for Linux')

k = c.keyHandler
frame = c.frame ; tree = frame.tree ; canvas = tree.canvas
h = 'Test headline abc'
p = c.testManager.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.redraw(p) # To make node visible
tree.editLabel(p)
w = c.edit_widget(p)
try:
    assert w,'oops1'
    w.setSelectionRange('end','end')
    paste = 'ABC'
    g.app.gui.replaceClipboardWith(paste)
    w.setSelectionRange('end','end')
    if g.app.gui.guiName() == 'curses':
        c.frame.pasteText(event=g.Bunch(widget=w))
    else:
        k.manufactureKeyPressForCommandName(w,'paste-text')
    c.selectPosition(p.visBack(c))
    assert p.h == h + paste
    k.manufactureKeyPressForCommandName(w,'undo')
    assert p.h == h,'expected: %s, got: %s' % (
        h,p.h)
finally:
    if 1:
        c.setHeadString(p,h) # Essential
        c.redraw(p)
</t>
<t tx="ekr.20051109091731">h = 'Test headline abc'
p = c.testManager.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.setBodyString(p,'a')
c.redraw(p) # To make node visible
c.bodyWantsFocus()
n = c.frame.tree.redrawCount
try:
    w = c.frame.body.wrapper
    g.app.gui.event_generate(c,'a','a',w)
    n2 = c.frame.tree.redrawCount
    assert n2 == n,'too many redraws: %d' % (n2-n)
finally:
    if 1:
        c.setBodyString(p,'')
        c.redraw(p)
</t>
<t tx="ekr.20051120110335">u = c.undoer
assert u
c.insertHeadline()
assert u.undoMenuLabel == 'Undo Insert Node',repr(u.undoMenuLabel)
c.undoer.undo()
assert u.redoMenuLabel == 'Redo Insert Node',repr(u.undoMenuLabel)
</t>
<t tx="ekr.20051120115046">h = 'Test headline abc'
p = c.testManager.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
body = 'This is a test'
c.setBodyString(p,body)

try:
    assert p.b == body
    c.insertHeadline()
    c.undoer.undo()
    assert p.b == body
finally:
    c.setBodyString(p,'')
</t>
<t tx="ekr.20051125155134">n = c.frame.tree.redrawCount
c.insertHeadline()
c.outerUpdate() # Not actually needed, but should not matter.
try:
    n2 = c.frame.tree.redrawCount
    if g.app.isExternalUnitTest:
        self.skipTest('Can not be run externally')
    else:
        assert n2 == n + 1,'redraws: %d' % (n2 - n)
finally:
    c.undoer.undo()
</t>
<t tx="ekr.20051125170139">h = 'Test headline abc'
p = c.testManager.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.redraw(p) # To make node visible
c.frame.tree.editLabel(p)
w = c.edit_widget(p)
try:
    assert w
    w.setSelectionRange('end','end')
finally:
    if 1:
        c.setHeadString(p,h) # Essential
        c.redraw(p)
</t>
<t tx="ekr.20060131102450"># Print does not work: it is redirected.
g.pr('\nEnd of typing tests')
</t>
<t tx="ekr.20060208072331">h = 'Test headline abc'
p = c.testManager.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
c.frame.tree.editLabel(p)
w = c.edit_widget(p)
w.setSelectionRange('end','end',insert='end')
paste = 'ABC'
g.app.gui.replaceClipboardWith(paste)
event = g.app.gui.create_key_event(c,w=w)
c.frame.pasteText(event)
# Move around and and make sure it doesn't change.
try:
    # g.trace('before select',w,w.getAllText())
    c.selectPosition(p.threadBack())
    assert p.h == h + paste,'oops1: expected: %s, got %s' % (h + paste,p.h)
    c.selectPosition(p)
    assert p.h == h + paste,'oops2: expected: %s, got %s' % (h + paste,p.h)
finally:
    if 1:
        c.setHeadString(p,h) # Essential
        c.redraw(p)
</t>
<t tx="ekr.20060208072415">h = 'Test headline abc'
p = c.testManager.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
s = 'ABC'
c.setBodyString(p,s)
try:
    c.bodyWantsFocus()
    w = c.frame.body.wrapper
    w.setInsertPoint(2)
    c.outerUpdate() # This fixed the problem.
    if 1:
        c.k.simulateCommand('delete-char')
    else:
        # This fails unless Delete is bound to delete-char
        g.app.gui.event_generate(c,'Delete','Delete',w) # Calls c.outerUpdate()
    assert p.b == s[:-1],'oops1: expected "AB", got %s' % p.b
    c.selectPosition(p.threadBack())
    c.selectPosition(p)
    assert p.b == s[:-1],'oops2: expected "AB", got %s' % p.b
finally:
    if 0:
        c.setBodyString(p,'')
        c.redraw(p)
</t>
<t tx="ekr.20061101121602.100">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.101">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.102">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.103">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.104">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.105">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.106">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.107">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.108">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.109">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.110">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.111">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.112">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.113">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.114">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.115">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.116">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.117">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.118">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.119">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.120">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.121">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.122">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.123">first lie
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.124">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.125">first lie
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.126">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.127">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.128">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.129">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.130">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.131">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.132">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.133">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.134">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.135">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.136">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.137">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.138">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.139">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.140">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.141">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.142">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.143">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.144">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.145">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.146">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.147">first line
line 1
    Line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.148">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.149">first line
line 1
    Line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.150">@pagewidth 70 # Required for unit test.

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.151">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly $14 billion in damage.
StormReady, a program started in 1999 in Tulsa, OK,
helps arm America's communities with the communication and safety
skills needed to save lives and property– before and during the event.
StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.152">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly $14 billion in damage.
StormReady, a program started in 1999 in Tulsa, OK,
helps arm America's communities with the communication and safety
skills needed to save lives and property– before and during the event.
StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.153">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly $14 billion in damage.
StormReady, a program started in 1999 in Tulsa, OK,
helps arm America's communities with the communication and safety
skills needed to save lives and property– before and during the event.
StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.154">@pagewidth 70 # Required for unit test.

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.155">Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly $14 billion in damage.
         StormReady, a program started in 1999 in Tulsa, OK,
  helps arm America's communities with the communication and safety
skills needed to save lives and property– before and during the event.
StormReady helps community leaders and emergency managers strengthen local safety programs.
</t>
<t tx="ekr.20061101121602.156">Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly $14 billion in damage.
StormReady, a program started in 1999 in Tulsa, OK,
helps arm America's communities with the communication and safety
skills needed to save lives and property– before and during the event.
StormReady helps community leaders and emergency managers strengthen local safety programs.
</t>
<t tx="ekr.20061101121602.157">Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly $14 billion in damage.
         StormReady, a program started in 1999 in Tulsa, OK,
  helps arm America's communities with the communication and safety
skills needed to save lives and property– before and during the event.
StormReady helps community leaders and emergency managers strengthen local safety programs.
</t>
<t tx="ekr.20061101121602.158">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.159">first line
line    line b
line c
last line
</t>
<t tx="ekr.20061101121602.160">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.161">first line
line    line b
line c
last line
</t>
<t tx="ekr.20061101121602.162">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.163">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.164">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.165">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.166">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.167">firstline
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.168">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.169">firstline
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.170">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.171">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.172">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.173">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.174">c.testManager.runEditCommandTest(p)
assert g.app.unitTestDict.get('colorized')
</t>
<t tx="ekr.20061101121602.175">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. stormready, a program started in 1999 in tulsa, ok, helps arm america's communities with the communication and safety skills needed to save lives and property– before and during the event. stormready helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.176">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.177">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. stormready, a program started in 1999 in tulsa, ok, helps arm america's communities with the communication and safety skills needed to save lives and property– before and during the event. stormready helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.178">c.testManager.runEditCommandTest(p)
assert g.app.unitTestDict.get('colorized')
</t>
<t tx="ekr.20061101121602.179">xyzzy line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.180">XYZZY line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.181">xyzzy line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.182">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.183">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.184">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.185">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.186">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.187">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.188">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.189">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.190">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.191">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.192">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.193">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.194">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.195">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.196">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.197">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.198">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.199">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.200">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.201">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.202">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.203">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.204">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.205">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.206">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.207">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.208">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.209">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.210">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.211">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.212">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.213">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.214">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.215">first line
line 1
    line_24a a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.216">first line
line 1
    line_24a a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.217">first line
line 1
    line_24a a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.218">@pagewidth 80
    # Required for external unit test.

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.219">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Services StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property--before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.220">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Services StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially
declared disasters are weather related,
leading to around 500 deaths per year
and nearly $14 billion in damage.
StormReady, a program
started in 1999 in Tulsa, OK,
helps arm America's
communities with the communication and
safety skills needed to save lives and
property--before and during the event.
StormReady helps community leaders and
emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.222">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.223">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.224">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.225">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.226">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.227">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.228">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.229">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.230">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.231">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.232">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.233">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.234">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.235">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.236">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.237">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.238">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.239">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.240">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.241">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.242">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.243">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.244">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.245">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.246">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.247">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.248">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.249">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.250">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.251">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.252">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.253">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.254">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.255">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.256">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.257">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.258">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.259">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.260">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.261">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.262">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.263">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.264">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.265">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.266">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.267">first line
line 1
    line a
        line b
        line c
last line
</t>
<t tx="ekr.20061101121602.268">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.269">first line
line 1
    line a
        line b
        line c
last line
</t>
<t tx="ekr.20061101121602.270">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.271">first line
	line 1
	    line a
	        line b
	line c
last line
</t>
<t tx="ekr.20061101121602.272">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.273">first line
	line 1
	    line a
	        line b
	line c
last line
</t>
<t tx="ekr.20061101121602.274">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.275">first li
ne
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.276">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.277">first li
ne
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.278">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.279">first() line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.280">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.281">first() line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.282">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.283">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.



StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.284">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.



StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.285">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.286">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.287">first line
line 1
line c
    line a
        line b
last line
</t>
<t tx="ekr.20061101121602.288">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.289">first line
line 1
line c
    line a
        line b
last line
</t>
<t tx="ekr.20061101121602.290">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.291">line 1
first line
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.292">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.293">line 1
first line
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.294">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.295">first (line)
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.296">first (line)
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.297">first (line)
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.298">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.299">first line
line 1
    (line )a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.300">first line
line 1
    (line )a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.301">first line
line 1
    (line )a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.302">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.303">first line
line 1
    
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.304">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.305">first line
line 1
    
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.306">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.307">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.308">first line

line 1
    line a
        line b

line c
last line
</t>
<t tx="ekr.20061101121602.309">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.310">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.311">first line

line 1
   line a
       line b

line c
last line
</t>
<t tx="ekr.20061101121602.312">first line

line 1
    line a
        line b

line c
last line
</t>
<t tx="ekr.20061101121602.313">first line

line 1
   line a
       line b

line c
last line
</t>
<t tx="ekr.20061101121602.314">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.315">first line
line 1
line a
    line b
line c
last line
</t>
<t tx="ekr.20061101121602.316">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.317">first line
line 1
line a
    line b
line c
last line
</t>
<t tx="ekr.20061101121602.318">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.319">
last line
line c
        line b
    line a
line 1
first line
</t>
<t tx="ekr.20061101121602.320">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.321">
last line
line c
        line b
    line a
line 1
first line
</t>
<t tx="ekr.20061101121602.322">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.323">        line b
    line a
first line
last line
line 1
line c
</t>
<t tx="ekr.20061101121602.324">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.325">        line b
    line a
first line
last line
line 1
line c
</t>
<t tx="ekr.20061101121602.326">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.327">first line
        line b
    line a
line 1
line c
last line
</t>
<t tx="ekr.20061101121602.328">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.329">first line
        line b
    line a
line 1
line c
last line
</t>
<t tx="ekr.20061101121602.330">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.331">first
 line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.332">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.333">first
 line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.334">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.335">first line
line 1
	line a
		line b
line c
last line
</t>
<t tx="ekr.20061101121602.336">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.337">first line
line 1
	line a
		line b
line c
last line
</t>
<t tx="ekr.20061101121602.338">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.339">frist line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.340">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.341">frist line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.342">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.343">line 1
first line
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.344">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.345">line 1
first line
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.346">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.347">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.348">first line
line 1
	line a
		line b
line c
last line
</t>
<t tx="ekr.20061101121602.349">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.350">c.testManager.runEditCommandTest(p)
assert g.app.unitTestDict.get('colorized')
</t>
<t tx="ekr.20061101121602.351">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

SOME 90% OF ALL PRESIDENTIALLY DECLARED DISASTERS ARE WEATHER RELATED, LEADING TO AROUND 500 DEATHS PER YEAR AND NEARLY $14 BILLION IN DAMAGE. STORMREADY, A PROGRAM STARTED IN 1999 IN TULSA, OK, HELPS ARM AMERICA'S COMMUNITIES WITH THE COMMUNICATION AND SAFETY SKILLS NEEDED TO SAVE LIVES AND PROPERTY– BEFORE AND DURING THE EVENT. STORMREADY HELPS COMMUNITY LEADERS AND EMERGENCY MANAGERS STRENGTHEN LOCAL SAFETY PROGRAMS.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.352">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.353">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

SOME 90% OF ALL PRESIDENTIALLY DECLARED DISASTERS ARE WEATHER RELATED, LEADING TO AROUND 500 DEATHS PER YEAR AND NEARLY $14 BILLION IN DAMAGE. STORMREADY, A PROGRAM STARTED IN 1999 IN TULSA, OK, HELPS ARM AMERICA'S COMMUNITIES WITH THE COMMUNICATION AND SAFETY SKILLS NEEDED TO SAVE LIVES AND PROPERTY– BEFORE AND DURING THE EVENT. STORMREADY HELPS COMMUNITY LEADERS AND EMERGENCY MANAGERS STRENGTHEN LOCAL SAFETY PROGRAMS.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.354">c.testManager.runEditCommandTest(p)
assert g.app.unitTestDict.get('colorized')
</t>
<t tx="ekr.20061101121602.355">first line
line 1
    LINE a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.356">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.357">first line
line 1
    LINE a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.78">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.79">first line
 line 1
     line a
 line b
last line
</t>
<t tx="ekr.20061101121602.80">first line
line 1
    line a
line b
last line
</t>
<t tx="ekr.20061101121602.81">first line
 line 1
     line a
 line b
last line
</t>
<t tx="ekr.20061101121602.82">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.83">first line
    line 1
        line a
            line b
    line c
last line
</t>
<t tx="ekr.20061101121602.84">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.85">first line
    line 1
        line a
            line b
    line c
last line
</t>
<t tx="ekr.20061101121602.86">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.87">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.88">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.89">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.90">c.testManager.runEditCommandTest(p)

</t>
<t tx="ekr.20061101121602.91">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.92">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.93">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.94">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.95">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.96">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.97">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.98">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.99">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061104172236.1"></t>
<t tx="ekr.20061104172236.2"># targetWord
e = c.editCommands
k = c.k
w = c.frame.body.wrapper
for val in (True,False):
    k.arg = 't' # 'targetWord'
    w.setInsertPoint(0)
    e.w = w
    e.oneLineFlag = val
    f = e.findWord1(event=None)
    i,j = w.getSelectionRange()
    assert i == 2, 'expected 2, got %s' % (i)
    # s = w.getAllText()
    # ch = s[i]
    # assert word == 'targetWord', 'got: %s' % word

</t>
<t tx="ekr.20061104172236.3"># TARGETWORD

w = c.frame.body.wrapper

for (which,result) in (('cap','Targetword'),('low','targetword'),('up','TARGETWORD')):
    w.setInsertPoint(5)
    c.editCommands.capitalizeHelper(event=None,which=which,undoType='X')
    s = w.getAllText()
    word = s[2:12]
    assert word == result, 'Expected %s, got: %s' % (result,repr(word))
    i = w.getInsertPoint()
    assert i == 5, 'Expected 5, got: %d' % i
</t>
<t tx="ekr.20061104172236.4">w = c.frame.body.wrapper
ec = c.editCommands

for spot,result in (('1.0',0),(5,5)):
    ec.setMoveCol(w,spot)
    assert ec.moveSpot == result
    assert ec.moveCol == result
</t>
<t tx="ekr.20061104172236.5">ec = c.editCommands ; w = c.frame.body.wrapper

for i,j,python in (
    # ('1.0','4.5',False),
    (5,50,True),
):
    extend = True
    ec.moveSpot = None # It's hard to init this properly.
    ec.extendHelper(w,extend,j)
    i2,j2 = w.getSelectionRange()
    #assert 0==i2, 'Expected i=%s, got %s' % (repr(i),repr(i2))
    #assert j==j2, 'Expected j=%s, got %s' % (repr(j),repr(j2))
</t>
<t tx="ekr.20061104172236.6">ec = c.editCommands ; w = c.frame.body.wrapper

for i,j,python in (
    #('1.0','4.5',False),
    (5,50,True),
):
    event = None ; extend = True ; ec.moveSpot = None
    w.setInsertPoint(i)
    ec.moveToHelper (event,j,extend)
    i2,j2 = w.getSelectionRange()
    assert i==i2, 'Expected %s, got %s' % (repr(i),repr(i2))
    assert j==j2, 'Expected %s, got %s' % (repr(j),repr(j2))
    w.setSelectionRange(0,0,insert=None)
</t>
<t tx="ekr.20061104172236.7">ec = c.editCommands
w = c.frame.body.wrapper

for direction in ('up','down'):
    for distance in ('line','page','half-page'):
        event = g.app.gui.create_key_event(c,w=w)
        ec.scrollHelper(event,direction,distance)
</t>
<t tx="ekr.20061110094226">ec = c.editCommands ; w = c.frame.body.wrapper

for i,result,direction in (('5.8','4.8','up'),('5.8','6.8','down')):
    event = None ; extend = False; ec.moveSpot = None
    w.setInsertPoint(i)
    ec.moveUpOrDownHelper (event,direction,extend)
    i2,j2 = w.getSelectionRange()
    if 1:
        break
    else:
        assert i==i2, 'Expected %s, got %s' % (repr(i),repr(i2))
        assert j==j2, 'Expected %s, got %s' % (repr(j),repr(j2))
        w.setSelectionRange(0,0,insert=None)
</t>
<t tx="ekr.20061128082002">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061128082002.1">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061128082002.2">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061128082002.3">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061128090021">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061128090021.1">line 1
line 2

line 4
</t>
<t tx="ekr.20061128090021.2">line 1
line 2
line 3
line 4
</t>
<t tx="ekr.20061128090021.3">line 1
line 2

line 4
</t>
<t tx="ekr.20061128090147">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061128090147.1">line 1
line 2
line 4
</t>
<t tx="ekr.20061128090147.2">line 1
line 2

line 4
</t>
<t tx="ekr.20061128090147.3">line 1
line 2
line 4
</t>
<t tx="ekr.20061128090338">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061128090338.1">line 1
line 2

</t>
<t tx="ekr.20061128090338.2">line 1
line 2
line 3
</t>
<t tx="ekr.20061128090338.3">line 1
line 2

</t>
<t tx="ekr.20070113145100"># Not part of cvs distributions, but needed for two unit tests.

dir = g.os_path_join(g.app.loadDir,'..','test','unittest',g.u('chinese\u8116folder'),encoding='utf-8')
s   = g.os_path_join(dir,g.u('chinese\u8116test.leo'),encoding='utf-8')
    
if not g.os_path_exists(dir):
    import os
    os.mkdir(dir)
    g.pr('created chinese folder')
    
if not g.os_path_exists(s):
    f = file(s,'w')
    f.close()
    g.pr('created chinese file')
    
</t>
<t tx="ekr.20070131162935">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20070131162935.1">first line
line 1
line a
        line b
line c
last line
</t>
<t tx="ekr.20070131162935.2">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20070131162935.3">first line
line 1
line a
        line b
line c
last line
</t>
<t tx="ekr.20070131172706">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20070131172706.1">This is the first sentence.  And
this is the last sentence.
</t>
<t tx="ekr.20070131172706.2">This is the first sentence.  This
is the second sentence.  And
this is the last sentence.
</t>
<t tx="ekr.20070131172706.3">This is the first sentence.  And
this is the last sentence.
</t>
<t tx="ekr.20070131173932">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20070131173932.1">This is the first sentence.  This
is the second sentence.
</t>
<t tx="ekr.20070131173932.2">This is the first sentence.  This
is the second sentence.  And
this is the last sentence.
</t>
<t tx="ekr.20070131173932.3">This is the first sentence.  This
is the second sentence.
</t>
<t tx="ekr.20070131175538.1"></t>
<t tx="ekr.20070131175646"></t>
<t tx="ekr.20070217065840">@nocolor-node

@
To make unit tests, do the following:
    
- Use the make-test script (Alt-5) to create a suboutline for a unit test.
- Put text in the before node, selected desired text, then do the do-before script (Alt-6).
- Execute the command, then do the do-after script (Alt-7).
</t>
<t tx="ekr.20070217065840.1">try:
    p1 = p.insertAfter()
    c.setHeadString(p1,'@test ')
    body = 'c.testManager.runEditCommandTest(c,p)'
    c.setBodyString(p1,body)
    for s in ('work','before','after'):
        p2 = p1.insertAsLastChild()
        c.setHeadString(p2,s)
    p1.expand()
finally:
    c.redraw()
    c.editPosition(p1)</t>
<t tx="ekr.20070217065840.2">@
p should be in tree whose root is a @test node containing 'work', 'before' and
'after' children. The work node should have body text. If all is as expected,
copy the body text the work node to the before node, and represent the selection
range of the work in the headline of the before node.
@c

@others

sel = getSel(c)
top,work,before,after = findNodes(p)
if top and work.b:

    c.setBodyString(before,work.b)
    c.setBodyString(after,'')
    putSelectionInHeadline(c,before,'before',sel)
    c.redraw()
else:
    g.es_print('do-before: not in a proper @test tree')</t>
<t tx="ekr.20070217065840.3">def getSel(c):
    
    w = c.frame.body.bodyCtrl
    i,j= w.getSelectionRange()
    if i == j:
        i = j = w.getInsertPoint()
        sel = (i,i)
    return i,j</t>
<t tx="ekr.20070217065840.4">def findNodes(p):
    
    '''Find the top, work, before and after nodes.
    p should be in tree whose root is a @test node containing
    'work', 'before' and 'after' children.'''
    
    for p in p.self_and_parents_iter():
        if p.h.startswith('@test '):
            break
    top    = p and p.copy()
    work   = top and top.firstChild() 
    before = work and work.next()     
    after  = before and before.next()
    if (
        work   and work.h.startswith('work') and
        before and before.h.startswith('before') and
        after  and after.h.startswith('after')
    ):
        return top,work,before,after
    else:
        return None,None,None,None</t>
<t tx="ekr.20070217065840.5">def putSelectionInHeadline (c,p,prefix,sel):
    
    # g.trace(p.h,repr(sel))

    w = c.frame.body.bodyCtrl
    i,j = sel
    i,j = w.toGuiIndex(i),w.toGuiIndex(j)
    s = '%s sel=%s,%s' % (prefix,i,j)
    c.setHeadString(p,s)
</t>
<t tx="ekr.20070217065840.6">@
p should be in tree whose root is a @test node containing 'work', 'before' and
'after' children. If all is as expected, copy the work node to the after node,
and represent the selection range of the work node in the headline of the after node.
@c

@others

sel = getSel(c)
top,work,before,after = findNodes(p)
if top:
    c.setBodyString(after,work.b)
    putSelectionInHeadline(c,after,'after',sel)
    c.redraw()
else:
    g.es_print('do-after: not in @test tree')</t>
<t tx="ekr.20070217065840.8">def findNodes(p):
    
    '''Find the top, work, before and after nodes.
    p should be in tree whose root is a @test node containing
    'work', 'before' and 'after' children.'''
    
    for p in p.self_and_parents_iter():
        if p.h.startswith('@test '):
            break
    top    = p and p.copy()
    work   = top and top.firstChild()
    before = work and work.next()
    after  = before and before.next()
    if (
        work   and work.h.startswith('work') and
        before and before.h.startswith('before') and
        after  and after.h.startswith('after')
    ):
        return top,work,before,after
    else:
        return None,None,None,None</t>
<t tx="ekr.20070217065840.9">def putSelectionInHeadline (c,p,prefix,sel):
    
    # g.trace(p.h,repr(sel))
    
    w = c.frame.body.bodyCtrl
    i,j = sel
    i,j = w.toGuiIndex(i),w.toGuiIndex(j)
    s = '%s sel=%s,%s' % (prefix,i,j)
    c.setHeadString(p,s)
</t>
<t tx="ekr.20070217071121.1">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20070217071121.10">before
aaabbb
aaabbb
aaabbb
aaabbb
after
</t>
<t tx="ekr.20070217071121.11">before
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
after
</t>
<t tx="ekr.20070217071121.12">before
aaabbb
aaabbb
aaabbb
aaabbb
after
</t>
<t tx="ekr.20070217071121.13">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20070217071121.14">before
aaa   xxxbbb
aaa   xxxbbb
aaa   xxxbbb
aaa   xxxbbb
after
</t>
<t tx="ekr.20070217071121.15">before
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
after
</t>
<t tx="ekr.20070217071121.16">before
aaa   xxxbbb
aaa   xxxbbb
aaa   xxxbbb
aaa   xxxbbb
after
</t>
<t tx="ekr.20070217071121.17">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20070217071121.18">before
aaabbb
aaabbb
aaabbb
aaabbb
after
</t>
<t tx="ekr.20070217071121.19">before
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
after
</t>
<t tx="ekr.20070217071121.2">before
aaa   bbb
aaa   bbb
aaa   bbb
aaa   bbb
after
</t>
<t tx="ekr.20070217071121.20">before
aaabbb
aaabbb
aaabbb
aaabbb
after
</t>
<t tx="ekr.20070217071121.21">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20070217071121.22">before
aaas...sbbb
aaas...sbbb
aaas...sbbb
aaas...sbbb
after
</t>
<t tx="ekr.20070217071121.23">before
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
after
</t>
<t tx="ekr.20070217071121.24">before
aaas...sbbb
aaas...sbbb
aaas...sbbb
aaas...sbbb
after
</t>
<t tx="ekr.20070217071121.25">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20070217071121.26">before
aaaY1Ybbb
aaaY2Ybbb
aaaY3Ybbb
aaaY4Ybbb
after
</t>
<t tx="ekr.20070217071121.27">before
aaaY1Ybbb
aaaY2Ybbb
aaaY3Ybbb
aaaY4Ybbb
after
</t>
<t tx="ekr.20070217071121.28">before
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
after
</t>
<t tx="ekr.20070217071121.3">before
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
after
</t>
<t tx="ekr.20070217071121.4">before
aaa   bbb
aaa   bbb
aaa   bbb
aaa   bbb
after
</t>
<t tx="ekr.20070217071121.5">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20070217071121.6">before
aaabbb
aaabbb
aaabbb
aaabbb
after
</t>
<t tx="ekr.20070217071121.7">before
aaa   bbb
aaa   bbb
aaa   bbb
aaa   bbb
after
</t>
<t tx="ekr.20070217071121.8">before
aaabbb
aaabbb
aaabbb
aaabbb
after
</t>
<t tx="ekr.20070217071121.9">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20070217072822">def getSel(c):
    
    w = c.frame.body.bodyCtrl
    i,j= w.getSelectionRange()
    if i == j:
        i = j = w.getInsertPoint()
        sel = (i,i)
    return i,j</t>
<t tx="ekr.20070305095401">p = c.p.copy()
c.selectPosition(p.threadBack())
p1 = c.p
c.goPrevVisitedNode()
p2 = c.p
c.goNextVisitedNode()
p3 = c.p
</t>
<t tx="ekr.20070306091949"># Print does not work: it is redirected.
g.pr('\nEnd of leoEditCommands tests.')
</t>
<t tx="ekr.20070315065720">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20070315065720.1">a

b
</t>
<t tx="ekr.20070315065720.2">a

b
</t>
<t tx="ekr.20070315065720.3">a

b
</t>
<t tx="ekr.20070315065849">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20070315065849.1">a

b
</t>
<t tx="ekr.20070315065849.2">a

b
</t>
<t tx="ekr.20070315065849.3">a

b
</t>
<t tx="ekr.20070417092935"></t>
<t tx="ekr.20070503064257"></t>
<t tx="ekr.20070528100318"># Required to make a typing test work.
</t>
<t tx="ekr.20071007120750.3">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20071007120750.5">c.editCommands.ccolumn = 4 # Set the comment column
c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20071007120750.6"># xxxx.yyyy

s = p.b
w = c.frame.body.wrapper
w.setSelectionRange(2,11)
c.editCommands.setFillPrefix(event=None)
prefix = c.editCommands.fillPrefix
assert prefix == 'xxxx.yyyy',repr(prefix)
</t>
<t tx="ekr.20071007120947">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20071007120947.6">first line
last lin
</t>
<t tx="ekr.20071007120947.7">first line
last line
</t>
<t tx="ekr.20071007120947.8">first line
last lin
</t>
<t tx="ekr.20071007121115.1">first line
line 1
last line
</t>
<t tx="ekr.20071007121115.2">first line
    line 1
last line
</t>
<t tx="ekr.20071007121115.3">first line
line 1
last line
</t>
<t tx="ekr.20071007121312.5">first line
    line b
last line
</t>
<t tx="ekr.20071007121312.6">first line
line b
last line
</t>
<t tx="ekr.20071007121312.7">first line
    line b
last line
</t>
<t tx="ekr.20071007121529">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20071007121529.1">firstline
last line
</t>
<t tx="ekr.20071007121529.2">first line
last line
</t>
<t tx="ekr.20071007121529.3">firstline
last line
</t>
<t tx="ekr.20071113081247">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20071113081247.1">z
x
e
d
a
</t>
<t tx="ekr.20071113081247.10">x
z
A
c
B
</t>
<t tx="ekr.20071113081247.11">A
B
c
x
z
</t>
<t tx="ekr.20071113081247.2">a
d
e
z
x
</t>
<t tx="ekr.20071113081247.3">z
x
e
d
a
</t>
<t tx="ekr.20071113081247.8">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20071113081247.9">A
B
c
x
z
</t>
<t tx="ekr.20071113082531">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20071113082531.1">z
Y
X
c
b
A
</t>
<t tx="ekr.20071113082531.2">c
A
z
X
Y
b
</t>
<t tx="ekr.20071113082531.3">z
Y
X
c
b
A
</t>
<t tx="ekr.20071113140035">fn = g.os_path_abspath(g.os_path_join(g.app.loadDir,'..','core','leoPy.leo'))
assert g.os_path_exists(fn),fn
c1 = c
c2 = g.openWithFileName(fn,old_c=None,enableLog=False)
assert c2
c.frame.bringToFront()
g.app.setLog(c.frame.log)

d1 = {} ; d2 = {}
for c,d in ( (c1,d1),(c2,d2)):
    for p in c.all_unique_positions():
        if p.h.startswith('@test'):
            d[p.h]=p.h

if 0: # not important
    g.pr()
    g.pr('----- Only in unitTest.leo')
    for h in sorted(d1.keys()):
        if not d2.get(h):
            print(h)

print('\n----- Only in leoPy.leo')
for h in sorted(d2.keys()):
    if not d1.get(h):
        print(h)</t>
<t tx="ekr.20071113145804.15">vr = c.helpCommands.helpForMinibuffer()
if not vr:
    self.skipTest('no vr plugin')
</t>
<t tx="ekr.20071113145804.16">vr = c.helpCommands.helpForBindings()
if not vr:
    self.skipTest('no vr plugin')
</t>
<t tx="ekr.20071113145804.17">vr = c.helpCommands.helpForFindCommands()
if not vr:
    self.skipTest('no vr plugin')
</t>
<t tx="ekr.20071113145804.4">@first # -*- coding: utf-8 -*-
@language python

try:
    ec = c.editCommands ; w = c.frame.body.wrapper
    s = w.getAllText()

    # This strings tests unicode, paren matching, and auto-indentation.
    u = '(a\u00c9\u03a9B\u3045\u4e7cz):\n' # '(aÉ©BE|cz):\n'
    u = '(pdq):\n'
    w.setInsertPoint(len(s))
    for char in u:
        binding = 'Return' if char == '\n' else char
        event = g.app.gui.create_key_event(c,char=char,binding=binding,w=w)
        ec.selfInsertCommand(event)
    result = w.getAllText()
    assert result.endswith('    '),'result:\n%s' % result
    # Test of autocompleter.
finally:
    if 1:
        w.setAllText(s)
        p.setBodyString(s)
        # g.trace(repr(s))
        c.recolor()

# end:
</t>
<t tx="ekr.20071113145804.5">@language python
@tabwidth -4

try:
    ec = c.editCommands ; w = c.frame.body.wrapper
    s = w.getAllText()
    w.setSelectionRange(len(s)-9,len(s)-6)
    event = g.app.gui.create_key_event(c, binding='Tab', char='\t', w=w)
    ec.selfInsertCommand(event)
    result = w.getAllText()
    assert result.endswith('\n    ###abcdef\n'),'result\n%s' % (repr(result))
finally:
    w.setAllText(s)
    p.setBodyString(s)
    c.recolor_now()
    
###abcdef
</t>
<t tx="ekr.20071113192611"></t>
<t tx="ekr.20080324133327.2">True: allow linux-like pastes using a mouse's middle button.

Important: this may cause crashes on some platforms.
</t>
<t tx="ekr.20080408094623.1"># start
# targetWord

e = c.editCommands
k = c.k
w = c.frame.body.wrapper
w.setInsertPoint(0)
k.arg = 't' # 'targetWord'
e.w = w
e.oneLineFlag = False
e.findWord1(event=None)
i,j = w.getSelectionRange()
assert i == 10, 'expected 10, got %s' % (i)
</t>
<t tx="ekr.20081111084046.2"></t>
<t tx="ekr.20081215084144.10">This is the first sentence.  This
is the  sentence.  And
this is the last sentence.
</t>
<t tx="ekr.20081215084144.2">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20081215084144.3">This is the first sentence.  This
is the second sentence.  And
this  the last sentence.
</t>
<t tx="ekr.20081215084144.4">This is the first sentence.  This
is the second sentence.  And
this is the last sentence.
</t>
<t tx="ekr.20081215084144.5">This is the first sentence.  This
is the second sentence.  And
this  the last sentence.
</t>
<t tx="ekr.20081215084144.7">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20081215084144.8">This is the first sentence.  This
is the  sentence.  And
this is the last sentence.
</t>
<t tx="ekr.20081215084144.9">This is the first sentence.  This
is the second sentence.  And
this is the last sentence.
</t>
<t tx="ekr.20090427104851.10">if a:
    b = 'xyz'
</t>
<t tx="ekr.20090427104851.11">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20090427104851.12">if a:
    b = 'xyz'
</t>
<t tx="ekr.20090427104851.13">if a:
    b = 'xyz'
</t>
<t tx="ekr.20090427104851.14">if a:
    b = 'xyz'
</t>
<t tx="ekr.20090427104851.15">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20090427104851.16">if a:
    b = 'xyz'
</t>
<t tx="ekr.20090427104851.17">if a:
    b = 'xyz'
</t>
<t tx="ekr.20090427104851.18">if a:
    b = 'xyz'
</t>
<t tx="ekr.20090427104851.7">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20090427104851.8">if a:
    b = 'xyz'
</t>
<t tx="ekr.20090427104851.9">if a:
    b = 'xyz'
</t>
<t tx="ekr.20091206090247.5060"># Use these with caution.</t>
<t tx="ekr.20091206090247.5061">count = 0
for p in c.all_unique_positions():
    count += 1
    # Empty tnodeLists are not errors because they never get written to the .leo file.
    v = p.v
    if hasattr(v,"tnodeList") and len(v.tnodeList) &gt; 0 and not v.isAnyAtFileNode():
        g.es("deleting tnodeList for " + `v`,color="blue")
        delattr(v,"tnodeList")
        ### c.setChanged(True)
        c.setChanged()

s = "%d nodes" % count
print(s) ; g.es(s)</t>
<t tx="ekr.20091206090247.5062"># About the only time you should run this script is when:
# - changing the format of timestamps in nodeIndices.setTimestamp or
# - when making a retroactive change to leoID.txt.

if 0: # This is usually a very bad idea.

    for p in c.all_positions():
        p.v.fileIndex = None

    g.es("all timestamps cleared")</t>
<t tx="ekr.20091206090247.5063">doDelete = False
put = g.es_print
for p in c.all_positions():
    if p.v.u:
        put("found v.u:",p.h,
            g.listToString(p.v.u.keys()))
        if doDelete:
            p.v.u = None
put('done') 
c.redraw()</t>
<t tx="ekr.20100102164959.5088">nodes = 0 ; lines = 0
for p in c.all_unique_positions():
    nodes += 1
    lines += len(g.splitLines(p.b))

pages = ((nodes * 10) + lines) / 50
s = "%d nodes,  %d lines, %d pages" % (nodes,lines,pages)
print(s); g.es(s)</t>
<t tx="ekr.20100119102849.5108"># backward-find-character and find-character
# can't be tested this way because they require k.getarg.
# They pass hand tests.

&lt;&lt; define table &gt;&gt;

w = c.frame.body.wrapper
child = g.findNodeInChildren(c,p,'work')
assert child
c.selectPosition(child)

for commandName in table:
    # Put the cursor in the middle of the middle line
    # so all cursor moves will actually do something.
    w.setInsertPoint(15) # for move-past-close
    try:
        c.editCommands.extendMode = True
        c.keyHandler.simulateCommand(commandName)
        i,j = w.getSelectionRange()
        assert i != j,'i == j: %s %s' % (i,commandName)
    finally:
        c.editCommands.extendMode = False

</t>
<t tx="ekr.20100119102849.5109"># Cursor movement commands affected by extend mode.
# The x-extend-selection commands are not so affected.
table = (
    'back-to-indentation',
    'back-to-home',
    'back-char',
    'back-page',
    'back-paragraph',
    'back-sentence',
    'back-word',
    'beginning-of-buffer',
    'beginning-of-line',
    'end-of-buffer',
    'end-of-line',
    'forward-char',
    'forward-page',
    'forward-paragraph',
    'forward-sentence',
    'forward-end-word',
    'forward-word',
    'move-past-close',
    'next-line',
    'previous-line',
)
</t>
<t tx="ekr.20100119102849.5110">line 1.
line 2(xxx).
line 3.
</t>
<t tx="ekr.20100123172713.5114"></t>
<t tx="ekr.20100123172713.5116">count = 0
for p in c.all_unique_positions():
    count += 1
    # Empty tnodeLists are not errors because they never get written to the .leo file.
    v = p.v
    if hasattr(v,"tnodeList"): # and len(v.tnodeList) &gt; 0 and not v.isAnyAtFileNode():
        g.es("deleting tnodeList for " + `v`,color="blue")
        delattr(v,"tnodeList")
        ### c.setChanged(True)
        c.setChanged()

s = "%d nodes" % count
print s ; g.es(s)</t>
<t tx="ekr.20100131171342.5473"></t>
<t tx="ekr.20100131171342.5474">if g.app.gui.guiName() == 'tkinter':

    pc = g.app.pluginsController
    tkGui = pc.loadOnePlugin('leo.plugins.tkGui',verbose=False)
    assert(tkGui)

    import leo.core.leoFrame as leoFrame
    import inspect,sys

    baseClass = leoFrame.leoBody
    subClasses  = (tkGui.leoTkinterBody,leoFrame.nullBody)
    baseObject = c.frame.body

    methods = inspect.getmembers(baseClass,inspect.ismethod)
    methodNames = [z[0] for z in methods]

    for name in baseObject.mustBeDefinedOnlyInBaseClass:
        try:
            assert name in methodNames, 'not defined in base class %s.%s' % (baseClass.__name__,name)
        except AssertionError:
            exctype, value = sys.exc_info()[:2]
            print(value)
            raise

    for subClass in subClasses:
        subclassName = subClass.__name__
        for name in methodNames:
            base_func = getattr(baseClass,name)
            sub_func =  getattr(subClass,name)
            try:
                if name in baseObject.mustBeDefinedOnlyInBaseClass:
                    assert base_func.im_func == sub_func.im_func, 'defined in subclass %s.%s' % (subclassName,name)
                if name in baseObject.mustBeDefinedInSubclasses:
                    assert base_func.im_func != sub_func.im_func, 'not defined in subclass %s.%s' % (subclassName,name)
            except AssertionError:
                #raise
                exctype, value = sys.exc_info()[:2]
                print(value)
</t>
<t tx="ekr.20100131171342.5475">if g.app.gui.guiName() == 'tkinter':

    pc = g.app.pluginsController
    tkGui = pc.loadOnePlugin('leo.plugins.tkGui',verbose=False)

    import leo.core.leoFrame as leoFrame
    import inspect

    baseClass = leoFrame.leoFrame
    subClasses  = (tkGui.leoTkinterFrame,leoFrame.NullFrame)
    baseObject = c.frame

    methods = inspect.getmembers(baseClass,inspect.ismethod)
    methodNames = [z[0] for z in methods]

    for name in baseObject.mustBeDefinedOnlyInBaseClass:
        assert name in methodNames, 'not defined in base class %s.%s' % (baseClass.__name__,name)

    for subClass in subClasses:
        subclassName = subClass.__name__
        for name in methodNames:
            base_func = getattr(baseClass,name)
            sub_func =  getattr(subClass,name)
            if name in baseObject.mustBeDefinedOnlyInBaseClass:
                assert base_func.im_func == sub_func.im_func, 'defined in subclass %s.%s' % (subclassName,name)
            if name in baseObject.mustBeDefinedInSubclasses:
                assert base_func.im_func != sub_func.im_func, 'not defined in subclass %s.%s' % (subclassName,name)
</t>
<t tx="ekr.20100131171342.5476">if g.app.gui.guiName() == 'tkinter':

    pc = g.app.pluginsController
    tkGui = pc.loadOnePlugin('leo.plugins.tkGui',verbose=False)

    import leo.core.leoGui as leoGui
    import inspect

    baseClass = leoGui.leoGui
    subClasses  = (tkGui.tkinterGui,) # nullGui can inherit almost all leoGui dummy methods.
    baseObject = g.app.gui

    methods = inspect.getmembers(baseClass,inspect.ismethod)
    methodNames = [z[0] for z in methods]

    for name in baseObject.mustBeDefinedOnlyInBaseClass:
        assert name in methodNames, 'not defined in base class %s.%s' % (baseClass.__name__,name)

    for subClass in subClasses:
        subclassName = subClass.__name__
        for name in methodNames:
            base_func = getattr(baseClass,name)
            sub_func =  getattr(subClass,name)
            try:
                if name in baseObject.mustBeDefinedOnlyInBaseClass:
                    assert base_func.im_func == sub_func.im_func, 'defined in subclass %s.%s' % (subclassName,name)
                if name in baseObject.mustBeDefinedInSubclasses:
                    assert base_func.im_func != sub_func.im_func, 'not defined in subclass %s.%s' % (subclassName,name)
            except AssertionError:
                raise
</t>
<t tx="ekr.20100131171342.5477">if g.app.gui.guiName() == 'tkinter':

    pc = g.app.pluginsController
    tkGui = pc.loadOnePlugin('leo.plugins.tkGui',verbose=False)

    import leo.core.leoFrame as leoFrame
    import inspect

    baseClass = leoFrame.leoTree
    subClasses  = (tkGui.leoTkinterTree,leoFrame.nullTree)
    baseObject = c.frame.tree

    methods = inspect.getmembers(baseClass,inspect.ismethod)
    methodNames = [z[0] for z in methods]

    for name in baseObject.mustBeDefinedOnlyInBaseClass:
        assert name in methodNames, 'not defined in base class %s.%s' % (baseClass.__name__,name)

    for subClass in subClasses:
        subclassName = subClass.__name__
        for name in methodNames:
            base_func = getattr(baseClass,name)
            sub_func =  getattr(subClass,name)
            if name in baseObject.mustBeDefinedOnlyInBaseClass:
                assert base_func.im_func == sub_func.im_func, 'defined in subclass %s.%s' % (subclassName,name)
            if name in baseObject.mustBeDefinedInSubclasses:
                assert base_func.im_func != sub_func.im_func, 'not defined in subclass %s.%s' % (subclassName,name)
</t>
<t tx="ekr.20100131171342.5478">logCtrl = c.frame.log.logCtrl

table = (
    ('mustBeDefinedInSubclasses',logCtrl.mustBeDefinedInSubclasses),
    ('mustBeDefinedInBaseClass',logCtrl.mustBeDefinedOnlyInBaseClass),
    ('mustBeDefined',logCtrl.mustBeDefined),
)

# Check existence.
for tag,aList in table:
    for z in aList:
        assert hasattr(c.frame.log,z),'%s %s %s' % (tag,c.frame.log,z)
        assert hasattr(c.frame.body,z),'%s %s %s' % (tag,c.frame.body,z)

# Check signatures.
import inspect
for tag,aList in table:
    for z in aList:
        func = getattr(c.frame.body.bodyCtrl,z)
        func2 = getattr(c.frame.log.logCtrl,z)
        assert func,z
        assert func2,z
        d1 = inspect.getargspec(func)
        d2 = inspect.getargspec(func2)
        assert d1==d2,'\n%s\n\nd1 %s\n\nd2 %s' % (z,d1,d2)
</t>
<t tx="ekr.20100131180007.5453"># A totally wimpy test.
# And it somehow prints a newline to the console.
if 0:
    c.abbrevCommands.dynamicExpandHelper(event=None,prefix='',aList=[],w=None)
</t>
<t tx="ekr.20100204165850.5371"># These tests will be important when revising config code.
</t>
<t tx="ekr.20100204165850.5373">if g.app.inBridge:
    self.skipTest('in bridge')
k = c.k
colorizer = c.frame.body.getColorizer()
ed = c.editCommands
# These don't set ivars
    # 'toggle-active-pane'),
    # 'toggle-angle-brackets',
    # 'toggle-input-state'),
    # 'toggle-mini-buffer'),
    # 'toggle-split-direction'),
table = [
    (k,'abbrevOn','toggle-abbrev-mode'),
    (ed,'extendMode','toggle-extend-mode'),
]
# Not valid for external tests.
table2 = [
    (k,'enable_autocompleter','toggle-autocompleter'),
    (k,'enable_calltips','toggle-calltips'),
    (c,'sparse_find','toggle-find-collapses-nodes'),
    (colorizer,'showInvisibles','toggle-invisibles'),
    (c,'sparse_move','toggle-sparse-move'),
]
if not g.app.isExternalUnitTest:
    table.extend(table2)
for obj,ivar,command in table:
    val1 = getattr(obj,ivar)
    try:
        k.simulateCommand(command)
        val2 = getattr(obj,ivar)
        assert val2 == (not val1),'failed 1 %s' % command
        k.simulateCommand(command)
        val3 = getattr(obj,ivar)
        assert val3 == val1,'failed 2 %s' % command
    finally:
        setattr(obj,ivar,val1)
</t>
<t tx="ekr.20100212104817.5346">c.sortRecentFiles()
</t>
<t tx="ekr.20100212104817.5347">child = p.firstChild()
assert child.h == 'b','fail 1'
try:
    c.selectPosition(child)
    c.sortSiblings()
    c.redraw_now()
    child = p.firstChild()
    assert child.h == 'a'
    child = child.next()
    assert child.h == 'b'
    child = child.next()
    assert child.h == 'c'
    assert not child.next()
finally:
    c.undoer.undo()
    p.contract()
    c.redraw(p)
</t>
<t tx="ekr.20100212104817.5348"></t>
<t tx="ekr.20100212104817.5349"></t>
<t tx="ekr.20100212104817.5350"></t>
<t tx="ekr.20100212104817.5351">result = c.helpCommands.getBindingsForCommand('help')
if not result:
    self.skipTest('no settings')
assert result.strip().lower()=='f1', repr(result)
</t>
<t tx="ekr.20100817131738.5886">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20100817131738.5887">aaaa cccc dddd
</t>
<t tx="ekr.20100817131738.5888">aaaa bbbb cccc dddd
</t>
<t tx="ekr.20100817131738.5889">aaaa cccc dddd
</t>
<t tx="ekr.20100817131738.5894">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20100817131738.5895">aaaa bbcc dddd
</t>
<t tx="ekr.20100817131738.5896">aaaa bbbb cccc dddd
</t>
<t tx="ekr.20100817131738.5897">aaaa bbcc dddd
</t>
<t tx="ekr.20100902074747.5970">f = c.abbrevCommands.addAbbrevHelper
d = c.abbrevCommands.abbrevs

# New in Leo 4.10: whitespace (blank,tab,newline) *is* significant in definitions.
table = (
    ('ut1','ut1=aa','aa'),
    # ('ut2','ut2 =bb','bb'),
    ('ut3','ut3=cc=dd','cc=dd'),
    ('ut4','ut4= ee',' ee'),
    ('ut5','ut5= ff = gg',' ff = gg'),
    ('ut6','ut6= hh==ii',' hh==ii'),
    ('ut7','ut7=j=k','j=k'),
    ('ut8','ut8=l==m','l==m'),
    ('@ut1','@ut1=@a','@a'),
)

for name,s,expected in table:
    for s2,kind in ((s,'(no nl)'),(s+'\n','(nl)')):
        f(s2,tag='unit-test')
        result,tag = d.get(name,(None,None),)
        assert result==expected, '%s &lt;%s&gt; expected &lt;%s&gt;, got &lt;%s&gt;' % (
            kind,s,expected,result)
</t>
<t tx="ekr.20101220161557.6016"># Nov. 2016: 878 tests.
# Nov. 2017: 916 tests, 25 skipped.
# Dec. 2019: 938 tests, 16 skipped.
# Aug. 2021: 909 tests, 15 skipped. 144 traditional tests.
</t>
<t tx="ekr.20110118082508.3729"></t>
<t tx="ekr.20110118082508.3730"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20110118082508.3745">Honor this line that has a hanging
  indentation, please. Hanging
  indentation is valuable for lists of
  all kinds. But it is tricky to get
  right.

Next paragraph.
</t>
<t tx="ekr.20110118082508.3746">Honor this line that has a hanging indentation, please.  Hanging
  indentation is valuable for lists of all kinds.  But it is tricky to get right.

Next paragraph.
</t>
<t tx="ekr.20110118082508.3747">Honor this line that has a hanging
  indentation, please. Hanging
  indentation is valuable for lists of
  all kinds. But it is tricky to get
  right.

Next paragraph.
</t>
<t tx="ekr.20110118082508.3748"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20110118082508.3754">Honor this line that has a hanging
  indentation, please. Hanging
  indentation is valuable for lists of
  all kinds. But it is tricky to get
  right.

Next paragraph.
</t>
<t tx="ekr.20110118082508.3755">Honor this line that has
  a hanging indentation, please.  Hanging
    indentation is valuable for lists of all kinds.  But it is tricky to get right.

Next paragraph.
</t>
<t tx="ekr.20110118082508.3756">Honor this line that has a hanging
  indentation, please. Hanging
  indentation is valuable for lists of
  all kinds. But it is tricky to get
  right.

Next paragraph.
</t>
<t tx="ekr.20110118082508.3757"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20110118082508.3763">Honor this line that has a hanging
  indentation, please. Hanging
  indentation is valuable for lists of
  all kinds. But it is tricky to get
  right.

Next Paragraph.
</t>
<t tx="ekr.20110118082508.3764">Honor this line that 
  has a hanging indentation, 
  please.  Hanging
   indentation is valuable
    for lists of all kinds.  But 
    it is tricky to get right.

Next Paragraph.
</t>
<t tx="ekr.20110118082508.3765">Honor this line that has a hanging
  indentation, please. Hanging
  indentation is valuable for lists of
  all kinds. But it is tricky to get
  right.

Next Paragraph.
</t>
<t tx="ekr.20110118082508.3766"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20110118082508.3772">Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3773">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3779"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20110118082508.3780">Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.

Some 90% of all presidentially declared
disasters are weather related, leading
to around 500 deaths per year and nearly
$14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK,
helps arm America's communities with the
communication and safety skills needed
to save lives and property– before and
during the event. StormReady helps
community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3781">Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3782">Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.

Some 90% of all presidentially declared
disasters are weather related, leading
to around 500 deaths per year and nearly
$14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK,
helps arm America's communities with the
communication and safety skills needed
to save lives and property– before and
during the event. StormReady helps
community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3787"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20110118082508.3788">Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.

Some 90% of all presidentially declared
disasters are weather related, leading
to around 500 deaths per year and nearly
$14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK,
helps arm America's communities with the
communication and safety skills needed
to save lives and property– before and
during the event. StormReady helps
community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better
prepared to save lives from the
onslaught of severe weather through
better planning, education, and
awareness. No community is storm proof,
but StormReady can help communities save
lives. Does StormReady make a
difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3789">Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.

Some 90% of all presidentially declared
disasters are weather related, leading
to around 500 deaths per year and nearly
$14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK,
helps arm America's communities with the
communication and safety skills needed
to save lives and property– before and
during the event. StormReady helps
community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3790">Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.

Some 90% of all presidentially declared
disasters are weather related, leading
to around 500 deaths per year and nearly
$14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK,
helps arm America's communities with the
communication and safety skills needed
to save lives and property– before and
during the event. StormReady helps
community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better
prepared to save lives from the
onslaught of severe weather through
better planning, education, and
awareness. No community is storm proof,
but StormReady can help communities save
lives. Does StormReady make a
difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3792">Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3793"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20110118082508.3799">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item 
     number 1.  It is the first item in the list.

  2. This is item 
     number 2.  It is the second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3800">This paragraph leads of this test.  It is the "lead"
paragraph.

  1. This is item 
     number 1.  It is the first item in the list.

  2. This is item 
     number 2.  It is the second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3803">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item 
     number 1.  It is the first item in the list.

  2. This is item 
     number 2.  It is the second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3808"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20110118082508.3809">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item 
     number 2.  It is the second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3810">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item 
     number 2.  It is the second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3811">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item 
     number 2.  It is the second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3816"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20110118082508.3817">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3818">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item 
     number 2.  It is the second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3819">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3824"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20110118082508.3825">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item number 3. It is the
     third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3826">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3832"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20110118082508.3833">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item number 3. It is the
     third item in the list.

This paragraph ends the test. It is the
"final" paragraph.
</t>
<t tx="ekr.20110118082508.3834">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item number 3. It is the
     third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3835">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item number 3. It is the
     third item in the list.

This paragraph ends the test. It is the
"final" paragraph.
</t>
<t tx="ekr.20110521073115.3494"></t>
<t tx="ekr.20110521073115.3495">builtins, including cython builtins
</t>
<t tx="ekr.20110521073115.3496">cython keywords
</t>
<t tx="ekr.20111006064419.3491">if g.app.isExternalUnitTest:
    self.skipTest('Can not be run externally')
else:

    exec(g.findTestScript(c,'@common x-marked-nodes test code'))
    
    def test(p):
        setup_test(p)
        c.deleteMarked()
        n = p.numberOfChildren()
        assert n == 2 ,'delete: children: %s' % (n)
        c.undoer.undo()
        n = p.numberOfChildren()
        assert n == 4,'undo: children: %s' % (n)
        c.undoer.redo()
        n = p.numberOfChildren()
        assert n == 2 ,'delete: children: %s' % (n)
    try:
        test(p)
    finally:
        tear_down(p)
</t>
<t tx="ekr.20111006105711.3544">if g.app.isExternalUnitTest:
    self.skipTest('Can not be run externally')
else:

    exec(g.findTestScript(c,'@common x-marked-nodes test code'))
    
    def test(p):
        target = p.copy()
        setup_test(p)
        c.cloneMarked()
        h = 'Clones of marked nodes'
        assert c.p.h == h,c.p.h
        c.undoer.undo()
        assert not g.findNodeAnywhere(c,h)
        c.undoer.redo()
        assert c.p.h == h, c.p.h
    try:
        test(p)
    finally:
        tear_down(p,'Clones of marked nodes')
</t>
<t tx="ekr.20111026111009.3972"># lowercase xml tags, one per line.

html
body
head
div
table
nodeA
nodeB
</t>
<t tx="ekr.20111104171708.3847">import leo.core.leoBeautify as leoBeautify
import leo.commands.convertCommands as convertCommands
cpp = leoBeautify.CPrettyPrinter(c)
# c2p = convertCommands.C_To_Python(c)
fn = 'c tokenize test'
p2 = g.findNodeInTree(c,p,fn)
assert p2,'not found: %s' % (fn)
aList = cpp.tokenize(p2.b)
assert aList
# c2p.convertCodeList(aList)
# s = ''.join(aList)
</t>
<t tx="ekr.20111104171708.3848">@language c

static exit_values_ty indent_main_loop(void)
{
    codes_ty         hd_type         = code_eof;
    char           * t_ptr           = NULL;
    codes_ty         type_code       = start_token;
    exit_values_ty   file_exit_value = total_success;
    int              dec_ind         = 0; /* current indentation for declarations */

    BOOLEAN          scase           = false; /* true when we've just see a "case";
                                               * determines what to do with the
                                               * following colon */
    BOOLEAN          flushed_nl;              /* Used when buffering up comments to remember that
                                               * a newline was passed over */
    BOOLEAN          sp_sw           = false; /* true when in the expression part of if(...),
                                               * while(...), etc. */
    BOOLEAN          force_nl        = false;

    /* last_token_ends_sp: True if we have just encountered the end of an if (...),
     * etc. (i.e. the ')' of the if (...) was the last token).  The variable is
     * set to 2 in the middle of the main token reading loop and is decremented
     * at the beginning of the loop, so it will reach zero when the second token
     * after the ')' is read.
     */

    BOOLEAN          last_token_ends_sp = false;

    BOOLEAN          last_else = false; /* true if last keyword was an else */

    for (;;)
    {
        /* this is the main loop.  it will go until
         * we reach eof */

        BOOLEAN is_procname_definition;
        bb_code_ty can_break;

        if (type_code != newline)
        {
            can_break = parser_state_tos-&gt;can_break;
        }

        parser_state_tos-&gt;last_saw_nl = false;
        parser_state_tos-&gt;can_break = bb_none;

        type_code = lexi ();    /* lexi reads one token.  "token" points to
                                 * the actual characters. lexi returns a code
                                 * indicating the type of token */

        /* If the last time around we output an identifier or
         * a paren, then consider breaking the line here if it's
         * too long.
         *
         * A similar check is performed at the end of the loop, after
         * we've put the token on the line. */

        if ((settings.max_col &gt; 0) &amp;&amp;
            (buf_break != NULL) &amp;&amp;
            ( ( (parser_state_tos-&gt;last_token == ident) &amp;&amp;
                (type_code != comma) &amp;&amp;
                (type_code != semicolon) &amp;&amp;
                (type_code != newline) &amp;&amp;
                (type_code != form_feed) &amp;&amp;
                (type_code != rparen) &amp;&amp;
                (type_code != struct_delim)) ||
              ( (parser_state_tos-&gt;last_token == rparen) &amp;&amp;
                (type_code != comma) &amp;&amp;
                (type_code != rparen) ) ) &amp;&amp;
            (output_line_length () &gt; settings.max_col))
        {
            break_line = 1;
        }

        if (last_token_ends_sp &gt; 0)
        {
            last_token_ends_sp--;
        }

        is_procname_definition =
                (((parser_state_tos-&gt;procname[0] != '\0') &amp;&amp;
                  parser_state_tos-&gt;in_parameter_declaration) ||
                 (parser_state_tos-&gt;classname[0] != '\0'));

        /* The following code moves everything following an if (), while (),
         * else, etc. up to the start of the following stmt to a buffer. This
         * allows proper handling of both kinds of brace placement.
         */

        flushed_nl = false;

        if (!search_brace(&amp;type_code, &amp;force_nl, &amp;flushed_nl, &amp;last_else, &amp;is_procname_definition))
        {
            /* Hit EOF unexpectedly in comment. */
            return indent_punt;
        }
        
        if (type_code == code_eof)
        {
            /* we got eof */
            if (s_lab != e_lab || s_code != e_code || s_com != e_com)   /* must dump end of line */
            {
                dump_line(true, &amp;paren_target);
            }

            if (parser_state_tos-&gt;tos &gt; 1)      /* check for balanced braces */
            {
                ERROR (_("Unexpected end of file"), 0, 0);
                file_exit_value = indent_error;
            }

            if (settings.verbose)
            {
                printf (_("There were %d non-blank output lines and %d comments\n"),
                        (int) out_lines, (int) com_lines);
                if (com_lines &gt; 0 &amp;&amp; code_lines &gt; 0)
                {
                    printf (_("(Lines with comments)/(Lines with code): %6.3f\n"),
                            (1.0 * com_lines) / code_lines);
                }
            }
            flush_output ();

            return file_exit_value;                                              /* RETURN */
        }

        if ((type_code != comment) &amp;&amp;
            (type_code != cplus_comment) &amp;&amp;
            (type_code != newline) &amp;&amp;
            (type_code != preesc) &amp;&amp;
            (type_code != form_feed))
        {
            if (force_nl &amp;&amp;
                (type_code != semicolon) &amp;&amp;
                ( (type_code != lbrace) ||
                  (!parser_state_tos-&gt;in_decl &amp;&amp; !settings.btype_2) ||
                  (parser_state_tos-&gt;in_decl &amp;&amp; !settings.braces_on_struct_decl_line) ||
                  (parser_state_tos-&gt;last_token == rbrace)))
            {
                if (settings.verbose &amp;&amp; !flushed_nl)
                {
                    WARNING (_("Line broken 2"), 0, 0);
                }

                flushed_nl = false;
                dump_line(true, &amp;paren_target);
                parser_state_tos-&gt;want_blank = false;
                force_nl = false;
            }

            parser_state_tos-&gt;in_stmt = true;   /* turn on flag which causes
                                                 * an extra level of
                                                 * indentation. this is
                                                 * turned off by a ; or } */
            if (s_com != e_com)
            {
                /* the code has an embedded comment in the
                 * line. Move it from the com buffer to the
                 * code buffer.
                 *
                 * Do not add a space before the comment if it is the first
                 * thing on the line.
                 */

                if (e_code != s_code)
                {
                    set_buf_break (bb_embedded_comment_start, paren_target);
                    *e_code++ = ' ';
                    embedded_comment_on_line = 2;
                }
                else
                {
                    embedded_comment_on_line = 1;
                }

                for (t_ptr = s_com; *t_ptr; ++t_ptr)
                {
                    check_code_size();
                    *e_code++ = *t_ptr;
                }

                set_buf_break (bb_embedded_comment_end, paren_target);
                *e_code++ = ' ';
                *e_code = '\0'; /* null terminate code sect */
                parser_state_tos-&gt;want_blank = false;
                e_com = s_com;
            }
        }
        else if ((type_code != comment) &amp;&amp;
                 (type_code != cplus_comment) &amp;&amp;
                 !(settings.break_function_decl_args &amp;&amp;
                   (parser_state_tos-&gt;last_token == comma)) &amp;&amp;
                 !( (parser_state_tos-&gt;last_token == comma) &amp;&amp;
                    !settings.leave_comma))
        {
            /* preserve force_nl thru a comment but
             * cancel forced newline after newline, form feed, etc.
             * however, don't cancel if last thing seen was comma-newline
             * and -bc flag is on. */

            force_nl = false;
        }

        /* Main switch on type of token scanned */

        check_code_size();
        
        /* now, decide what to do with the token */

        handle_the_token(type_code, &amp;scase, &amp;force_nl, &amp;sp_sw, &amp;flushed_nl,
                         &amp;hd_type, &amp;dec_ind, &amp;last_token_ends_sp, &amp;file_exit_value,
                         can_break, &amp;last_else, is_procname_definition);
        
        *e_code = '\0';         /* make sure code section is null terminated */

        if ((type_code != comment) &amp;&amp;
            (type_code != cplus_comment) &amp;&amp;
            (type_code != newline) &amp;&amp;
            (type_code != preesc) &amp;&amp;
            (type_code != form_feed))
        {
            parser_state_tos-&gt;last_token = type_code;
        }

        /* Now that we've put the token on the line (in most cases),
         * consider breaking the line because it's too long.
         *
         * Don't consider the cases of `unary_op', newlines,
         * declaration types (int, etc.), if, while, for,
         * identifiers (handled at the beginning of the loop),
         * periods, or preprocessor commands. */

        if ((settings.max_col &gt; 0) &amp;&amp; (buf_break != NULL))
        {
            if ( ( (type_code == binary_op) ||
                   (type_code == postop) ||
                   (type_code == question) ||
                   ((type_code == colon) &amp;&amp; (scase || (squest &lt;= 0))) ||
                   (type_code == semicolon) ||
                   (type_code == sp_nparen) ||
                   (type_code == sp_else) ||
                   ((type_code == ident) &amp;&amp; (*token == '\"')) ||
                   (type_code == struct_delim) ||
                   (type_code == comma)) &amp;&amp;
                 (output_line_length () &gt; settings.max_col))
            {
                break_line = 1;
            }
        }
    }                           /* end of main infinite loop */
}
</t>
<t tx="ekr.20111112092813.4154">g.cls()</t>
<t tx="ekr.20111112093605.4679"># leoSettings.leo no longer sets any bindings for run-xxx-unit-test.
# These are now EKR's preferred settings everywhere:
# there should be little need to run unit tests externally.

run-selected-unit-tests-locally     = Alt-4
run-marked-unit-tests-locally       = Alt-5
run-all-unit-tests-locally          = Alt-6

# Important: Alt-9 is used by a unit test
</t>
<t tx="ekr.20111115080347.3872"></t>
<t tx="ekr.20111123042627.6654"># Leo loads plugins in the order they appear here.

# **Important**: to change these defaults, put
# an @enabled-plugins node in myLeoSettings.leo.

# Highly-recommended plugins:
plugins_menu.py
free_layout.py # needs to be early
viewrendered.py

# Recommended plugins:
mod_scripting.py

# Testing:
todo.py  # #1691.
</t>
<t tx="ekr.20111124094121.3941"># These exist for a unit test.</t>
<t tx="ekr.20111124094121.3942"></t>
<t tx="ekr.20111124094121.3943"></t>
<t tx="ekr.20111125182408.3947">def setup():
    while p.hasChildren():
        p.firstChild().doDelete()

setup()

try:
    files = (r'a\b.c',r'a\b.h',)
    c.importCommands.createImportParent(p,files)
    child = p.firstChild()
    assert child
    assert child.h == 'a/b',child.h
finally:
    setup()</t>
<t tx="ekr.20111125183140.3952">child = p.firstChild()
def setup():
    while p.hasChildren():
        p.firstChild().doDelete()

setup()
try:
    c.importCommands.createOutline(
        fileName=r'a\b\c.xyzzy',
        parent=p,
        atAuto=False,atShadow=False,
        s='test body',
        ext='xyzzy'
    )
    child = p.firstChild()
    assert child
    h = g.os_path_finalize_join(g.app.loadDir,'..','test','a','b','c.xyzzy')
    h = h.replace('\\','/')
    h = '@file ' + h
    # C: vs c: is not relevant here.
    assert child.h.lower() == h.lower(),child.h
finally:
    setup()</t>
<t tx="ekr.20111211094936.3970"></t>
<t tx="ekr.20120212130242.3942"></t>
<t tx="ekr.20120212130242.3945"></t>
<t tx="ekr.20120212130242.3946"></t>
<t tx="ekr.20120212130242.3947"></t>
<t tx="ekr.20120212130242.3948"></t>
<t tx="ekr.20120212130242.3949"></t>
<t tx="ekr.20120303054735.3931"># Test of bug 930726: expandNodeAndGoToFirstChild only expands or only goes to first child .

p.contract()
c.expandNodeAndGoToFirstChild()
assert c.p == p.firstChild()
</t>
<t tx="ekr.20120303054735.3932"></t>
<t tx="ekr.20120306201833.3942"># Test of bug 799695: colorizer bug after move-lines-up into a docstring

# import os ; os.system('cls')

n = c.frame.body.colorizer.full_recolor_count

c.testManager.runEditCommandTest(p)

# Not an effective test, even though the bug fix was to call
# c.recolor_now(incremental=False)

# g.trace(n,c.frame.body.colorizer.full_recolor_count)

# assert c.frame.body.colorizer.full_recolor_count &gt; n
</t>
<t tx="ekr.20120306201833.3943">@language python
def test():
    """ a
    b
    c
    print 1
    """
    
    print 2
</t>
<t tx="ekr.20120306201833.3944">@language python
def test():
    """ a
    b
    c
    """
    print 1
    
    print 2
</t>
<t tx="ekr.20120306201833.3945">@language python
def test():
    """ a
    b
    c
    print 1
    """
    
    print 2
</t>
<t tx="ekr.20120525072421.3889">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20120525072421.3890"># Should remove all trailing whitespace.

a = 2

    b = 3
    c  = 4
d = 5
e = 6
x
</t>
<t tx="ekr.20120525072421.3891"># Should remove all trailing whitespace.

a = 2   
    
    b = 3
    c  = 4  
d = 5
e = 6  
x
</t>
<t tx="ekr.20120525072421.3892"># Should remove all trailing whitespace.

a = 2

    b = 3
    c  = 4
d = 5
e = 6
x
</t>
<t tx="ekr.20121016134831.3906">import leo.core.leoBeautify as leoBeautify
cpp = leoBeautify.CPrettyPrinter(c)
# ts2p = c.convertCommands.TS_To_Python(c)
fn = 'typescript tokenize test'
p2 = g.findNodeInTree(c,p,fn)
assert p2,'not found: %s' % (fn)
aList = cpp.tokenize(p2.b)
assert aList
# bts2p.convertCodeList(aList)
# s = ''.join(aList)
</t>
<t tx="ekr.20121016134831.3907">@language javascript

public attemptIncrementalUpdateUnit(previousScript: Script,scriptId: string,newSourceText: ISourceText,editRange: ScriptEditRange): UpdateUnitResult
    self.logger.log("attemptIncrementalUpdateUnit(\"" + scriptId + "\")")
    if editRange === None:
        throw Error("editRange should be valid")
    var scope1 = self.getEnclosingScopeContextIfSingleScopeEdit(previousScript,scriptId,newSourceText,editRange)
    if scope1 === None:
        return None
    var newScopeLength = scope1.scopeStartAST.limChar - scope1.scopeStartAST.minChar + editRange.delta
    # Heuristic: if the range to reparse is too big,bail out.
    # This is because a full parse will be faster than an incremental parse followed by all the necessary fix-ups
    if newScopeLength &gt;= newSourceText.getLength()/ 2:
        self.logger.log("  Bailing out because range of scope to reparse(" + newScopeLength + " characters)is greater than half the size of the source text")
        return None
    # Capture parsing errors so that they are part of "updateResult"
    var parseErrors: TypeScript.ErrorEntry:[] = []
    var errorCapture = function(minChar: number,charLen: number,message: string,unitIndex: number): void
        parseErrors.push(TypeScript.ErrorEntry:(unitIndex,minChar,minChar + charLen,message))
    var quickParseResult = TypeScript.quickParse(self.logger,scope1.scopeStartAST,newSourceText,scope1.scopeStartAST.minChar,scope1.scopeStartAST.minChar + newScopeLength,errorCapture)
    if quickParseResult.endLexState != TypeScript.LexState.Start:
        self.logger.log("  Bailing out because scope contains unterminated comment")
        return None
    var scriptFragment = quickParseResult.Script
    if scriptFragment.vars.members.length !== 0:
        self.logger.log("  Bailing out because new source text defines variables")
        return None
    #if(scriptFragment.scopes.members.length !== 1)
    #    logger.log("  Bailing out because new source text defines more than one scope(or none)");
    #    return null;
    #
    # This detects adding close curlies,since they have the side effect of having the parser
    # parse more members in the scope range.
    if scriptFragment.bod.members.length !== 1:
        self.logger.log("  Bailing out because new source text defines more than one scope(or none)")
        return None
    var oldScope = scope1.scopeStartAST
    var newScope = scriptFragment.bod.members[0]
    if oldScope.nodeType != newScope.nodeType:
        self.logger.log("  Bailing out because new source text does not define the same scope type as the existing scope")
        return None
    if not (&lt;any&gt;oldScope).leftCurlyCount or not (&lt;any&gt;oldScope).rightCurlyCount:
        self.logger.log("  Bailing out because sopce doesn't have left/right curly count")
        return None
    if(&lt;any&gt;oldScope).leftCurlyCount !==(&lt;any&gt;newScope).leftCurlyCount:
        self.logger.log("  Bailing out because new source text contains more(or fewer)left curly braces")
        return None
    if(&lt;any&gt;oldScope).rightCurlyCount !==(&lt;any&gt;newScope).rightCurlyCount:
        self.logger.log("  Bailing out because new source text contains more(or fewer)right curly braces")
        return None
    if newScope.minChar !== 0:
        self.logger.log("  Bailing out because new function declaration does not start at position 0")
        return None
    if newScope.limChar !== newScopeLength:
        self.logger.log("  Bailing out because new function declaration does not end at the new end position")
        return None
    return TypeScript.UpdateUnitResult.singleScopeEdits(previousScript,scriptFragment,oldScope,newScope,editRange,parseErrors)
</t>
<t tx="ekr.20130918043621.4195"># First, we must remove the trailing newline from the 'after' line.
h = 'after sel=3.6,3.6'
p2 = g.findNodeInTree(c,p,h)
assert p2,h
s = p2.b
if s.endswith('\n'):
    p2.b = p2.b[:-1]
c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20130918043621.4196">line 1
line 2
line 3</t>
<t tx="ekr.20130918043621.4197">line 1
line 2
line 3
</t>
<t tx="ekr.20130918043621.4198">line 1
line 2
line 3</t>
<t tx="ekr.20130918043621.4199">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20130918043621.4200">line 1
line 2

line 4
</t>
<t tx="ekr.20130918043621.4201">line 1
line 2
line 3
line 4
</t>
<t tx="ekr.20130918043621.4202">line 1
line 2

line 4
</t>
<t tx="ekr.20130918043621.4203">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20130918043621.4204">line 1
li
line 3
</t>
<t tx="ekr.20130918043621.4205">line 1
line 2
line 3
</t>
<t tx="ekr.20130918043621.4206">line 1
li
line 3
</t>
<t tx="ekr.20130918050446.4202">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20130918050446.4203">line 1
line 2line 3
</t>
<t tx="ekr.20130918050446.4204">line 1
line 2
line 3
</t>
<t tx="ekr.20130918050446.4205">line 1
line 2line 3
</t>
<t tx="ekr.20130918050446.4210">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20130918050446.4211">line 1
line 2
line 4
</t>
<t tx="ekr.20130918050446.4212">line 1
line 2

line 4
</t>
<t tx="ekr.20130918050446.4213">line 1
line 2
line 4
</t>
<t tx="ekr.20130918051958.4176"># First, we must remove the trailing newline from the 'after' line.
h = 'after sel=3.6,3.6'
p2 = g.findNodeInTree(c,p,h)
assert p2,h
s = p2.b
if s.endswith('\n'):
    p2.b = p2.b[:-1]
c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20130918051958.4177">line 1
line 2
line 3</t>
<t tx="ekr.20130918051958.4178">line 1
line 2
line 3
</t>
<t tx="ekr.20130918051958.4179">line 1
line 2
line 3</t>
<t tx="ekr.20130918052416.4180">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20130918052416.4181">line 1
# The next line contains two trailing blanks.
line 3line 4
</t>
<t tx="ekr.20130918052416.4182">line 1
# The next line contains two trailing blanks.
line 3  
line 4
</t>
<t tx="ekr.20130918052416.4183">line 1
# The next line contains two trailing blanks.
line 3line 4
</t>
<t tx="ekr.20130923090601.4178">u = c.undoer
assert u
c.insertHeadlineBefore()
assert u.undoMenuLabel == 'Undo Insert Node Before',repr(u.undoMenuLabel)
c.undoer.undo()
assert u.redoMenuLabel == 'Redo Insert Node Before',repr(u.undoMenuLabel)
</t>
<t tx="ekr.20131103084038.4274"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20131103084038.4275">@pagewidth 40
'''
docstring.
'''
</t>
<t tx="ekr.20131103084038.4276">@pagewidth 40
'''
docstring.
'''
</t>
<t tx="ekr.20131103084038.4277">@pagewidth 40
'''
docstring.
'''
</t>
<t tx="ekr.20131103084038.4282"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20131103084038.4283">@pagewidth 40
'''
docstring.
'''
</t>
<t tx="ekr.20131103084038.4284">@pagewidth 40
'''
docstring.
'''
</t>
<t tx="ekr.20131103084038.4285">@pagewidth 40
'''
docstring.
'''
</t>
<t tx="ekr.20131103084038.4290"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20131103084038.4291">@pagewidth 40
'''
docstring. more docstring.
'''
</t>
<t tx="ekr.20131103084038.4292">@pagewidth 40
'''
docstring.
more docstring.
'''
</t>
<t tx="ekr.20131103084038.4293">@pagewidth 40
'''
docstring. more docstring.
'''
</t>
<t tx="ekr.20131103084038.4298"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20131103084038.4299">- Point 1. xxxxxxxxxxxxxxxxxxxxxxxxxxxx
  Line 11.
A. Point 2. xxxxxxxxxxxxxxxxxxxxxxxxxxx
</t>
<t tx="ekr.20131103084038.4300">- Point 1. xxxxxxxxxxxxxxxxxxxxxxxxxxxx
Line 11.
A. Point 2. xxxxxxxxxxxxxxxxxxxxxxxxxxx
</t>
<t tx="ekr.20131103084038.4301">- Point 1. xxxxxxxxxxxxxxxxxxxxxxxxxxxx
  Line 11.
A. Point 2. xxxxxxxxxxxxxxxxxxxxxxxxxxx
</t>
<t tx="ekr.20131103084038.4306"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20131103084038.4307">A. Point 2. xxxxxxxxxxxxxxxxxxxxxxxxxxx
   Line 22.
1. Point 3. xxxxxxxxxxxxxxxxxxxxxxxxxxx
</t>
<t tx="ekr.20131103084038.4308">A. Point 2. xxxxxxxxxxxxxxxxxxxxxxxxxxx
  Line 22.
1. Point 3. xxxxxxxxxxxxxxxxxxxxxxxxxxx
</t>
<t tx="ekr.20131103084038.4309">A. Point 2. xxxxxxxxxxxxxxxxxxxxxxxxxxx
   Line 22.
1. Point 3. xxxxxxxxxxxxxxxxxxxxxxxxxxx
</t>
<t tx="ekr.20131103084038.4314"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20131103084038.4315">1. Point 3. xxxxxxxxxxxxxxxxxxxxxxxxxxx
   Line 32.

2. Point 4  xxxxxxxxxxxxxxxxxxxxxxxxxxx
</t>
<t tx="ekr.20131103084038.4316">1. Point 3. xxxxxxxxxxxxxxxxxxxxxxxxxxx
Line 32.

2. Point 4  xxxxxxxxxxxxxxxxxxxxxxxxxxx
</t>
<t tx="ekr.20131103084038.4317">1. Point 3. xxxxxxxxxxxxxxxxxxxxxxxxxxx
   Line 32.

2. Point 4  xxxxxxxxxxxxxxxxxxxxxxxxxxx
</t>
<t tx="ekr.20131103084038.4322"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20131103084038.4323">1. Point 3. xxxxxxxxxxxxxxxxxxxxxxxxxxx
   Line 32.

2. Point 4 xxxxxxxxxxxxxxxxxxxxxxxxxxx
        Line 41.
</t>
<t tx="ekr.20131103084038.4324">1. Point 3. xxxxxxxxxxxxxxxxxxxxxxxxxxx
   Line 32.

2. Point 4 xxxxxxxxxxxxxxxxxxxxxxxxxxx
        Line 41.
</t>
<t tx="ekr.20131103084038.4325">1. Point 3. xxxxxxxxxxxxxxxxxxxxxxxxxxx
   Line 32.

2. Point 4 xxxxxxxxxxxxxxxxxxxxxxxxxxx
        Line 41.
</t>
<t tx="ekr.20131103084038.4330"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20131103084038.4331">2. Point 4 xxxxxxxxxxxxxxxxxxxxxxxxxxx
        Line 41.
</t>
<t tx="ekr.20131103084038.4332">2. Point 4 xxxxxxxxxxxxxxxxxxxxxxxxxxx
        Line 41.
</t>
<t tx="ekr.20131103084038.4333">2. Point 4 xxxxxxxxxxxxxxxxxxxxxxxxxxx
        Line 41.
</t>
<t tx="ekr.20131111155830.4249"></t>
<t tx="ekr.20131111155830.4250"># Not yet...

    &lt;BS&gt;        delete the character in front of the cursor
N   &lt;Del&gt;       delete N characters under and after the cursor
    &lt;Del&gt;       delete the character under the cursor
    &lt;Del&gt;       while entering a count: delete last character
    &lt;Down&gt;      recall newer command-line that starts with current command
    &lt;Esc&gt;       abandon command-line (if 'wildchar' is &lt;Esc&gt;, type it twice)
    &lt;Left&gt;      (motion) cursor left
    &lt;Right&gt;     (motion) cursor right
    &lt;S-Down&gt;    recall newer command-line from history
    &lt;S-Left&gt;    (motion) cursor one word left
    &lt;S-Right&gt;   (motion) cursor one word right
    &lt;S-Up&gt;      recall older command-line from history
    &lt;Up&gt;        recall older command-line that starts with current command

N   CTRL-^                  Edit alternate file N (equivalent to ":e #N").
N   CTRL-A                  add N to the number at or after the cursor
N   CTRL-B                  window N pages Backwards (upwards)
    CTRL-B                  (motion?) cursor to beginning of command-line
    CTRL-BREAK              MS-DOS: during searches: interrupt the search
    CTRL-C                  during searches: interrupt the search
N   CTRL-D                  window N lines Downwards (default: 1/2 window)
N   CTRL-E                  window N lines downwards (default: 1)
    CTRL-E                  (motion?) cursor to end of command-line
N   CTRL-F                  (motion) window N pages Forwards (downwards)
    CTRL-G                  show current file name (with path) and cursor position
N   CTRL-I                  (motion) go to Nth newer position in jump list
    CTRL-K {char1} {char2}  enter digraph
    CTRL-L                  Clear and redraw the screen.
N   CTRL-O                  (motion) go to Nth older position in jump list
N   CTRL-R                  redo last N undone changes
    CTRL-R &lt;0-9a-z"%:-&gt;     insert contents of register &lt;0-9a-z"%:-&gt;
N   CTRL-T                  (motion) Jump back from Nth older tag in tag list
N   CTRL-U                  window N lines Upwards (default: 1/2 window)
    CTRL-U                  remove all characters
    CTRL-V                  highlight blockwise or stop highlighting
    CTRL-V                  start highlighting blockwise   }  highlighted text
    CTRL-V {char}           insert {char} literally
    CTRL-V {number}         enter decimal value of character (up to three digits)
    CTRL-W                  delete the word in front of the cursor
    CTRL-W +                Increase current window height
    CTRL-W -                Decrease current window height
    CTRL-W =                Make all windows equal height
    CTRL-W CTRL-W           Move cursor to window below (wrap)
    CTRL-W CTRL-^           Split window and edit alternate file
    CTRL-W R                Rotate windows upwards
    CTRL-W W                Move cursor to window above (wrap)
    CTRL-W ]                Split window and jump to tag under cursor
    CTRL-W _                Set current window height (default: very high)
    CTRL-W b                Move cursor to bottom window
    CTRL-W c  or :cl[ose]   Make buffer hidden and close window
    CTRL-W f                Split window and edit file name under the cursor
    CTRL-W j                Move cursor to window below
    CTRL-W k                Move cursor to window above
    CTRL-W n  or :new       Create new empty window
    CTRL-W o  or :on[ly]    Make current window only one on the screen
    CTRL-W p                Move cursor to previous active window
    CTRL-W q  or :q[uit]    Quit editing and close window
    CTRL-W r                Rotate windows downwards
    CTRL-W s                Split window into two parts
    CTRL-W t                Move cursor to top window
    CTRL-W x                Exchange current window with next one
N   CTRL-X                  subtract N from the number at or after the cursor
N   CTRL-Y                  window N lines upwards (default: 1)
    CTRL-Z                  Same as ":stop!"
    CTRL-]                  Jump to the tag under cursor, unless changes have been made</t>
<t tx="ekr.20131111155830.4251">char F
char T
char f
char r
char t
letter m
letter q
motion &lt;
motion &gt;
motion c
motion d
motion gU
motion gq
motion gu
motion g~
motion y
pattern /
pattern ?
register @
</t>
<t tx="ekr.20131111155830.4252"># http://tnerual.eriogerg.free.fr/vimqrc.html
vim_0 0
vim_tilda ~
vim_plus +
vim_underscore _
vim_minus -
vim_comma ,
vim_dot .
vim_semicolon ;
vim_lparen (
vim_rparen )
vim_lcurly {
vim_rcurly }
vim_vertical |
vim_backtick `
vim_dollar $
vim_caret ^
vim_percent %
vim_langle &lt;
vim_langle &lt;&lt;
vim_rangle &gt;
vim_rangle &gt;&gt;
vim_pound #
vim_star *
vim_slash /\\n
vim_slash /
vim_question ?\\n
vim_question ?
vim_at @
vim_at @@
vim_dquote "
vim_lsquare [#
vim_lsquare [(
vim_lsquare [*
vim_lsquare [[
vim_lsquare []
vim_lsquare [p
vim_lsquare [{
vim_rsquare ]#
vim_rsquare ])
vim_rsquare ]*
vim_rsquare ][
vim_rsquare ]]
vim_rsquare ]p
vim_rsquare ]}
vim_A A
vim_B B
vim_C C
vim_D D
vim_E E
vim_F F
vim_G G
vim_H H
vim_I I
vim_J J
vim_K K
vim_M M
vim_L L
vim_N N
vim_O O
vim_P P
vim_R R
vim_S S
vim_T T
vim_U U
vim_V V
vim_W W
vim_X X
vim_Y Y
vim_Z ZQ
vim_Z ZZ
vim_a a
vim_b b
vim_c c
vim_d dd
vim_d d
vim_g g~
vim_g g^
vim_g g#
vim_g g$
vim_g g*
vim_g g0
vim_g gD
vim_g gE
vim_g gI
vim_g gU
vim_g ga
vim_g gd
vim_g ge
vim_g gf
vim_g gg
vim_g gj
vim_g gk
vim_g gq
vim_g gs
vim_g gu
vim_g gv
vim_h h
vim_i i
vim_j j
vim_k k
vim_l l
vim_n n
vim_m m
vim_o o
vim_p p
vim_q q
vim_r r
vim_s s
vim_t t
vim_u u
vim_v v
vim_w w
vim_x x
vim_y y
vim_y yy
vim_z z-
vim_z z.
vim_z z&lt;CR&gt;
vim_z zb
vim_z zh
vim_z zl
vim_z zt
vim_z zz
</t>
<t tx="ekr.20131111155830.4253"># CR
# Ctrl-End
# Ctrl-Home
# Ctrl-Left
# Ctrl-M
# Ctrl-N
# Ctrl-P
# Ctrl-Right
# End
# Home
# Shift-Left
# Shift-Right

( 	
)
{
}
[[
[]
][
]]
$
^	
+
,
-
;
_
0
B
E
F
G
T
W
b
e
f
g$
g^
g0
gE
# gEnd
# gHome	
ge
gg
h
j
k
t
w
</t>
<t tx="ekr.20131111155830.4254">char F
char T
char f
char t
</t>
<t tx="ekr.20140217055617.4231"># For a unit test.</t>
<t tx="ekr.20140716121225.4354">print(p.v.gnx)</t>
<t tx="ekr.20140902101931.4478"></t>
<t tx="ekr.20150216110251.11"># Do not delete this node.
# It is used by unit tests.</t>
<t tx="ekr.20150321155210.11"></t>
<t tx="ekr.20150414144038.1"># main after
# mainto

ac = c.abbrevCommands
w = c.frame.body.wrapper
s = w.getAllText()
w.setInsertPoint(4)
i,j = g.getWord(s,4)
word = s[i:j]
aList = ac.getDynamicList(w,word)
c.k.arg = aList[1]
event = g.bunch(char=None, stroke=None, widget=w)
ac.dynamicExpandHelper(event)
    # This *does* support undo.
s = w.getAllText()
try:
    i = s.find('main')
    assert i == 2,i
finally:
    if 0:
        c.undoer.undo()
</t>
<t tx="ekr.20150414144103.1"># main after
# mainto

ac = c.abbrevCommands
w = c.frame.body.wrapper
s = w.getAllText()
w.setInsertPoint(4)
# i,j = g.getWord(s,4)
# word = s[i:j]
event = g.bunch(widget=w)
ac.dynamicCompletion(event)
try:
    i = s.find('main')
    assert i == 2,i
finally:
    if 1:
        c.undoer.undo(event=event)

</t>
<t tx="ekr.20150430053825.1">ac = c.abbrevCommands
assert ac
if c.abbrev_place_start is None or c.abbrev_place_end is None:
    self.skipTest('no abbreviation settings') # #1345.
child = g.findNodeInTree(c,p,'child')
assert child
old_b = child.b
try:
    i,j,val = 0,0,child.b
    # ac.make_script_substitutions(i,j,val)
    # ac.find_place_holder(child,True)
    new_s,i,j = ac.next_place(child.b,offset=0)
    assert i == 34 and j == 40,(i,j)
    new_s2,i,j = ac.next_place(new_s,offset=40)
    assert i == 54 and j == 58,(i,j)
finally:
    child.b = old_b
</t>
<t tx="ekr.20150430061225.1">def spam ():
    """None - Return &lt;|return|&gt;
    """

    &lt;|code|&gt;
</t>
<t tx="ekr.20150602215639.1">True: Automatically beautify all @&lt;file&gt; nodes when saving an outline.

# This *must* be False in unitTest.leo!</t>
<t tx="ekr.20160314133351.1">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20160314133351.2">first line
before foo += bar2 after
last line
</t>
<t tx="ekr.20160314133351.3">first line
before bar2 += foo after
last line
</t>
<t tx="ekr.20160314133351.4">first line
before foo += bar2 after
last line
</t>
<t tx="ekr.20161011095551.1">True: (Experimental): The @auto write code expands section references.
False: (Legacy):      The @auto write code ignores section references.
</t>
<t tx="ekr.20161123080832.1">'''
Create a table of expected headlines in a unit test.

Usage: select the desired subnode of an @test node.
'''
g.cls()
# Proper escapes are tricky.
if p.parent() and p.parent().h.startswith('@test'):
    table = [
        '(%s, "%s"),' % (
            p.level()-c.p.level(),
            p.h.replace('\\', '\\\\').replace('"', '\\"'),
        )
            for p in p.subtree()
    ]
    print("table = (\n    %s\n)" % '\n    '.join(table))
else:
    print('select a child of an @test node node')</t>
<t tx="ekr.20161129030232.1"></t>
<t tx="ekr.20170401123840.1"># To do: use tables as in the clean-c test.
</t>
<t tx="ekr.20170401123840.10"># Not valid for external tests: uses @&lt;file&gt; node.
if g.app.isExternalUnitTest or g.in_bridge:
    self.skipTest('Can not be run externally')
else:
    trace = False
    root = p.parent().parent()
    h = '@clean unittest/at-clean-line-number-test.py'
    target = g.findNodeAnywhere(c, h)
    assert target, 'no target'
    s = c.gotoCommands.get_external_file_with_sentinels(target)
    if trace:
        print(''.join(['%3s %s' % (i+1, s) for i, s in enumerate(g.splitLines(s))]))
    for n in range(20):
        p, offset, found = c.gotoCommands.find_file_line(n+1, p=target)
        if found:
            if trace: print('found: %2s %2s %s' % (n+1, offset, p and p.h))
        else:
            if trace: print('not found: %s' % (n+1))
            assert n == 6, n
            break
</t>
<t tx="ekr.20170401123840.11"># Not valid for external tests: uses @&lt;file&gt; node.
if g.app.isExternalUnitTest or g.in_bridge:
    self.skipTest('Can not be run externally')
else:
    trace = False
    root = p.parent().parent()
    h = '@file unittest/at-file-line-number-test.c'
    target = g.findNodeAnywhere(c, h)
    assert target, 'no target'
    s = c.gotoCommands.get_external_file_with_sentinels(target)
    if trace:
        print(''.join(['%3s %s' % (i, s) for i, s in enumerate(g.splitLines(s))]))
    for n in range(20):
        p, offset, found = c.gotoCommands.find_file_line(n+1, p=target)
        if found:
            if trace: print('found %2s %2s %s' % (n+1, offset, p and p.h))
        else:
            assert n == 10, n
            if trace: print('not found: %s' % n+1)
            break
</t>
<t tx="ekr.20170401123840.12"># Not valid for external tests: uses @&lt;file&gt; node.
if g.app.isExternalUnitTest or g.in_bridge:
    self.skipTest('Can not be run externally')
else:
    trace = False
    root = p.parent().parent()
    h = '@file unittest/at-file-line-number-test.py'
    target = g.findNodeAnywhere(c, h)
    assert target, 'no target'
    s = c.gotoCommands.get_external_file_with_sentinels(target)
    if trace:
        print(''.join(['%3s %s' % (i, s) for i, s in enumerate(g.splitLines(s))]))
    for n in range(20):
        p, offset, found = c.gotoCommands.find_file_line(n+1, p=target)
        if found:
            if trace: print('found %2s %2s %s' % (n+1, offset, p and p.h))
        else:
            assert n == 10, n
            if trace: print('not found: %s' % n+1)
            break
</t>
<t tx="ekr.20170401123840.13"># Not valid for external tests: uses @&lt;file&gt; node.
if g.app.isExternalUnitTest or g.in_bridge:
    self.skipTest('Can not be run externally')
else:
    trace = False
    h = '@nosent unittest/at-nosent-line-number-test.py'
    root = g.findNodeAnywhere(c, h)
    assert root
    assert root.isAtNoSentFileNode(), root
    s = c.gotoCommands.get_external_file_with_sentinels(root)
    if trace:
        print(''.join(['%3s %s' % (i+1, s) for i, s in enumerate(g.splitLines(s))]))
    for n in range(20):
        p, offset, found = c.gotoCommands.find_file_line(n+1, p=root)
        if found:
            if trace: print('found: %2s %2s %s' % (n+1, offset, p and p.h))
        else:
            if trace: print('not found: %s' % (n+1))
            assert n == 6, n
            break
</t>
<t tx="ekr.20170401123840.14"># Not valid for external tests: uses @&lt;file&gt; node.
if g.app.isExternalUnitTest or g.in_bridge:
    self.skipTest('Can not be run externally')
else:
    root = p.parent().parent()
    h = '@file unittest/at-file-line-number-test.py'
    target = g.findNodeAnywhere(c, h)
    assert target, 'no target'
    gnx = target.v.fileIndex
    assert gnx
    found = c.gotoCommands.find_gnx(root, gnx, h)
    assert found, 'not found'
</t>
<t tx="ekr.20170401123840.15">c.gotoCommands.success(lines=['a', 'b'], n=3, n2=3, p=p)
c.gotoCommands.fail(lines=['a', 'b'], n=3, root=p)

</t>
<t tx="ekr.20170401123840.2">child = g.findNodeInChildren(c, p, 'syntax-error')
assert child, 'no child'
try:
    c.goToScriptLineNumber(1, child)
finally:
    p.contract()
    c.selectPosition(p)
    c.redraw()
</t>
<t tx="ekr.20170401123840.3">@language python
def spam:
    pass
</t>
<t tx="ekr.20170401123840.4">import sys
# Not valid for external tests: uses @&lt;file&gt; node.
if g.app.isExternalUnitTest or g.in_bridge:
    self.skipTest('Can not be run externally')
if not sys.platform.startswith('win'):
    self.skipTest('Requires Windows')
trace = False
h = '@auto unittest/at-auto-md-line-number-test.md'
root = g.findNodeAnywhere(c, h)
assert root
s = c.gotoCommands.get_external_file_with_sentinels(root)
if trace:
    print(''.join(['%3s %s' % (i+1, s) for i, s in enumerate(g.splitLines(s))]))
for n in range(20):
    p, offset, found = c.gotoCommands.find_file_line(n+1, p=root)
    if found:
        if trace: print('found: %2s %2s %s' % (n+1, offset, p and p.h))
    else:
        if trace: print('not found: %s' % (n+1))
        assert n == 8, n
        break
</t>
<t tx="ekr.20170401123840.5"># Not valid for external tests: uses @&lt;file&gt; node.
if g.app.isExternalUnitTest or g.in_bridge:
    self.skipTest('Can not be run externally')
else:
    trace = False
    h = '@auto-org unittest/at-auto-org-line-number-test.org'
    root = g.findNodeAnywhere(c, h)
    assert root
    s = c.gotoCommands.get_external_file_with_sentinels(root)
    if trace:
        print(''.join(['%3s %s' % (i+1, s) for i, s in enumerate(g.splitLines(s))]))
    for n in range(20):
        p, offset, found = c.gotoCommands.find_file_line(n+1, p=root)
        if found:
            if trace: print('found: %2s %2s %s' % (n+1, offset, p and p.h))
        else:
            if trace: print('not found: %s' % (n+1))
            assert n == 6, n
            break
</t>
<t tx="ekr.20170401123840.6"># Not valid for external tests: uses @&lt;file&gt; node.
if g.app.isExternalUnitTest or g.in_bridge:
    self.skipTest('Can not be run externally')
else:
    trace = False
    h = '@auto-otl unittest/at-auto-otl-line-number-test.otl'
    root = g.findNodeAnywhere(c, h)
    assert root
    s = c.gotoCommands.get_external_file_with_sentinels(root)
    if trace:
        print(''.join(['%3s %s' % (i+1, s) for i, s in enumerate(g.splitLines(s))]))
    for n in range(20):
        p, offset, found = c.gotoCommands.find_file_line(n+1, p=root)
        if found:
            if trace: print('found: %2s %2s %s' % (n+1, offset, p and p.h))
        else:
            if trace: print('not found: %s' % n)
            assert n == 5, n
            break
</t>
<t tx="ekr.20170401123840.7">import sys
# Not valid for external tests: uses @&lt;file&gt; node.
if g.app.isExternalUnitTest or g.in_bridge:
    self.skipTest('Can not be run externally')
elif sys.platform.startswith('win'):
    trace = False
    root = p.parent().parent()
    # h = '@auto unittest/at-auto-line-number-test.py'
    h = '@auto unittest/at-auto-unit-test.py'
    target = g.findNodeAnywhere(c, h)
    assert target, 'no target'
    s = c.gotoCommands.get_external_file_with_sentinels(target)
    if trace:
        print(''.join(['%3s %s' % (i, s) for i, s in enumerate(g.splitLines(s))]))
    for n in range(25):
        p, offset, found = c.gotoCommands.find_file_line(n+1, p=target)
        if found:
            if trace: print('found %2s %2s %s' % (n+1, offset, p and p.h))
        else:
            assert n == 12, n
            if trace: print('not found: %s' % (n+1))
            break
else:
    self.skipTest('Skip on Linux')
</t>
<t tx="ekr.20170401123840.9"># Not valid for external tests: uses @&lt;file&gt; node.
if g.app.isExternalUnitTest or g.in_bridge:
    self.skipTest('Can not be run externally')
else:
    trace = False
    root = p.parent().parent()
    h = '@clean unittest/at-clean-line-number-test.c'
    target = g.findNodeAnywhere(c, h)
    assert target, 'no target'
    s = c.gotoCommands.get_external_file_with_sentinels(target)
    lines = g.splitLines(s)
    stripped_lines = [z for z in lines if not z.startswith('//@')]
    if trace:
        # g.printList(stripped_lines)
        print(''.join(['%3s %s' % (i+1, s) for i, s in enumerate(lines)]))
    table = (
        # n is the 1-based offset of the *stripped* lines.
        # Directives do not appear in @clean files.
        # (1,     '@language c'),
        # (2,     '@tabwidth -4'),
        (3,     '// before @others // line 1'),
        # (4,     '@others'),
        # spam node.
        (1,     'def spam(): // line 2'),
        (2,     '    pass'),
        # eggs node.
        (1,    'def eggs(): // line 4'),
        (2,    '    pass'),
        # resume top node.
        (5,    '// last line: line 6'),
    )
    for n, data in enumerate(table):
        offset, line = data
        p, offset2, found = c.gotoCommands.find_file_line(n+1, p=target)
        assert offset == offset2, 'expected offset %s, got %s %r' % (
            offset, offset2, p and p.h)
    p, offset, found = c.gotoCommands.find_file_line(15, p=target)
    assert not found
</t>
<t tx="ekr.20170415084531.1"># lowercase xml tags, one per line.

html
body
head
div
table
nodeA
nodeB
</t>
<t tx="ekr.20170707085217.1">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20170707085217.2">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20170707085217.3">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20170707085217.4">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20170707085319.1">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20170707085319.2">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20170707085319.3">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20170707085319.4">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20170707091311.1">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20170707091311.2">first line
line 1
    line a   
        line b
line c
last line
</t>
<t tx="ekr.20170707091311.3">first line
line 1
    line a   
        line b
line c
last line
</t>
<t tx="ekr.20170707091311.4">first line
line 1
    line a   
        line b
line c
last line
</t>
<t tx="ekr.20170707091358.1">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20170707091358.2">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20170707091358.3">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20170707091358.4">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20170707091730.1">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20170707091730.2">first line
line 1
    line a   
        line b
line c
last line
</t>
<t tx="ekr.20170707091730.3">first line
line 1
    line a   
        line b
line c
last line
</t>
<t tx="ekr.20170707091730.4">first line
line 1
    line a   
        line b
line c
last line
</t>
<t tx="ekr.20170707091814.1">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20170707091814.2">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20170707091814.3">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20170707091814.4">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20170707092257.1">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20170707092257.2">first line
line 1
    line a   
        line b
line c
last line
</t>
<t tx="ekr.20170707092257.3">first line
line 1
    line a   
        line b
line c
last line
</t>
<t tx="ekr.20170707092257.4">first line
line 1
    line a   
        line b
line c
last line
</t>
<t tx="ekr.20171126152936.1"># Required for unit tests: See #577.</t>
<t tx="ekr.20171126153044.1"># Required for unit tests: See #577.</t>
<t tx="ekr.20171126153138.1">See #577: https://github.com/leo-editor/leo-editor/issues/577
</t>
<t tx="ekr.20180214042153.1">False is the legacy value.</t>
<t tx="ekr.20181031152556.1"></t>
<t tx="ekr.20190113120618.1"># At least one unit test uses each of these files.</t>
<t tx="ekr.20190113120734.1">@language python
@others
</t>
<t tx="ekr.20190113120734.2">def spam():
    pass</t>
<t tx="ekr.20190113120734.3">def eggs():
    pass</t>
<t tx="ekr.20190113122443.1"># Must be False for @auto unit tests.</t>
<t tx="ekr.20190113123822.1">@language c
@tabwidth -4
// before @others // line 1
@others
// last line: line 6
</t>
<t tx="ekr.20190113123822.2">def spam(): // line 2
    pass
</t>
<t tx="ekr.20190113123822.3">def eggs(): // line 4
    pass
</t>
<t tx="ekr.20190113123853.1">@language python
@tabwidth -4
# Before @others: line 1
@others
# Last line: line 6
</t>
<t tx="ekr.20190113123853.2">def spam(): # line 2
    pass
</t>
<t tx="ekr.20190113123853.3">def eggs(): # line 4
    pass
</t>
<t tx="ekr.20190113124135.1">@language python
@tabwidth -4
# before @others: line 1
@others
# last line: line 6</t>
<t tx="ekr.20190113124135.2">def spam(): # line 2
    pass
</t>
<t tx="ekr.20190113124135.3">def eggs(): # line 4
    pass</t>
<t tx="ekr.20191207060251.1">@language python
@tabwidth -4
@others
</t>
<t tx="ekr.20191207060251.2">def spam():
    pass
</t>
<t tx="ekr.20191207060251.3">def eggs():
    pass
</t>
<t tx="ekr.20191215093835.1"></t>
<t tx="ekr.20191215093835.12"></t>
<t tx="ekr.20191215093835.13"></t>
<t tx="ekr.20191215093835.14"></t>
<t tx="ekr.20191215093835.15"></t>
<t tx="ekr.20191215093835.16"></t>
<t tx="ekr.20191215093835.4"></t>
<t tx="ekr.20191215093835.5"></t>
<t tx="ekr.20191215093835.6"></t>
<t tx="ekr.20191215093835.7"></t>
<t tx="ekr.20191215093835.8"></t>
<t tx="ekr.20191215093835.9"></t>
<t tx="ekr.20200205065723.1">@language python
@others
</t>
<t tx="ekr.20200205065723.2">def spam():
    pass</t>
<t tx="ekr.20200205065723.3">def eggs():
    pass
</t>
<t tx="ekr.20201123190854.1">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Services StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property--before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20201123191334.1">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item number 3. It is the
     third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20210829054801.1"></t>
<t tx="ekr.20210829055149.1"></t>
<t tx="ekr.20210829055819.1"></t>
</tnodes>
</leo_file>
